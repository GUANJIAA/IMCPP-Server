// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Depart.proto

#include "Depart.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace DepartProto {
constexpr DepartUser::DepartUser(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , useremail_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , userphone_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , userrole_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DepartUserDefaultTypeInternal {
  constexpr DepartUserDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DepartUserDefaultTypeInternal() {}
  union {
    DepartUser _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DepartUserDefaultTypeInternal _DepartUser_default_instance_;
constexpr DepartInfo::DepartInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : departusers_()
  , departname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , departdesc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , departid_(0){}
struct DepartInfoDefaultTypeInternal {
  constexpr DepartInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DepartInfoDefaultTypeInternal() {}
  union {
    DepartInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DepartInfoDefaultTypeInternal _DepartInfo_default_instance_;
constexpr ResultCode::ResultCode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : errmsg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , errcode_(0){}
struct ResultCodeDefaultTypeInternal {
  constexpr ResultCodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResultCodeDefaultTypeInternal() {}
  union {
    ResultCode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResultCodeDefaultTypeInternal _ResultCode_default_instance_;
constexpr CreateDepartRequest::CreateDepartRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : depart_(nullptr){}
struct CreateDepartRequestDefaultTypeInternal {
  constexpr CreateDepartRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateDepartRequestDefaultTypeInternal() {}
  union {
    CreateDepartRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateDepartRequestDefaultTypeInternal _CreateDepartRequest_default_instance_;
constexpr CreateDepartResponse::CreateDepartResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(nullptr)
  , success_(false){}
struct CreateDepartResponseDefaultTypeInternal {
  constexpr CreateDepartResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateDepartResponseDefaultTypeInternal() {}
  union {
    CreateDepartResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateDepartResponseDefaultTypeInternal _CreateDepartResponse_default_instance_;
constexpr DelDepartRequest::DelDepartRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : departname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DelDepartRequestDefaultTypeInternal {
  constexpr DelDepartRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DelDepartRequestDefaultTypeInternal() {}
  union {
    DelDepartRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DelDepartRequestDefaultTypeInternal _DelDepartRequest_default_instance_;
constexpr DelDepartResponse::DelDepartResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(nullptr)
  , success_(false){}
struct DelDepartResponseDefaultTypeInternal {
  constexpr DelDepartResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DelDepartResponseDefaultTypeInternal() {}
  union {
    DelDepartResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DelDepartResponseDefaultTypeInternal _DelDepartResponse_default_instance_;
constexpr AddDepartRequest::AddDepartRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , departname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , userrole_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AddDepartRequestDefaultTypeInternal {
  constexpr AddDepartRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddDepartRequestDefaultTypeInternal() {}
  union {
    AddDepartRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddDepartRequestDefaultTypeInternal _AddDepartRequest_default_instance_;
constexpr AddDepartResponse::AddDepartResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(nullptr)
  , success_(false){}
struct AddDepartResponseDefaultTypeInternal {
  constexpr AddDepartResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddDepartResponseDefaultTypeInternal() {}
  union {
    AddDepartResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddDepartResponseDefaultTypeInternal _AddDepartResponse_default_instance_;
constexpr QuitDepartRequest::QuitDepartRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : departname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct QuitDepartRequestDefaultTypeInternal {
  constexpr QuitDepartRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QuitDepartRequestDefaultTypeInternal() {}
  union {
    QuitDepartRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QuitDepartRequestDefaultTypeInternal _QuitDepartRequest_default_instance_;
constexpr QuitDepartResponse::QuitDepartResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(nullptr)
  , success_(false){}
struct QuitDepartResponseDefaultTypeInternal {
  constexpr QuitDepartResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QuitDepartResponseDefaultTypeInternal() {}
  union {
    QuitDepartResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QuitDepartResponseDefaultTypeInternal _QuitDepartResponse_default_instance_;
constexpr QueryDepartRequest::QueryDepartRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct QueryDepartRequestDefaultTypeInternal {
  constexpr QueryDepartRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryDepartRequestDefaultTypeInternal() {}
  union {
    QueryDepartRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryDepartRequestDefaultTypeInternal _QueryDepartRequest_default_instance_;
constexpr QueryDepartResponse::QueryDepartResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(nullptr)
  , departs_(nullptr)
  , success_(false){}
struct QueryDepartResponseDefaultTypeInternal {
  constexpr QueryDepartResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryDepartResponseDefaultTypeInternal() {}
  union {
    QueryDepartResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryDepartResponseDefaultTypeInternal _QueryDepartResponse_default_instance_;
constexpr QueryDepartUsersRequest::QueryDepartUsersRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , departname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct QueryDepartUsersRequestDefaultTypeInternal {
  constexpr QueryDepartUsersRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryDepartUsersRequestDefaultTypeInternal() {}
  union {
    QueryDepartUsersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryDepartUsersRequestDefaultTypeInternal _QueryDepartUsersRequest_default_instance_;
constexpr QueryDepartUsersResponse::QueryDepartUsersResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : departusername_()
  , result_(nullptr)
  , success_(false){}
struct QueryDepartUsersResponseDefaultTypeInternal {
  constexpr QueryDepartUsersResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryDepartUsersResponseDefaultTypeInternal() {}
  union {
    QueryDepartUsersResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryDepartUsersResponseDefaultTypeInternal _QueryDepartUsersResponse_default_instance_;
}  // namespace DepartProto
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Depart_2eproto[15];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Depart_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_Depart_2eproto[1];

const uint32_t TableStruct_Depart_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DepartProto::DepartUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DepartProto::DepartUser, username_),
  PROTOBUF_FIELD_OFFSET(::DepartProto::DepartUser, useremail_),
  PROTOBUF_FIELD_OFFSET(::DepartProto::DepartUser, userphone_),
  PROTOBUF_FIELD_OFFSET(::DepartProto::DepartUser, userrole_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DepartProto::DepartInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DepartProto::DepartInfo, departid_),
  PROTOBUF_FIELD_OFFSET(::DepartProto::DepartInfo, departname_),
  PROTOBUF_FIELD_OFFSET(::DepartProto::DepartInfo, departdesc_),
  PROTOBUF_FIELD_OFFSET(::DepartProto::DepartInfo, departusers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DepartProto::ResultCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DepartProto::ResultCode, errcode_),
  PROTOBUF_FIELD_OFFSET(::DepartProto::ResultCode, errmsg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DepartProto::CreateDepartRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DepartProto::CreateDepartRequest, depart_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DepartProto::CreateDepartResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DepartProto::CreateDepartResponse, result_),
  PROTOBUF_FIELD_OFFSET(::DepartProto::CreateDepartResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DepartProto::DelDepartRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DepartProto::DelDepartRequest, departname_),
  PROTOBUF_FIELD_OFFSET(::DepartProto::DelDepartRequest, username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DepartProto::DelDepartResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DepartProto::DelDepartResponse, result_),
  PROTOBUF_FIELD_OFFSET(::DepartProto::DelDepartResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DepartProto::AddDepartRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DepartProto::AddDepartRequest, username_),
  PROTOBUF_FIELD_OFFSET(::DepartProto::AddDepartRequest, departname_),
  PROTOBUF_FIELD_OFFSET(::DepartProto::AddDepartRequest, userrole_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DepartProto::AddDepartResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DepartProto::AddDepartResponse, result_),
  PROTOBUF_FIELD_OFFSET(::DepartProto::AddDepartResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DepartProto::QuitDepartRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DepartProto::QuitDepartRequest, departname_),
  PROTOBUF_FIELD_OFFSET(::DepartProto::QuitDepartRequest, username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DepartProto::QuitDepartResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DepartProto::QuitDepartResponse, result_),
  PROTOBUF_FIELD_OFFSET(::DepartProto::QuitDepartResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DepartProto::QueryDepartRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DepartProto::QueryDepartRequest, username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DepartProto::QueryDepartResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DepartProto::QueryDepartResponse, result_),
  PROTOBUF_FIELD_OFFSET(::DepartProto::QueryDepartResponse, success_),
  PROTOBUF_FIELD_OFFSET(::DepartProto::QueryDepartResponse, departs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DepartProto::QueryDepartUsersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DepartProto::QueryDepartUsersRequest, username_),
  PROTOBUF_FIELD_OFFSET(::DepartProto::QueryDepartUsersRequest, departname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DepartProto::QueryDepartUsersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DepartProto::QueryDepartUsersResponse, result_),
  PROTOBUF_FIELD_OFFSET(::DepartProto::QueryDepartUsersResponse, success_),
  PROTOBUF_FIELD_OFFSET(::DepartProto::QueryDepartUsersResponse, departusername_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::DepartProto::DepartUser)},
  { 10, -1, -1, sizeof(::DepartProto::DepartInfo)},
  { 20, -1, -1, sizeof(::DepartProto::ResultCode)},
  { 28, -1, -1, sizeof(::DepartProto::CreateDepartRequest)},
  { 35, -1, -1, sizeof(::DepartProto::CreateDepartResponse)},
  { 43, -1, -1, sizeof(::DepartProto::DelDepartRequest)},
  { 51, -1, -1, sizeof(::DepartProto::DelDepartResponse)},
  { 59, -1, -1, sizeof(::DepartProto::AddDepartRequest)},
  { 68, -1, -1, sizeof(::DepartProto::AddDepartResponse)},
  { 76, -1, -1, sizeof(::DepartProto::QuitDepartRequest)},
  { 84, -1, -1, sizeof(::DepartProto::QuitDepartResponse)},
  { 92, -1, -1, sizeof(::DepartProto::QueryDepartRequest)},
  { 99, -1, -1, sizeof(::DepartProto::QueryDepartResponse)},
  { 108, -1, -1, sizeof(::DepartProto::QueryDepartUsersRequest)},
  { 116, -1, -1, sizeof(::DepartProto::QueryDepartUsersResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DepartProto::_DepartUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DepartProto::_DepartInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DepartProto::_ResultCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DepartProto::_CreateDepartRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DepartProto::_CreateDepartResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DepartProto::_DelDepartRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DepartProto::_DelDepartResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DepartProto::_AddDepartRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DepartProto::_AddDepartResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DepartProto::_QuitDepartRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DepartProto::_QuitDepartResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DepartProto::_QueryDepartRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DepartProto::_QueryDepartResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DepartProto::_QueryDepartUsersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DepartProto::_QueryDepartUsersResponse_default_instance_),
};

const char descriptor_table_protodef_Depart_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Depart.proto\022\013DepartProto\"V\n\nDepartUse"
  "r\022\020\n\010userName\030\001 \001(\014\022\021\n\tuserEmail\030\002 \001(\014\022\021"
  "\n\tuserPhone\030\003 \001(\014\022\020\n\010userRole\030\004 \001(\014\"t\n\nD"
  "epartInfo\022\020\n\010departId\030\001 \001(\005\022\022\n\ndepartNam"
  "e\030\002 \001(\014\022\022\n\ndepartDesc\030\003 \001(\014\022,\n\013departUse"
  "rs\030\004 \003(\0132\027.DepartProto.DepartUser\"-\n\nRes"
  "ultCode\022\017\n\007errcode\030\001 \001(\005\022\016\n\006errmsg\030\002 \001(\014"
  "\">\n\023CreateDepartRequest\022\'\n\006depart\030\001 \001(\0132"
  "\027.DepartProto.DepartInfo\"P\n\024CreateDepart"
  "Response\022\'\n\006result\030\001 \001(\0132\027.DepartProto.R"
  "esultCode\022\017\n\007success\030\002 \001(\010\"8\n\020DelDepartR"
  "equest\022\022\n\ndepartName\030\001 \001(\014\022\020\n\010userName\030\002"
  " \001(\014\"M\n\021DelDepartResponse\022\'\n\006result\030\001 \001("
  "\0132\027.DepartProto.ResultCode\022\017\n\007success\030\002 "
  "\001(\010\"J\n\020AddDepartRequest\022\020\n\010userName\030\001 \001("
  "\014\022\022\n\ndepartName\030\002 \001(\014\022\020\n\010userRole\030\003 \001(\014\""
  "M\n\021AddDepartResponse\022\'\n\006result\030\001 \001(\0132\027.D"
  "epartProto.ResultCode\022\017\n\007success\030\002 \001(\010\"9"
  "\n\021QuitDepartRequest\022\022\n\ndepartName\030\001 \001(\014\022"
  "\020\n\010userName\030\002 \001(\014\"N\n\022QuitDepartResponse\022"
  "\'\n\006result\030\001 \001(\0132\027.DepartProto.ResultCode"
  "\022\017\n\007success\030\002 \001(\010\"&\n\022QueryDepartRequest\022"
  "\020\n\010userName\030\001 \001(\014\"y\n\023QueryDepartResponse"
  "\022\'\n\006result\030\001 \001(\0132\027.DepartProto.ResultCod"
  "e\022\017\n\007success\030\002 \001(\010\022(\n\007departs\030\003 \001(\0132\027.De"
  "partProto.DepartInfo\"\?\n\027QueryDepartUsers"
  "Request\022\020\n\010userName\030\001 \001(\014\022\022\n\ndepartName\030"
  "\002 \001(\014\"l\n\030QueryDepartUsersResponse\022\'\n\006res"
  "ult\030\001 \001(\0132\027.DepartProto.ResultCode\022\017\n\007su"
  "ccess\030\002 \001(\010\022\026\n\016departUserName\030\003 \003(\0142\201\004\n\020"
  "DepartServiceRpc\022S\n\014CreateDepart\022 .Depar"
  "tProto.CreateDepartRequest\032!.DepartProto"
  ".CreateDepartResponse\022J\n\tDelDepart\022\035.Dep"
  "artProto.DelDepartRequest\032\036.DepartProto."
  "DelDepartResponse\022J\n\tAddDepart\022\035.DepartP"
  "roto.AddDepartRequest\032\036.DepartProto.AddD"
  "epartResponse\022M\n\nQuitDepart\022\036.DepartProt"
  "o.QuitDepartRequest\032\037.DepartProto.QuitDe"
  "partResponse\022P\n\013QueryDepart\022\037.DepartProt"
  "o.QueryDepartRequest\032 .DepartProto.Query"
  "DepartResponse\022_\n\020QueryDepartUsers\022$.Dep"
  "artProto.QueryDepartUsersRequest\032%.Depar"
  "tProto.QueryDepartUsersResponseB\003\200\001\001b\006pr"
  "oto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Depart_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Depart_2eproto = {
  false, false, 1724, descriptor_table_protodef_Depart_2eproto, "Depart.proto", 
  &descriptor_table_Depart_2eproto_once, nullptr, 0, 15,
  schemas, file_default_instances, TableStruct_Depart_2eproto::offsets,
  file_level_metadata_Depart_2eproto, file_level_enum_descriptors_Depart_2eproto, file_level_service_descriptors_Depart_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Depart_2eproto_getter() {
  return &descriptor_table_Depart_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Depart_2eproto(&descriptor_table_Depart_2eproto);
namespace DepartProto {

// ===================================================================

class DepartUser::_Internal {
 public:
};

DepartUser::DepartUser(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DepartProto.DepartUser)
}
DepartUser::DepartUser(const DepartUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArenaForAllocation());
  }
  useremail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    useremail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_useremail().empty()) {
    useremail_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_useremail(), 
      GetArenaForAllocation());
  }
  userphone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    userphone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_userphone().empty()) {
    userphone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_userphone(), 
      GetArenaForAllocation());
  }
  userrole_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    userrole_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_userrole().empty()) {
    userrole_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_userrole(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:DepartProto.DepartUser)
}

inline void DepartUser::SharedCtor() {
username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
useremail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  useremail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
userphone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  userphone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
userrole_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  userrole_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DepartUser::~DepartUser() {
  // @@protoc_insertion_point(destructor:DepartProto.DepartUser)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DepartUser::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  useremail_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userphone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userrole_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DepartUser::ArenaDtor(void* object) {
  DepartUser* _this = reinterpret_cast< DepartUser* >(object);
  (void)_this;
}
void DepartUser::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DepartUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DepartUser::Clear() {
// @@protoc_insertion_point(message_clear_start:DepartProto.DepartUser)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty();
  useremail_.ClearToEmpty();
  userphone_.ClearToEmpty();
  userrole_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DepartUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes userName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes userEmail = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_useremail();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes userPhone = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_userphone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes userRole = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_userrole();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DepartUser::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DepartProto.DepartUser)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes userName = 1;
  if (!this->_internal_username().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_username(), target);
  }

  // bytes userEmail = 2;
  if (!this->_internal_useremail().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_useremail(), target);
  }

  // bytes userPhone = 3;
  if (!this->_internal_userphone().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_userphone(), target);
  }

  // bytes userRole = 4;
  if (!this->_internal_userrole().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_userrole(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DepartProto.DepartUser)
  return target;
}

size_t DepartUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DepartProto.DepartUser)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes userName = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_username());
  }

  // bytes userEmail = 2;
  if (!this->_internal_useremail().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_useremail());
  }

  // bytes userPhone = 3;
  if (!this->_internal_userphone().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_userphone());
  }

  // bytes userRole = 4;
  if (!this->_internal_userrole().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_userrole());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DepartUser::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DepartUser::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DepartUser::GetClassData() const { return &_class_data_; }

void DepartUser::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DepartUser *>(to)->MergeFrom(
      static_cast<const DepartUser &>(from));
}


void DepartUser::MergeFrom(const DepartUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DepartProto.DepartUser)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _internal_set_username(from._internal_username());
  }
  if (!from._internal_useremail().empty()) {
    _internal_set_useremail(from._internal_useremail());
  }
  if (!from._internal_userphone().empty()) {
    _internal_set_userphone(from._internal_userphone());
  }
  if (!from._internal_userrole().empty()) {
    _internal_set_userrole(from._internal_userrole());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DepartUser::CopyFrom(const DepartUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DepartProto.DepartUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepartUser::IsInitialized() const {
  return true;
}

void DepartUser::InternalSwap(DepartUser* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &username_, lhs_arena,
      &other->username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &useremail_, lhs_arena,
      &other->useremail_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &userphone_, lhs_arena,
      &other->userphone_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &userrole_, lhs_arena,
      &other->userrole_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DepartUser::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Depart_2eproto_getter, &descriptor_table_Depart_2eproto_once,
      file_level_metadata_Depart_2eproto[0]);
}

// ===================================================================

class DepartInfo::_Internal {
 public:
};

DepartInfo::DepartInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  departusers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DepartProto.DepartInfo)
}
DepartInfo::DepartInfo(const DepartInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      departusers_(from.departusers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  departname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    departname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_departname().empty()) {
    departname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_departname(), 
      GetArenaForAllocation());
  }
  departdesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    departdesc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_departdesc().empty()) {
    departdesc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_departdesc(), 
      GetArenaForAllocation());
  }
  departid_ = from.departid_;
  // @@protoc_insertion_point(copy_constructor:DepartProto.DepartInfo)
}

inline void DepartInfo::SharedCtor() {
departname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  departname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
departdesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  departdesc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
departid_ = 0;
}

DepartInfo::~DepartInfo() {
  // @@protoc_insertion_point(destructor:DepartProto.DepartInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DepartInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  departname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  departdesc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DepartInfo::ArenaDtor(void* object) {
  DepartInfo* _this = reinterpret_cast< DepartInfo* >(object);
  (void)_this;
}
void DepartInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DepartInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DepartInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:DepartProto.DepartInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  departusers_.Clear();
  departname_.ClearToEmpty();
  departdesc_.ClearToEmpty();
  departid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DepartInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 departId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          departid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes departName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_departname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes departDesc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_departdesc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .DepartProto.DepartUser departUsers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_departusers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DepartInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DepartProto.DepartInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 departId = 1;
  if (this->_internal_departid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_departid(), target);
  }

  // bytes departName = 2;
  if (!this->_internal_departname().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_departname(), target);
  }

  // bytes departDesc = 3;
  if (!this->_internal_departdesc().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_departdesc(), target);
  }

  // repeated .DepartProto.DepartUser departUsers = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_departusers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_departusers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DepartProto.DepartInfo)
  return target;
}

size_t DepartInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DepartProto.DepartInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DepartProto.DepartUser departUsers = 4;
  total_size += 1UL * this->_internal_departusers_size();
  for (const auto& msg : this->departusers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes departName = 2;
  if (!this->_internal_departname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_departname());
  }

  // bytes departDesc = 3;
  if (!this->_internal_departdesc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_departdesc());
  }

  // int32 departId = 1;
  if (this->_internal_departid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_departid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DepartInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DepartInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DepartInfo::GetClassData() const { return &_class_data_; }

void DepartInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DepartInfo *>(to)->MergeFrom(
      static_cast<const DepartInfo &>(from));
}


void DepartInfo::MergeFrom(const DepartInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DepartProto.DepartInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  departusers_.MergeFrom(from.departusers_);
  if (!from._internal_departname().empty()) {
    _internal_set_departname(from._internal_departname());
  }
  if (!from._internal_departdesc().empty()) {
    _internal_set_departdesc(from._internal_departdesc());
  }
  if (from._internal_departid() != 0) {
    _internal_set_departid(from._internal_departid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DepartInfo::CopyFrom(const DepartInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DepartProto.DepartInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepartInfo::IsInitialized() const {
  return true;
}

void DepartInfo::InternalSwap(DepartInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  departusers_.InternalSwap(&other->departusers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &departname_, lhs_arena,
      &other->departname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &departdesc_, lhs_arena,
      &other->departdesc_, rhs_arena
  );
  swap(departid_, other->departid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DepartInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Depart_2eproto_getter, &descriptor_table_Depart_2eproto_once,
      file_level_metadata_Depart_2eproto[1]);
}

// ===================================================================

class ResultCode::_Internal {
 public:
};

ResultCode::ResultCode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DepartProto.ResultCode)
}
ResultCode::ResultCode(const ResultCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errmsg().empty()) {
    errmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_errmsg(), 
      GetArenaForAllocation());
  }
  errcode_ = from.errcode_;
  // @@protoc_insertion_point(copy_constructor:DepartProto.ResultCode)
}

inline void ResultCode::SharedCtor() {
errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
errcode_ = 0;
}

ResultCode::~ResultCode() {
  // @@protoc_insertion_point(destructor:DepartProto.ResultCode)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResultCode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  errmsg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResultCode::ArenaDtor(void* object) {
  ResultCode* _this = reinterpret_cast< ResultCode* >(object);
  (void)_this;
}
void ResultCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResultCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResultCode::Clear() {
// @@protoc_insertion_point(message_clear_start:DepartProto.ResultCode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errmsg_.ClearToEmpty();
  errcode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResultCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 errcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          errcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes errmsg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResultCode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DepartProto.ResultCode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 errcode = 1;
  if (this->_internal_errcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_errcode(), target);
  }

  // bytes errmsg = 2;
  if (!this->_internal_errmsg().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_errmsg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DepartProto.ResultCode)
  return target;
}

size_t ResultCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DepartProto.ResultCode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes errmsg = 2;
  if (!this->_internal_errmsg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_errmsg());
  }

  // int32 errcode = 1;
  if (this->_internal_errcode() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_errcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResultCode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResultCode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResultCode::GetClassData() const { return &_class_data_; }

void ResultCode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResultCode *>(to)->MergeFrom(
      static_cast<const ResultCode &>(from));
}


void ResultCode::MergeFrom(const ResultCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DepartProto.ResultCode)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_errmsg().empty()) {
    _internal_set_errmsg(from._internal_errmsg());
  }
  if (from._internal_errcode() != 0) {
    _internal_set_errcode(from._internal_errcode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResultCode::CopyFrom(const ResultCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DepartProto.ResultCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultCode::IsInitialized() const {
  return true;
}

void ResultCode::InternalSwap(ResultCode* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &errmsg_, lhs_arena,
      &other->errmsg_, rhs_arena
  );
  swap(errcode_, other->errcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResultCode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Depart_2eproto_getter, &descriptor_table_Depart_2eproto_once,
      file_level_metadata_Depart_2eproto[2]);
}

// ===================================================================

class CreateDepartRequest::_Internal {
 public:
  static const ::DepartProto::DepartInfo& depart(const CreateDepartRequest* msg);
};

const ::DepartProto::DepartInfo&
CreateDepartRequest::_Internal::depart(const CreateDepartRequest* msg) {
  return *msg->depart_;
}
CreateDepartRequest::CreateDepartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DepartProto.CreateDepartRequest)
}
CreateDepartRequest::CreateDepartRequest(const CreateDepartRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_depart()) {
    depart_ = new ::DepartProto::DepartInfo(*from.depart_);
  } else {
    depart_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DepartProto.CreateDepartRequest)
}

inline void CreateDepartRequest::SharedCtor() {
depart_ = nullptr;
}

CreateDepartRequest::~CreateDepartRequest() {
  // @@protoc_insertion_point(destructor:DepartProto.CreateDepartRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateDepartRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete depart_;
}

void CreateDepartRequest::ArenaDtor(void* object) {
  CreateDepartRequest* _this = reinterpret_cast< CreateDepartRequest* >(object);
  (void)_this;
}
void CreateDepartRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateDepartRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateDepartRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DepartProto.CreateDepartRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && depart_ != nullptr) {
    delete depart_;
  }
  depart_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateDepartRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DepartProto.DepartInfo depart = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_depart(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateDepartRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DepartProto.CreateDepartRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DepartProto.DepartInfo depart = 1;
  if (this->_internal_has_depart()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::depart(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DepartProto.CreateDepartRequest)
  return target;
}

size_t CreateDepartRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DepartProto.CreateDepartRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DepartProto.DepartInfo depart = 1;
  if (this->_internal_has_depart()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *depart_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateDepartRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateDepartRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateDepartRequest::GetClassData() const { return &_class_data_; }

void CreateDepartRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateDepartRequest *>(to)->MergeFrom(
      static_cast<const CreateDepartRequest &>(from));
}


void CreateDepartRequest::MergeFrom(const CreateDepartRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DepartProto.CreateDepartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_depart()) {
    _internal_mutable_depart()->::DepartProto::DepartInfo::MergeFrom(from._internal_depart());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateDepartRequest::CopyFrom(const CreateDepartRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DepartProto.CreateDepartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDepartRequest::IsInitialized() const {
  return true;
}

void CreateDepartRequest::InternalSwap(CreateDepartRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(depart_, other->depart_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateDepartRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Depart_2eproto_getter, &descriptor_table_Depart_2eproto_once,
      file_level_metadata_Depart_2eproto[3]);
}

// ===================================================================

class CreateDepartResponse::_Internal {
 public:
  static const ::DepartProto::ResultCode& result(const CreateDepartResponse* msg);
};

const ::DepartProto::ResultCode&
CreateDepartResponse::_Internal::result(const CreateDepartResponse* msg) {
  return *msg->result_;
}
CreateDepartResponse::CreateDepartResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DepartProto.CreateDepartResponse)
}
CreateDepartResponse::CreateDepartResponse(const CreateDepartResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::DepartProto::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:DepartProto.CreateDepartResponse)
}

inline void CreateDepartResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&result_)) + sizeof(success_));
}

CreateDepartResponse::~CreateDepartResponse() {
  // @@protoc_insertion_point(destructor:DepartProto.CreateDepartResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateDepartResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void CreateDepartResponse::ArenaDtor(void* object) {
  CreateDepartResponse* _this = reinterpret_cast< CreateDepartResponse* >(object);
  (void)_this;
}
void CreateDepartResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateDepartResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateDepartResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DepartProto.CreateDepartResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateDepartResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DepartProto.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateDepartResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DepartProto.CreateDepartResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DepartProto.ResultCode result = 1;
  if (this->_internal_has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DepartProto.CreateDepartResponse)
  return target;
}

size_t CreateDepartResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DepartProto.CreateDepartResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DepartProto.ResultCode result = 1;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateDepartResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateDepartResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateDepartResponse::GetClassData() const { return &_class_data_; }

void CreateDepartResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateDepartResponse *>(to)->MergeFrom(
      static_cast<const CreateDepartResponse &>(from));
}


void CreateDepartResponse::MergeFrom(const CreateDepartResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DepartProto.CreateDepartResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_mutable_result()->::DepartProto::ResultCode::MergeFrom(from._internal_result());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateDepartResponse::CopyFrom(const CreateDepartResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DepartProto.CreateDepartResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDepartResponse::IsInitialized() const {
  return true;
}

void CreateDepartResponse::InternalSwap(CreateDepartResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateDepartResponse, success_)
      + sizeof(CreateDepartResponse::success_)
      - PROTOBUF_FIELD_OFFSET(CreateDepartResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateDepartResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Depart_2eproto_getter, &descriptor_table_Depart_2eproto_once,
      file_level_metadata_Depart_2eproto[4]);
}

// ===================================================================

class DelDepartRequest::_Internal {
 public:
};

DelDepartRequest::DelDepartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DepartProto.DelDepartRequest)
}
DelDepartRequest::DelDepartRequest(const DelDepartRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  departname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    departname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_departname().empty()) {
    departname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_departname(), 
      GetArenaForAllocation());
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:DepartProto.DelDepartRequest)
}

inline void DelDepartRequest::SharedCtor() {
departname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  departname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DelDepartRequest::~DelDepartRequest() {
  // @@protoc_insertion_point(destructor:DepartProto.DelDepartRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DelDepartRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  departname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DelDepartRequest::ArenaDtor(void* object) {
  DelDepartRequest* _this = reinterpret_cast< DelDepartRequest* >(object);
  (void)_this;
}
void DelDepartRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DelDepartRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DelDepartRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DepartProto.DelDepartRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  departname_.ClearToEmpty();
  username_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DelDepartRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes departName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_departname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes userName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DelDepartRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DepartProto.DelDepartRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes departName = 1;
  if (!this->_internal_departname().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_departname(), target);
  }

  // bytes userName = 2;
  if (!this->_internal_username().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DepartProto.DelDepartRequest)
  return target;
}

size_t DelDepartRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DepartProto.DelDepartRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes departName = 1;
  if (!this->_internal_departname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_departname());
  }

  // bytes userName = 2;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_username());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DelDepartRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DelDepartRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DelDepartRequest::GetClassData() const { return &_class_data_; }

void DelDepartRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DelDepartRequest *>(to)->MergeFrom(
      static_cast<const DelDepartRequest &>(from));
}


void DelDepartRequest::MergeFrom(const DelDepartRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DepartProto.DelDepartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_departname().empty()) {
    _internal_set_departname(from._internal_departname());
  }
  if (!from._internal_username().empty()) {
    _internal_set_username(from._internal_username());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DelDepartRequest::CopyFrom(const DelDepartRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DepartProto.DelDepartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelDepartRequest::IsInitialized() const {
  return true;
}

void DelDepartRequest::InternalSwap(DelDepartRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &departname_, lhs_arena,
      &other->departname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &username_, lhs_arena,
      &other->username_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DelDepartRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Depart_2eproto_getter, &descriptor_table_Depart_2eproto_once,
      file_level_metadata_Depart_2eproto[5]);
}

// ===================================================================

class DelDepartResponse::_Internal {
 public:
  static const ::DepartProto::ResultCode& result(const DelDepartResponse* msg);
};

const ::DepartProto::ResultCode&
DelDepartResponse::_Internal::result(const DelDepartResponse* msg) {
  return *msg->result_;
}
DelDepartResponse::DelDepartResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DepartProto.DelDepartResponse)
}
DelDepartResponse::DelDepartResponse(const DelDepartResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::DepartProto::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:DepartProto.DelDepartResponse)
}

inline void DelDepartResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&result_)) + sizeof(success_));
}

DelDepartResponse::~DelDepartResponse() {
  // @@protoc_insertion_point(destructor:DepartProto.DelDepartResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DelDepartResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void DelDepartResponse::ArenaDtor(void* object) {
  DelDepartResponse* _this = reinterpret_cast< DelDepartResponse* >(object);
  (void)_this;
}
void DelDepartResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DelDepartResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DelDepartResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DepartProto.DelDepartResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DelDepartResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DepartProto.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DelDepartResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DepartProto.DelDepartResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DepartProto.ResultCode result = 1;
  if (this->_internal_has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DepartProto.DelDepartResponse)
  return target;
}

size_t DelDepartResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DepartProto.DelDepartResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DepartProto.ResultCode result = 1;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DelDepartResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DelDepartResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DelDepartResponse::GetClassData() const { return &_class_data_; }

void DelDepartResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DelDepartResponse *>(to)->MergeFrom(
      static_cast<const DelDepartResponse &>(from));
}


void DelDepartResponse::MergeFrom(const DelDepartResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DepartProto.DelDepartResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_mutable_result()->::DepartProto::ResultCode::MergeFrom(from._internal_result());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DelDepartResponse::CopyFrom(const DelDepartResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DepartProto.DelDepartResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelDepartResponse::IsInitialized() const {
  return true;
}

void DelDepartResponse::InternalSwap(DelDepartResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DelDepartResponse, success_)
      + sizeof(DelDepartResponse::success_)
      - PROTOBUF_FIELD_OFFSET(DelDepartResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DelDepartResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Depart_2eproto_getter, &descriptor_table_Depart_2eproto_once,
      file_level_metadata_Depart_2eproto[6]);
}

// ===================================================================

class AddDepartRequest::_Internal {
 public:
};

AddDepartRequest::AddDepartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DepartProto.AddDepartRequest)
}
AddDepartRequest::AddDepartRequest(const AddDepartRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArenaForAllocation());
  }
  departname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    departname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_departname().empty()) {
    departname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_departname(), 
      GetArenaForAllocation());
  }
  userrole_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    userrole_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_userrole().empty()) {
    userrole_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_userrole(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:DepartProto.AddDepartRequest)
}

inline void AddDepartRequest::SharedCtor() {
username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
departname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  departname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
userrole_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  userrole_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AddDepartRequest::~AddDepartRequest() {
  // @@protoc_insertion_point(destructor:DepartProto.AddDepartRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AddDepartRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  departname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userrole_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddDepartRequest::ArenaDtor(void* object) {
  AddDepartRequest* _this = reinterpret_cast< AddDepartRequest* >(object);
  (void)_this;
}
void AddDepartRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddDepartRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddDepartRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DepartProto.AddDepartRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty();
  departname_.ClearToEmpty();
  userrole_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddDepartRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes userName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes departName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_departname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes userRole = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_userrole();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddDepartRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DepartProto.AddDepartRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes userName = 1;
  if (!this->_internal_username().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_username(), target);
  }

  // bytes departName = 2;
  if (!this->_internal_departname().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_departname(), target);
  }

  // bytes userRole = 3;
  if (!this->_internal_userrole().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_userrole(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DepartProto.AddDepartRequest)
  return target;
}

size_t AddDepartRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DepartProto.AddDepartRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes userName = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_username());
  }

  // bytes departName = 2;
  if (!this->_internal_departname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_departname());
  }

  // bytes userRole = 3;
  if (!this->_internal_userrole().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_userrole());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddDepartRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddDepartRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddDepartRequest::GetClassData() const { return &_class_data_; }

void AddDepartRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AddDepartRequest *>(to)->MergeFrom(
      static_cast<const AddDepartRequest &>(from));
}


void AddDepartRequest::MergeFrom(const AddDepartRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DepartProto.AddDepartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _internal_set_username(from._internal_username());
  }
  if (!from._internal_departname().empty()) {
    _internal_set_departname(from._internal_departname());
  }
  if (!from._internal_userrole().empty()) {
    _internal_set_userrole(from._internal_userrole());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddDepartRequest::CopyFrom(const AddDepartRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DepartProto.AddDepartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddDepartRequest::IsInitialized() const {
  return true;
}

void AddDepartRequest::InternalSwap(AddDepartRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &username_, lhs_arena,
      &other->username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &departname_, lhs_arena,
      &other->departname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &userrole_, lhs_arena,
      &other->userrole_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AddDepartRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Depart_2eproto_getter, &descriptor_table_Depart_2eproto_once,
      file_level_metadata_Depart_2eproto[7]);
}

// ===================================================================

class AddDepartResponse::_Internal {
 public:
  static const ::DepartProto::ResultCode& result(const AddDepartResponse* msg);
};

const ::DepartProto::ResultCode&
AddDepartResponse::_Internal::result(const AddDepartResponse* msg) {
  return *msg->result_;
}
AddDepartResponse::AddDepartResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DepartProto.AddDepartResponse)
}
AddDepartResponse::AddDepartResponse(const AddDepartResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::DepartProto::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:DepartProto.AddDepartResponse)
}

inline void AddDepartResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&result_)) + sizeof(success_));
}

AddDepartResponse::~AddDepartResponse() {
  // @@protoc_insertion_point(destructor:DepartProto.AddDepartResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AddDepartResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void AddDepartResponse::ArenaDtor(void* object) {
  AddDepartResponse* _this = reinterpret_cast< AddDepartResponse* >(object);
  (void)_this;
}
void AddDepartResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddDepartResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddDepartResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DepartProto.AddDepartResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddDepartResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DepartProto.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddDepartResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DepartProto.AddDepartResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DepartProto.ResultCode result = 1;
  if (this->_internal_has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DepartProto.AddDepartResponse)
  return target;
}

size_t AddDepartResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DepartProto.AddDepartResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DepartProto.ResultCode result = 1;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddDepartResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddDepartResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddDepartResponse::GetClassData() const { return &_class_data_; }

void AddDepartResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AddDepartResponse *>(to)->MergeFrom(
      static_cast<const AddDepartResponse &>(from));
}


void AddDepartResponse::MergeFrom(const AddDepartResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DepartProto.AddDepartResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_mutable_result()->::DepartProto::ResultCode::MergeFrom(from._internal_result());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddDepartResponse::CopyFrom(const AddDepartResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DepartProto.AddDepartResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddDepartResponse::IsInitialized() const {
  return true;
}

void AddDepartResponse::InternalSwap(AddDepartResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddDepartResponse, success_)
      + sizeof(AddDepartResponse::success_)
      - PROTOBUF_FIELD_OFFSET(AddDepartResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddDepartResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Depart_2eproto_getter, &descriptor_table_Depart_2eproto_once,
      file_level_metadata_Depart_2eproto[8]);
}

// ===================================================================

class QuitDepartRequest::_Internal {
 public:
};

QuitDepartRequest::QuitDepartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DepartProto.QuitDepartRequest)
}
QuitDepartRequest::QuitDepartRequest(const QuitDepartRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  departname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    departname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_departname().empty()) {
    departname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_departname(), 
      GetArenaForAllocation());
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:DepartProto.QuitDepartRequest)
}

inline void QuitDepartRequest::SharedCtor() {
departname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  departname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QuitDepartRequest::~QuitDepartRequest() {
  // @@protoc_insertion_point(destructor:DepartProto.QuitDepartRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void QuitDepartRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  departname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QuitDepartRequest::ArenaDtor(void* object) {
  QuitDepartRequest* _this = reinterpret_cast< QuitDepartRequest* >(object);
  (void)_this;
}
void QuitDepartRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QuitDepartRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QuitDepartRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DepartProto.QuitDepartRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  departname_.ClearToEmpty();
  username_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuitDepartRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes departName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_departname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes userName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QuitDepartRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DepartProto.QuitDepartRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes departName = 1;
  if (!this->_internal_departname().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_departname(), target);
  }

  // bytes userName = 2;
  if (!this->_internal_username().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DepartProto.QuitDepartRequest)
  return target;
}

size_t QuitDepartRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DepartProto.QuitDepartRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes departName = 1;
  if (!this->_internal_departname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_departname());
  }

  // bytes userName = 2;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_username());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuitDepartRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QuitDepartRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuitDepartRequest::GetClassData() const { return &_class_data_; }

void QuitDepartRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QuitDepartRequest *>(to)->MergeFrom(
      static_cast<const QuitDepartRequest &>(from));
}


void QuitDepartRequest::MergeFrom(const QuitDepartRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DepartProto.QuitDepartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_departname().empty()) {
    _internal_set_departname(from._internal_departname());
  }
  if (!from._internal_username().empty()) {
    _internal_set_username(from._internal_username());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuitDepartRequest::CopyFrom(const QuitDepartRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DepartProto.QuitDepartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuitDepartRequest::IsInitialized() const {
  return true;
}

void QuitDepartRequest::InternalSwap(QuitDepartRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &departname_, lhs_arena,
      &other->departname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &username_, lhs_arena,
      &other->username_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata QuitDepartRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Depart_2eproto_getter, &descriptor_table_Depart_2eproto_once,
      file_level_metadata_Depart_2eproto[9]);
}

// ===================================================================

class QuitDepartResponse::_Internal {
 public:
  static const ::DepartProto::ResultCode& result(const QuitDepartResponse* msg);
};

const ::DepartProto::ResultCode&
QuitDepartResponse::_Internal::result(const QuitDepartResponse* msg) {
  return *msg->result_;
}
QuitDepartResponse::QuitDepartResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DepartProto.QuitDepartResponse)
}
QuitDepartResponse::QuitDepartResponse(const QuitDepartResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::DepartProto::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:DepartProto.QuitDepartResponse)
}

inline void QuitDepartResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&result_)) + sizeof(success_));
}

QuitDepartResponse::~QuitDepartResponse() {
  // @@protoc_insertion_point(destructor:DepartProto.QuitDepartResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void QuitDepartResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void QuitDepartResponse::ArenaDtor(void* object) {
  QuitDepartResponse* _this = reinterpret_cast< QuitDepartResponse* >(object);
  (void)_this;
}
void QuitDepartResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QuitDepartResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QuitDepartResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DepartProto.QuitDepartResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuitDepartResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DepartProto.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QuitDepartResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DepartProto.QuitDepartResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DepartProto.ResultCode result = 1;
  if (this->_internal_has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DepartProto.QuitDepartResponse)
  return target;
}

size_t QuitDepartResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DepartProto.QuitDepartResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DepartProto.ResultCode result = 1;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuitDepartResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QuitDepartResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuitDepartResponse::GetClassData() const { return &_class_data_; }

void QuitDepartResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QuitDepartResponse *>(to)->MergeFrom(
      static_cast<const QuitDepartResponse &>(from));
}


void QuitDepartResponse::MergeFrom(const QuitDepartResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DepartProto.QuitDepartResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_mutable_result()->::DepartProto::ResultCode::MergeFrom(from._internal_result());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuitDepartResponse::CopyFrom(const QuitDepartResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DepartProto.QuitDepartResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuitDepartResponse::IsInitialized() const {
  return true;
}

void QuitDepartResponse::InternalSwap(QuitDepartResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QuitDepartResponse, success_)
      + sizeof(QuitDepartResponse::success_)
      - PROTOBUF_FIELD_OFFSET(QuitDepartResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QuitDepartResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Depart_2eproto_getter, &descriptor_table_Depart_2eproto_once,
      file_level_metadata_Depart_2eproto[10]);
}

// ===================================================================

class QueryDepartRequest::_Internal {
 public:
};

QueryDepartRequest::QueryDepartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DepartProto.QueryDepartRequest)
}
QueryDepartRequest::QueryDepartRequest(const QueryDepartRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:DepartProto.QueryDepartRequest)
}

inline void QueryDepartRequest::SharedCtor() {
username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryDepartRequest::~QueryDepartRequest() {
  // @@protoc_insertion_point(destructor:DepartProto.QueryDepartRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void QueryDepartRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QueryDepartRequest::ArenaDtor(void* object) {
  QueryDepartRequest* _this = reinterpret_cast< QueryDepartRequest* >(object);
  (void)_this;
}
void QueryDepartRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryDepartRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QueryDepartRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DepartProto.QueryDepartRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryDepartRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes userName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueryDepartRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DepartProto.QueryDepartRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes userName = 1;
  if (!this->_internal_username().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DepartProto.QueryDepartRequest)
  return target;
}

size_t QueryDepartRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DepartProto.QueryDepartRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes userName = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_username());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryDepartRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QueryDepartRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryDepartRequest::GetClassData() const { return &_class_data_; }

void QueryDepartRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QueryDepartRequest *>(to)->MergeFrom(
      static_cast<const QueryDepartRequest &>(from));
}


void QueryDepartRequest::MergeFrom(const QueryDepartRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DepartProto.QueryDepartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _internal_set_username(from._internal_username());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryDepartRequest::CopyFrom(const QueryDepartRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DepartProto.QueryDepartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDepartRequest::IsInitialized() const {
  return true;
}

void QueryDepartRequest::InternalSwap(QueryDepartRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &username_, lhs_arena,
      &other->username_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryDepartRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Depart_2eproto_getter, &descriptor_table_Depart_2eproto_once,
      file_level_metadata_Depart_2eproto[11]);
}

// ===================================================================

class QueryDepartResponse::_Internal {
 public:
  static const ::DepartProto::ResultCode& result(const QueryDepartResponse* msg);
  static const ::DepartProto::DepartInfo& departs(const QueryDepartResponse* msg);
};

const ::DepartProto::ResultCode&
QueryDepartResponse::_Internal::result(const QueryDepartResponse* msg) {
  return *msg->result_;
}
const ::DepartProto::DepartInfo&
QueryDepartResponse::_Internal::departs(const QueryDepartResponse* msg) {
  return *msg->departs_;
}
QueryDepartResponse::QueryDepartResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DepartProto.QueryDepartResponse)
}
QueryDepartResponse::QueryDepartResponse(const QueryDepartResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::DepartProto::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  if (from._internal_has_departs()) {
    departs_ = new ::DepartProto::DepartInfo(*from.departs_);
  } else {
    departs_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:DepartProto.QueryDepartResponse)
}

inline void QueryDepartResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&result_)) + sizeof(success_));
}

QueryDepartResponse::~QueryDepartResponse() {
  // @@protoc_insertion_point(destructor:DepartProto.QueryDepartResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void QueryDepartResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_;
  if (this != internal_default_instance()) delete departs_;
}

void QueryDepartResponse::ArenaDtor(void* object) {
  QueryDepartResponse* _this = reinterpret_cast< QueryDepartResponse* >(object);
  (void)_this;
}
void QueryDepartResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryDepartResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QueryDepartResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DepartProto.QueryDepartResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  if (GetArenaForAllocation() == nullptr && departs_ != nullptr) {
    delete departs_;
  }
  departs_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryDepartResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DepartProto.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DepartProto.DepartInfo departs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_departs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueryDepartResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DepartProto.QueryDepartResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DepartProto.ResultCode result = 1;
  if (this->_internal_has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // .DepartProto.DepartInfo departs = 3;
  if (this->_internal_has_departs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::departs(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DepartProto.QueryDepartResponse)
  return target;
}

size_t QueryDepartResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DepartProto.QueryDepartResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DepartProto.ResultCode result = 1;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // .DepartProto.DepartInfo departs = 3;
  if (this->_internal_has_departs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *departs_);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryDepartResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QueryDepartResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryDepartResponse::GetClassData() const { return &_class_data_; }

void QueryDepartResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QueryDepartResponse *>(to)->MergeFrom(
      static_cast<const QueryDepartResponse &>(from));
}


void QueryDepartResponse::MergeFrom(const QueryDepartResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DepartProto.QueryDepartResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_mutable_result()->::DepartProto::ResultCode::MergeFrom(from._internal_result());
  }
  if (from._internal_has_departs()) {
    _internal_mutable_departs()->::DepartProto::DepartInfo::MergeFrom(from._internal_departs());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryDepartResponse::CopyFrom(const QueryDepartResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DepartProto.QueryDepartResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDepartResponse::IsInitialized() const {
  return true;
}

void QueryDepartResponse::InternalSwap(QueryDepartResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryDepartResponse, success_)
      + sizeof(QueryDepartResponse::success_)
      - PROTOBUF_FIELD_OFFSET(QueryDepartResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryDepartResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Depart_2eproto_getter, &descriptor_table_Depart_2eproto_once,
      file_level_metadata_Depart_2eproto[12]);
}

// ===================================================================

class QueryDepartUsersRequest::_Internal {
 public:
};

QueryDepartUsersRequest::QueryDepartUsersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DepartProto.QueryDepartUsersRequest)
}
QueryDepartUsersRequest::QueryDepartUsersRequest(const QueryDepartUsersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArenaForAllocation());
  }
  departname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    departname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_departname().empty()) {
    departname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_departname(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:DepartProto.QueryDepartUsersRequest)
}

inline void QueryDepartUsersRequest::SharedCtor() {
username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
departname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  departname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryDepartUsersRequest::~QueryDepartUsersRequest() {
  // @@protoc_insertion_point(destructor:DepartProto.QueryDepartUsersRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void QueryDepartUsersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  departname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QueryDepartUsersRequest::ArenaDtor(void* object) {
  QueryDepartUsersRequest* _this = reinterpret_cast< QueryDepartUsersRequest* >(object);
  (void)_this;
}
void QueryDepartUsersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryDepartUsersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QueryDepartUsersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DepartProto.QueryDepartUsersRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty();
  departname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryDepartUsersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes userName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes departName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_departname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueryDepartUsersRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DepartProto.QueryDepartUsersRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes userName = 1;
  if (!this->_internal_username().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_username(), target);
  }

  // bytes departName = 2;
  if (!this->_internal_departname().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_departname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DepartProto.QueryDepartUsersRequest)
  return target;
}

size_t QueryDepartUsersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DepartProto.QueryDepartUsersRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes userName = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_username());
  }

  // bytes departName = 2;
  if (!this->_internal_departname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_departname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryDepartUsersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QueryDepartUsersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryDepartUsersRequest::GetClassData() const { return &_class_data_; }

void QueryDepartUsersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QueryDepartUsersRequest *>(to)->MergeFrom(
      static_cast<const QueryDepartUsersRequest &>(from));
}


void QueryDepartUsersRequest::MergeFrom(const QueryDepartUsersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DepartProto.QueryDepartUsersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _internal_set_username(from._internal_username());
  }
  if (!from._internal_departname().empty()) {
    _internal_set_departname(from._internal_departname());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryDepartUsersRequest::CopyFrom(const QueryDepartUsersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DepartProto.QueryDepartUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDepartUsersRequest::IsInitialized() const {
  return true;
}

void QueryDepartUsersRequest::InternalSwap(QueryDepartUsersRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &username_, lhs_arena,
      &other->username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &departname_, lhs_arena,
      &other->departname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryDepartUsersRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Depart_2eproto_getter, &descriptor_table_Depart_2eproto_once,
      file_level_metadata_Depart_2eproto[13]);
}

// ===================================================================

class QueryDepartUsersResponse::_Internal {
 public:
  static const ::DepartProto::ResultCode& result(const QueryDepartUsersResponse* msg);
};

const ::DepartProto::ResultCode&
QueryDepartUsersResponse::_Internal::result(const QueryDepartUsersResponse* msg) {
  return *msg->result_;
}
QueryDepartUsersResponse::QueryDepartUsersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  departusername_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DepartProto.QueryDepartUsersResponse)
}
QueryDepartUsersResponse::QueryDepartUsersResponse(const QueryDepartUsersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      departusername_(from.departusername_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::DepartProto::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:DepartProto.QueryDepartUsersResponse)
}

inline void QueryDepartUsersResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&result_)) + sizeof(success_));
}

QueryDepartUsersResponse::~QueryDepartUsersResponse() {
  // @@protoc_insertion_point(destructor:DepartProto.QueryDepartUsersResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void QueryDepartUsersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void QueryDepartUsersResponse::ArenaDtor(void* object) {
  QueryDepartUsersResponse* _this = reinterpret_cast< QueryDepartUsersResponse* >(object);
  (void)_this;
}
void QueryDepartUsersResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryDepartUsersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QueryDepartUsersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DepartProto.QueryDepartUsersResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  departusername_.Clear();
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryDepartUsersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DepartProto.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes departUserName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_departusername();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueryDepartUsersResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DepartProto.QueryDepartUsersResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DepartProto.ResultCode result = 1;
  if (this->_internal_has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // repeated bytes departUserName = 3;
  for (int i = 0, n = this->_internal_departusername_size(); i < n; i++) {
    const auto& s = this->_internal_departusername(i);
    target = stream->WriteBytes(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DepartProto.QueryDepartUsersResponse)
  return target;
}

size_t QueryDepartUsersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DepartProto.QueryDepartUsersResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes departUserName = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(departusername_.size());
  for (int i = 0, n = departusername_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      departusername_.Get(i));
  }

  // .DepartProto.ResultCode result = 1;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryDepartUsersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QueryDepartUsersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryDepartUsersResponse::GetClassData() const { return &_class_data_; }

void QueryDepartUsersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QueryDepartUsersResponse *>(to)->MergeFrom(
      static_cast<const QueryDepartUsersResponse &>(from));
}


void QueryDepartUsersResponse::MergeFrom(const QueryDepartUsersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DepartProto.QueryDepartUsersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  departusername_.MergeFrom(from.departusername_);
  if (from._internal_has_result()) {
    _internal_mutable_result()->::DepartProto::ResultCode::MergeFrom(from._internal_result());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryDepartUsersResponse::CopyFrom(const QueryDepartUsersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DepartProto.QueryDepartUsersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDepartUsersResponse::IsInitialized() const {
  return true;
}

void QueryDepartUsersResponse::InternalSwap(QueryDepartUsersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  departusername_.InternalSwap(&other->departusername_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryDepartUsersResponse, success_)
      + sizeof(QueryDepartUsersResponse::success_)
      - PROTOBUF_FIELD_OFFSET(QueryDepartUsersResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryDepartUsersResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Depart_2eproto_getter, &descriptor_table_Depart_2eproto_once,
      file_level_metadata_Depart_2eproto[14]);
}

// ===================================================================

DepartServiceRpc::~DepartServiceRpc() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* DepartServiceRpc::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Depart_2eproto);
  return file_level_service_descriptors_Depart_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* DepartServiceRpc::GetDescriptor() {
  return descriptor();
}

void DepartServiceRpc::CreateDepart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::DepartProto::CreateDepartRequest*,
                         ::DepartProto::CreateDepartResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CreateDepart() not implemented.");
  done->Run();
}

void DepartServiceRpc::DelDepart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::DepartProto::DelDepartRequest*,
                         ::DepartProto::DelDepartResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DelDepart() not implemented.");
  done->Run();
}

void DepartServiceRpc::AddDepart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::DepartProto::AddDepartRequest*,
                         ::DepartProto::AddDepartResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddDepart() not implemented.");
  done->Run();
}

void DepartServiceRpc::QuitDepart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::DepartProto::QuitDepartRequest*,
                         ::DepartProto::QuitDepartResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QuitDepart() not implemented.");
  done->Run();
}

void DepartServiceRpc::QueryDepart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::DepartProto::QueryDepartRequest*,
                         ::DepartProto::QueryDepartResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QueryDepart() not implemented.");
  done->Run();
}

void DepartServiceRpc::QueryDepartUsers(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::DepartProto::QueryDepartUsersRequest*,
                         ::DepartProto::QueryDepartUsersResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QueryDepartUsers() not implemented.");
  done->Run();
}

void DepartServiceRpc::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_Depart_2eproto[0]);
  switch(method->index()) {
    case 0:
      CreateDepart(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::DepartProto::CreateDepartRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::DepartProto::CreateDepartResponse*>(
                 response),
             done);
      break;
    case 1:
      DelDepart(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::DepartProto::DelDepartRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::DepartProto::DelDepartResponse*>(
                 response),
             done);
      break;
    case 2:
      AddDepart(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::DepartProto::AddDepartRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::DepartProto::AddDepartResponse*>(
                 response),
             done);
      break;
    case 3:
      QuitDepart(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::DepartProto::QuitDepartRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::DepartProto::QuitDepartResponse*>(
                 response),
             done);
      break;
    case 4:
      QueryDepart(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::DepartProto::QueryDepartRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::DepartProto::QueryDepartResponse*>(
                 response),
             done);
      break;
    case 5:
      QueryDepartUsers(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::DepartProto::QueryDepartUsersRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::DepartProto::QueryDepartUsersResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& DepartServiceRpc::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::DepartProto::CreateDepartRequest::default_instance();
    case 1:
      return ::DepartProto::DelDepartRequest::default_instance();
    case 2:
      return ::DepartProto::AddDepartRequest::default_instance();
    case 3:
      return ::DepartProto::QuitDepartRequest::default_instance();
    case 4:
      return ::DepartProto::QueryDepartRequest::default_instance();
    case 5:
      return ::DepartProto::QueryDepartUsersRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& DepartServiceRpc::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::DepartProto::CreateDepartResponse::default_instance();
    case 1:
      return ::DepartProto::DelDepartResponse::default_instance();
    case 2:
      return ::DepartProto::AddDepartResponse::default_instance();
    case 3:
      return ::DepartProto::QuitDepartResponse::default_instance();
    case 4:
      return ::DepartProto::QueryDepartResponse::default_instance();
    case 5:
      return ::DepartProto::QueryDepartUsersResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

DepartServiceRpc_Stub::DepartServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
DepartServiceRpc_Stub::DepartServiceRpc_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
DepartServiceRpc_Stub::~DepartServiceRpc_Stub() {
  if (owns_channel_) delete channel_;
}

void DepartServiceRpc_Stub::CreateDepart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::DepartProto::CreateDepartRequest* request,
                              ::DepartProto::CreateDepartResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void DepartServiceRpc_Stub::DelDepart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::DepartProto::DelDepartRequest* request,
                              ::DepartProto::DelDepartResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void DepartServiceRpc_Stub::AddDepart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::DepartProto::AddDepartRequest* request,
                              ::DepartProto::AddDepartResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void DepartServiceRpc_Stub::QuitDepart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::DepartProto::QuitDepartRequest* request,
                              ::DepartProto::QuitDepartResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void DepartServiceRpc_Stub::QueryDepart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::DepartProto::QueryDepartRequest* request,
                              ::DepartProto::QueryDepartResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void DepartServiceRpc_Stub::QueryDepartUsers(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::DepartProto::QueryDepartUsersRequest* request,
                              ::DepartProto::QueryDepartUsersResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace DepartProto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DepartProto::DepartUser* Arena::CreateMaybeMessage< ::DepartProto::DepartUser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DepartProto::DepartUser >(arena);
}
template<> PROTOBUF_NOINLINE ::DepartProto::DepartInfo* Arena::CreateMaybeMessage< ::DepartProto::DepartInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DepartProto::DepartInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::DepartProto::ResultCode* Arena::CreateMaybeMessage< ::DepartProto::ResultCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DepartProto::ResultCode >(arena);
}
template<> PROTOBUF_NOINLINE ::DepartProto::CreateDepartRequest* Arena::CreateMaybeMessage< ::DepartProto::CreateDepartRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DepartProto::CreateDepartRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DepartProto::CreateDepartResponse* Arena::CreateMaybeMessage< ::DepartProto::CreateDepartResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DepartProto::CreateDepartResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::DepartProto::DelDepartRequest* Arena::CreateMaybeMessage< ::DepartProto::DelDepartRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DepartProto::DelDepartRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DepartProto::DelDepartResponse* Arena::CreateMaybeMessage< ::DepartProto::DelDepartResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DepartProto::DelDepartResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::DepartProto::AddDepartRequest* Arena::CreateMaybeMessage< ::DepartProto::AddDepartRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DepartProto::AddDepartRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DepartProto::AddDepartResponse* Arena::CreateMaybeMessage< ::DepartProto::AddDepartResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DepartProto::AddDepartResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::DepartProto::QuitDepartRequest* Arena::CreateMaybeMessage< ::DepartProto::QuitDepartRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DepartProto::QuitDepartRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DepartProto::QuitDepartResponse* Arena::CreateMaybeMessage< ::DepartProto::QuitDepartResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DepartProto::QuitDepartResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::DepartProto::QueryDepartRequest* Arena::CreateMaybeMessage< ::DepartProto::QueryDepartRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DepartProto::QueryDepartRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DepartProto::QueryDepartResponse* Arena::CreateMaybeMessage< ::DepartProto::QueryDepartResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DepartProto::QueryDepartResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::DepartProto::QueryDepartUsersRequest* Arena::CreateMaybeMessage< ::DepartProto::QueryDepartUsersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DepartProto::QueryDepartUsersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DepartProto::QueryDepartUsersResponse* Arena::CreateMaybeMessage< ::DepartProto::QueryDepartUsersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DepartProto::QueryDepartUsersResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
