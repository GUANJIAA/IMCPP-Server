// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Depart.proto

#include "Depart.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Depart_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DepartInfo_Depart_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Depart_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DepartUser_Depart_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Depart_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResultCode_Depart_2eproto;
namespace DepartProto {
class DepartUserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DepartUser> _instance;
} _DepartUser_default_instance_;
class DepartInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DepartInfo> _instance;
} _DepartInfo_default_instance_;
class ResultCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResultCode> _instance;
} _ResultCode_default_instance_;
class CreateDepartRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateDepartRequest> _instance;
} _CreateDepartRequest_default_instance_;
class CreateDepartResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateDepartResponse> _instance;
} _CreateDepartResponse_default_instance_;
class DelDepartRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DelDepartRequest> _instance;
} _DelDepartRequest_default_instance_;
class DelDepartResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DelDepartResponse> _instance;
} _DelDepartResponse_default_instance_;
class AddDepartRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddDepartRequest> _instance;
} _AddDepartRequest_default_instance_;
class AddDepartResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddDepartResponse> _instance;
} _AddDepartResponse_default_instance_;
class QuitDepartRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QuitDepartRequest> _instance;
} _QuitDepartRequest_default_instance_;
class QuitDepartResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QuitDepartResponse> _instance;
} _QuitDepartResponse_default_instance_;
class QueryDepartRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryDepartRequest> _instance;
} _QueryDepartRequest_default_instance_;
class QueryDepartResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryDepartResponse> _instance;
} _QueryDepartResponse_default_instance_;
class QueryDepartUsersRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryDepartUsersRequest> _instance;
} _QueryDepartUsersRequest_default_instance_;
class QueryDepartUsersResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryDepartUsersResponse> _instance;
} _QueryDepartUsersResponse_default_instance_;
}  // namespace DepartProto
static void InitDefaultsscc_info_AddDepartRequest_Depart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DepartProto::_AddDepartRequest_default_instance_;
    new (ptr) ::DepartProto::AddDepartRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DepartProto::AddDepartRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddDepartRequest_Depart_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddDepartRequest_Depart_2eproto}, {}};

static void InitDefaultsscc_info_AddDepartResponse_Depart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DepartProto::_AddDepartResponse_default_instance_;
    new (ptr) ::DepartProto::AddDepartResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DepartProto::AddDepartResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddDepartResponse_Depart_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddDepartResponse_Depart_2eproto}, {
      &scc_info_ResultCode_Depart_2eproto.base,}};

static void InitDefaultsscc_info_CreateDepartRequest_Depart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DepartProto::_CreateDepartRequest_default_instance_;
    new (ptr) ::DepartProto::CreateDepartRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DepartProto::CreateDepartRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateDepartRequest_Depart_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateDepartRequest_Depart_2eproto}, {
      &scc_info_DepartInfo_Depart_2eproto.base,}};

static void InitDefaultsscc_info_CreateDepartResponse_Depart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DepartProto::_CreateDepartResponse_default_instance_;
    new (ptr) ::DepartProto::CreateDepartResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DepartProto::CreateDepartResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateDepartResponse_Depart_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateDepartResponse_Depart_2eproto}, {
      &scc_info_ResultCode_Depart_2eproto.base,}};

static void InitDefaultsscc_info_DelDepartRequest_Depart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DepartProto::_DelDepartRequest_default_instance_;
    new (ptr) ::DepartProto::DelDepartRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DepartProto::DelDepartRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DelDepartRequest_Depart_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DelDepartRequest_Depart_2eproto}, {}};

static void InitDefaultsscc_info_DelDepartResponse_Depart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DepartProto::_DelDepartResponse_default_instance_;
    new (ptr) ::DepartProto::DelDepartResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DepartProto::DelDepartResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DelDepartResponse_Depart_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DelDepartResponse_Depart_2eproto}, {
      &scc_info_ResultCode_Depart_2eproto.base,}};

static void InitDefaultsscc_info_DepartInfo_Depart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DepartProto::_DepartInfo_default_instance_;
    new (ptr) ::DepartProto::DepartInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DepartProto::DepartInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DepartInfo_Depart_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DepartInfo_Depart_2eproto}, {
      &scc_info_DepartUser_Depart_2eproto.base,}};

static void InitDefaultsscc_info_DepartUser_Depart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DepartProto::_DepartUser_default_instance_;
    new (ptr) ::DepartProto::DepartUser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DepartProto::DepartUser::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DepartUser_Depart_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DepartUser_Depart_2eproto}, {}};

static void InitDefaultsscc_info_QueryDepartRequest_Depart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DepartProto::_QueryDepartRequest_default_instance_;
    new (ptr) ::DepartProto::QueryDepartRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DepartProto::QueryDepartRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryDepartRequest_Depart_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QueryDepartRequest_Depart_2eproto}, {}};

static void InitDefaultsscc_info_QueryDepartResponse_Depart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DepartProto::_QueryDepartResponse_default_instance_;
    new (ptr) ::DepartProto::QueryDepartResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DepartProto::QueryDepartResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_QueryDepartResponse_Depart_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_QueryDepartResponse_Depart_2eproto}, {
      &scc_info_ResultCode_Depart_2eproto.base,
      &scc_info_DepartInfo_Depart_2eproto.base,}};

static void InitDefaultsscc_info_QueryDepartUsersRequest_Depart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DepartProto::_QueryDepartUsersRequest_default_instance_;
    new (ptr) ::DepartProto::QueryDepartUsersRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DepartProto::QueryDepartUsersRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryDepartUsersRequest_Depart_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QueryDepartUsersRequest_Depart_2eproto}, {}};

static void InitDefaultsscc_info_QueryDepartUsersResponse_Depart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DepartProto::_QueryDepartUsersResponse_default_instance_;
    new (ptr) ::DepartProto::QueryDepartUsersResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DepartProto::QueryDepartUsersResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QueryDepartUsersResponse_Depart_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_QueryDepartUsersResponse_Depart_2eproto}, {
      &scc_info_ResultCode_Depart_2eproto.base,}};

static void InitDefaultsscc_info_QuitDepartRequest_Depart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DepartProto::_QuitDepartRequest_default_instance_;
    new (ptr) ::DepartProto::QuitDepartRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DepartProto::QuitDepartRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QuitDepartRequest_Depart_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QuitDepartRequest_Depart_2eproto}, {}};

static void InitDefaultsscc_info_QuitDepartResponse_Depart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DepartProto::_QuitDepartResponse_default_instance_;
    new (ptr) ::DepartProto::QuitDepartResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DepartProto::QuitDepartResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QuitDepartResponse_Depart_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_QuitDepartResponse_Depart_2eproto}, {
      &scc_info_ResultCode_Depart_2eproto.base,}};

static void InitDefaultsscc_info_ResultCode_Depart_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DepartProto::_ResultCode_default_instance_;
    new (ptr) ::DepartProto::ResultCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DepartProto::ResultCode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResultCode_Depart_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResultCode_Depart_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Depart_2eproto[15];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Depart_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_Depart_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Depart_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DepartProto::DepartUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DepartProto::DepartUser, username_),
  PROTOBUF_FIELD_OFFSET(::DepartProto::DepartUser, useremail_),
  PROTOBUF_FIELD_OFFSET(::DepartProto::DepartUser, userphone_),
  PROTOBUF_FIELD_OFFSET(::DepartProto::DepartUser, userrole_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DepartProto::DepartInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DepartProto::DepartInfo, departid_),
  PROTOBUF_FIELD_OFFSET(::DepartProto::DepartInfo, departname_),
  PROTOBUF_FIELD_OFFSET(::DepartProto::DepartInfo, departdesc_),
  PROTOBUF_FIELD_OFFSET(::DepartProto::DepartInfo, departusers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DepartProto::ResultCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DepartProto::ResultCode, errcode_),
  PROTOBUF_FIELD_OFFSET(::DepartProto::ResultCode, errmsg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DepartProto::CreateDepartRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DepartProto::CreateDepartRequest, depart_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DepartProto::CreateDepartResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DepartProto::CreateDepartResponse, result_),
  PROTOBUF_FIELD_OFFSET(::DepartProto::CreateDepartResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DepartProto::DelDepartRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DepartProto::DelDepartRequest, departname_),
  PROTOBUF_FIELD_OFFSET(::DepartProto::DelDepartRequest, username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DepartProto::DelDepartResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DepartProto::DelDepartResponse, result_),
  PROTOBUF_FIELD_OFFSET(::DepartProto::DelDepartResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DepartProto::AddDepartRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DepartProto::AddDepartRequest, username_),
  PROTOBUF_FIELD_OFFSET(::DepartProto::AddDepartRequest, departname_),
  PROTOBUF_FIELD_OFFSET(::DepartProto::AddDepartRequest, userrole_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DepartProto::AddDepartResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DepartProto::AddDepartResponse, result_),
  PROTOBUF_FIELD_OFFSET(::DepartProto::AddDepartResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DepartProto::QuitDepartRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DepartProto::QuitDepartRequest, departname_),
  PROTOBUF_FIELD_OFFSET(::DepartProto::QuitDepartRequest, username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DepartProto::QuitDepartResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DepartProto::QuitDepartResponse, result_),
  PROTOBUF_FIELD_OFFSET(::DepartProto::QuitDepartResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DepartProto::QueryDepartRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DepartProto::QueryDepartRequest, username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DepartProto::QueryDepartResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DepartProto::QueryDepartResponse, result_),
  PROTOBUF_FIELD_OFFSET(::DepartProto::QueryDepartResponse, success_),
  PROTOBUF_FIELD_OFFSET(::DepartProto::QueryDepartResponse, departs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DepartProto::QueryDepartUsersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DepartProto::QueryDepartUsersRequest, username_),
  PROTOBUF_FIELD_OFFSET(::DepartProto::QueryDepartUsersRequest, departname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DepartProto::QueryDepartUsersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DepartProto::QueryDepartUsersResponse, result_),
  PROTOBUF_FIELD_OFFSET(::DepartProto::QueryDepartUsersResponse, success_),
  PROTOBUF_FIELD_OFFSET(::DepartProto::QueryDepartUsersResponse, departusername_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::DepartProto::DepartUser)},
  { 9, -1, sizeof(::DepartProto::DepartInfo)},
  { 18, -1, sizeof(::DepartProto::ResultCode)},
  { 25, -1, sizeof(::DepartProto::CreateDepartRequest)},
  { 31, -1, sizeof(::DepartProto::CreateDepartResponse)},
  { 38, -1, sizeof(::DepartProto::DelDepartRequest)},
  { 45, -1, sizeof(::DepartProto::DelDepartResponse)},
  { 52, -1, sizeof(::DepartProto::AddDepartRequest)},
  { 60, -1, sizeof(::DepartProto::AddDepartResponse)},
  { 67, -1, sizeof(::DepartProto::QuitDepartRequest)},
  { 74, -1, sizeof(::DepartProto::QuitDepartResponse)},
  { 81, -1, sizeof(::DepartProto::QueryDepartRequest)},
  { 87, -1, sizeof(::DepartProto::QueryDepartResponse)},
  { 95, -1, sizeof(::DepartProto::QueryDepartUsersRequest)},
  { 102, -1, sizeof(::DepartProto::QueryDepartUsersResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DepartProto::_DepartUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DepartProto::_DepartInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DepartProto::_ResultCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DepartProto::_CreateDepartRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DepartProto::_CreateDepartResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DepartProto::_DelDepartRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DepartProto::_DelDepartResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DepartProto::_AddDepartRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DepartProto::_AddDepartResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DepartProto::_QuitDepartRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DepartProto::_QuitDepartResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DepartProto::_QueryDepartRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DepartProto::_QueryDepartResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DepartProto::_QueryDepartUsersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DepartProto::_QueryDepartUsersResponse_default_instance_),
};

const char descriptor_table_protodef_Depart_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Depart.proto\022\013DepartProto\"V\n\nDepartUse"
  "r\022\020\n\010userName\030\001 \001(\014\022\021\n\tuserEmail\030\002 \001(\014\022\021"
  "\n\tuserPhone\030\003 \001(\014\022\020\n\010userRole\030\004 \001(\014\"t\n\nD"
  "epartInfo\022\020\n\010departId\030\001 \001(\005\022\022\n\ndepartNam"
  "e\030\002 \001(\014\022\022\n\ndepartDesc\030\003 \001(\014\022,\n\013departUse"
  "rs\030\004 \003(\0132\027.DepartProto.DepartUser\"-\n\nRes"
  "ultCode\022\017\n\007errcode\030\001 \001(\005\022\016\n\006errmsg\030\002 \001(\014"
  "\">\n\023CreateDepartRequest\022\'\n\006depart\030\001 \001(\0132"
  "\027.DepartProto.DepartInfo\"P\n\024CreateDepart"
  "Response\022\'\n\006result\030\001 \001(\0132\027.DepartProto.R"
  "esultCode\022\017\n\007success\030\002 \001(\010\"8\n\020DelDepartR"
  "equest\022\022\n\ndepartName\030\001 \001(\014\022\020\n\010userName\030\002"
  " \001(\014\"M\n\021DelDepartResponse\022\'\n\006result\030\001 \001("
  "\0132\027.DepartProto.ResultCode\022\017\n\007success\030\002 "
  "\001(\010\"J\n\020AddDepartRequest\022\020\n\010userName\030\001 \001("
  "\014\022\022\n\ndepartName\030\002 \001(\014\022\020\n\010userRole\030\003 \001(\014\""
  "M\n\021AddDepartResponse\022\'\n\006result\030\001 \001(\0132\027.D"
  "epartProto.ResultCode\022\017\n\007success\030\002 \001(\010\"9"
  "\n\021QuitDepartRequest\022\022\n\ndepartName\030\001 \001(\014\022"
  "\020\n\010userName\030\002 \001(\014\"N\n\022QuitDepartResponse\022"
  "\'\n\006result\030\001 \001(\0132\027.DepartProto.ResultCode"
  "\022\017\n\007success\030\002 \001(\010\"&\n\022QueryDepartRequest\022"
  "\020\n\010userName\030\001 \001(\014\"y\n\023QueryDepartResponse"
  "\022\'\n\006result\030\001 \001(\0132\027.DepartProto.ResultCod"
  "e\022\017\n\007success\030\002 \001(\010\022(\n\007departs\030\003 \001(\0132\027.De"
  "partProto.DepartInfo\"\?\n\027QueryDepartUsers"
  "Request\022\020\n\010userName\030\001 \001(\014\022\022\n\ndepartName\030"
  "\002 \001(\014\"l\n\030QueryDepartUsersResponse\022\'\n\006res"
  "ult\030\001 \001(\0132\027.DepartProto.ResultCode\022\017\n\007su"
  "ccess\030\002 \001(\010\022\026\n\016departUserName\030\003 \003(\0142\201\004\n\020"
  "DepartServiceRpc\022S\n\014CreateDepart\022 .Depar"
  "tProto.CreateDepartRequest\032!.DepartProto"
  ".CreateDepartResponse\022J\n\tDelDepart\022\035.Dep"
  "artProto.DelDepartRequest\032\036.DepartProto."
  "DelDepartResponse\022J\n\tAddDepart\022\035.DepartP"
  "roto.AddDepartRequest\032\036.DepartProto.AddD"
  "epartResponse\022M\n\nQuitDepart\022\036.DepartProt"
  "o.QuitDepartRequest\032\037.DepartProto.QuitDe"
  "partResponse\022P\n\013QueryDepart\022\037.DepartProt"
  "o.QueryDepartRequest\032 .DepartProto.Query"
  "DepartResponse\022_\n\020QueryDepartUsers\022$.Dep"
  "artProto.QueryDepartUsersRequest\032%.Depar"
  "tProto.QueryDepartUsersResponseB\003\200\001\001b\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Depart_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Depart_2eproto_sccs[15] = {
  &scc_info_AddDepartRequest_Depart_2eproto.base,
  &scc_info_AddDepartResponse_Depart_2eproto.base,
  &scc_info_CreateDepartRequest_Depart_2eproto.base,
  &scc_info_CreateDepartResponse_Depart_2eproto.base,
  &scc_info_DelDepartRequest_Depart_2eproto.base,
  &scc_info_DelDepartResponse_Depart_2eproto.base,
  &scc_info_DepartInfo_Depart_2eproto.base,
  &scc_info_DepartUser_Depart_2eproto.base,
  &scc_info_QueryDepartRequest_Depart_2eproto.base,
  &scc_info_QueryDepartResponse_Depart_2eproto.base,
  &scc_info_QueryDepartUsersRequest_Depart_2eproto.base,
  &scc_info_QueryDepartUsersResponse_Depart_2eproto.base,
  &scc_info_QuitDepartRequest_Depart_2eproto.base,
  &scc_info_QuitDepartResponse_Depart_2eproto.base,
  &scc_info_ResultCode_Depart_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Depart_2eproto_once;
static bool descriptor_table_Depart_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Depart_2eproto = {
  &descriptor_table_Depart_2eproto_initialized, descriptor_table_protodef_Depart_2eproto, "Depart.proto", 1724,
  &descriptor_table_Depart_2eproto_once, descriptor_table_Depart_2eproto_sccs, descriptor_table_Depart_2eproto_deps, 15, 0,
  schemas, file_default_instances, TableStruct_Depart_2eproto::offsets,
  file_level_metadata_Depart_2eproto, 15, file_level_enum_descriptors_Depart_2eproto, file_level_service_descriptors_Depart_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Depart_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Depart_2eproto), true);
namespace DepartProto {

// ===================================================================

void DepartUser::InitAsDefaultInstance() {
}
class DepartUser::_Internal {
 public:
};

DepartUser::DepartUser()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DepartProto.DepartUser)
}
DepartUser::DepartUser(const DepartUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  useremail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_useremail().empty()) {
    useremail_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.useremail_);
  }
  userphone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_userphone().empty()) {
    userphone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.userphone_);
  }
  userrole_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_userrole().empty()) {
    userrole_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.userrole_);
  }
  // @@protoc_insertion_point(copy_constructor:DepartProto.DepartUser)
}

void DepartUser::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DepartUser_Depart_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  useremail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userphone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userrole_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DepartUser::~DepartUser() {
  // @@protoc_insertion_point(destructor:DepartProto.DepartUser)
  SharedDtor();
}

void DepartUser::SharedDtor() {
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  useremail_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userphone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userrole_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DepartUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DepartUser& DepartUser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DepartUser_Depart_2eproto.base);
  return *internal_default_instance();
}


void DepartUser::Clear() {
// @@protoc_insertion_point(message_clear_start:DepartProto.DepartUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  useremail_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userphone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userrole_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* DepartUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes userName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes userEmail = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_useremail();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes userPhone = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_userphone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes userRole = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_userrole();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DepartUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DepartProto.DepartUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes userName = 1;
  if (this->username().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_username(), target);
  }

  // bytes userEmail = 2;
  if (this->useremail().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_useremail(), target);
  }

  // bytes userPhone = 3;
  if (this->userphone().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_userphone(), target);
  }

  // bytes userRole = 4;
  if (this->userrole().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_userrole(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DepartProto.DepartUser)
  return target;
}

size_t DepartUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DepartProto.DepartUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes userName = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_username());
  }

  // bytes userEmail = 2;
  if (this->useremail().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_useremail());
  }

  // bytes userPhone = 3;
  if (this->userphone().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_userphone());
  }

  // bytes userRole = 4;
  if (this->userrole().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_userrole());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DepartUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DepartProto.DepartUser)
  GOOGLE_DCHECK_NE(&from, this);
  const DepartUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DepartUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DepartProto.DepartUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DepartProto.DepartUser)
    MergeFrom(*source);
  }
}

void DepartUser::MergeFrom(const DepartUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DepartProto.DepartUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.useremail().size() > 0) {

    useremail_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.useremail_);
  }
  if (from.userphone().size() > 0) {

    userphone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.userphone_);
  }
  if (from.userrole().size() > 0) {

    userrole_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.userrole_);
  }
}

void DepartUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DepartProto.DepartUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepartUser::CopyFrom(const DepartUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DepartProto.DepartUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepartUser::IsInitialized() const {
  return true;
}

void DepartUser::InternalSwap(DepartUser* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  useremail_.Swap(&other->useremail_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  userphone_.Swap(&other->userphone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  userrole_.Swap(&other->userrole_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DepartUser::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DepartInfo::InitAsDefaultInstance() {
}
class DepartInfo::_Internal {
 public:
};

DepartInfo::DepartInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DepartProto.DepartInfo)
}
DepartInfo::DepartInfo(const DepartInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      departusers_(from.departusers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  departname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_departname().empty()) {
    departname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.departname_);
  }
  departdesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_departdesc().empty()) {
    departdesc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.departdesc_);
  }
  departid_ = from.departid_;
  // @@protoc_insertion_point(copy_constructor:DepartProto.DepartInfo)
}

void DepartInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DepartInfo_Depart_2eproto.base);
  departname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  departdesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  departid_ = 0;
}

DepartInfo::~DepartInfo() {
  // @@protoc_insertion_point(destructor:DepartProto.DepartInfo)
  SharedDtor();
}

void DepartInfo::SharedDtor() {
  departname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  departdesc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DepartInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DepartInfo& DepartInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DepartInfo_Depart_2eproto.base);
  return *internal_default_instance();
}


void DepartInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:DepartProto.DepartInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  departusers_.Clear();
  departname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  departdesc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  departid_ = 0;
  _internal_metadata_.Clear();
}

const char* DepartInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 departId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          departid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes departName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_departname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes departDesc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_departdesc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .DepartProto.DepartUser departUsers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_departusers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DepartInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DepartProto.DepartInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 departId = 1;
  if (this->departid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_departid(), target);
  }

  // bytes departName = 2;
  if (this->departname().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_departname(), target);
  }

  // bytes departDesc = 3;
  if (this->departdesc().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_departdesc(), target);
  }

  // repeated .DepartProto.DepartUser departUsers = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_departusers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_departusers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DepartProto.DepartInfo)
  return target;
}

size_t DepartInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DepartProto.DepartInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DepartProto.DepartUser departUsers = 4;
  total_size += 1UL * this->_internal_departusers_size();
  for (const auto& msg : this->departusers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes departName = 2;
  if (this->departname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_departname());
  }

  // bytes departDesc = 3;
  if (this->departdesc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_departdesc());
  }

  // int32 departId = 1;
  if (this->departid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_departid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DepartInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DepartProto.DepartInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DepartInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DepartInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DepartProto.DepartInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DepartProto.DepartInfo)
    MergeFrom(*source);
  }
}

void DepartInfo::MergeFrom(const DepartInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DepartProto.DepartInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  departusers_.MergeFrom(from.departusers_);
  if (from.departname().size() > 0) {

    departname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.departname_);
  }
  if (from.departdesc().size() > 0) {

    departdesc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.departdesc_);
  }
  if (from.departid() != 0) {
    _internal_set_departid(from._internal_departid());
  }
}

void DepartInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DepartProto.DepartInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepartInfo::CopyFrom(const DepartInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DepartProto.DepartInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepartInfo::IsInitialized() const {
  return true;
}

void DepartInfo::InternalSwap(DepartInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  departusers_.InternalSwap(&other->departusers_);
  departname_.Swap(&other->departname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  departdesc_.Swap(&other->departdesc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(departid_, other->departid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DepartInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResultCode::InitAsDefaultInstance() {
}
class ResultCode::_Internal {
 public:
};

ResultCode::ResultCode()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DepartProto.ResultCode)
}
ResultCode::ResultCode(const ResultCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_errmsg().empty()) {
    errmsg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  errcode_ = from.errcode_;
  // @@protoc_insertion_point(copy_constructor:DepartProto.ResultCode)
}

void ResultCode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResultCode_Depart_2eproto.base);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  errcode_ = 0;
}

ResultCode::~ResultCode() {
  // @@protoc_insertion_point(destructor:DepartProto.ResultCode)
  SharedDtor();
}

void ResultCode::SharedDtor() {
  errmsg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResultCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResultCode& ResultCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResultCode_Depart_2eproto.base);
  return *internal_default_instance();
}


void ResultCode::Clear() {
// @@protoc_insertion_point(message_clear_start:DepartProto.ResultCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errmsg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  errcode_ = 0;
  _internal_metadata_.Clear();
}

const char* ResultCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 errcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          errcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes errmsg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResultCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DepartProto.ResultCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 errcode = 1;
  if (this->errcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_errcode(), target);
  }

  // bytes errmsg = 2;
  if (this->errmsg().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_errmsg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DepartProto.ResultCode)
  return target;
}

size_t ResultCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DepartProto.ResultCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes errmsg = 2;
  if (this->errmsg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_errmsg());
  }

  // int32 errcode = 1;
  if (this->errcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_errcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResultCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DepartProto.ResultCode)
  GOOGLE_DCHECK_NE(&from, this);
  const ResultCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResultCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DepartProto.ResultCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DepartProto.ResultCode)
    MergeFrom(*source);
  }
}

void ResultCode::MergeFrom(const ResultCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DepartProto.ResultCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errmsg().size() > 0) {

    errmsg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  if (from.errcode() != 0) {
    _internal_set_errcode(from._internal_errcode());
  }
}

void ResultCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DepartProto.ResultCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultCode::CopyFrom(const ResultCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DepartProto.ResultCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultCode::IsInitialized() const {
  return true;
}

void ResultCode::InternalSwap(ResultCode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  errmsg_.Swap(&other->errmsg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(errcode_, other->errcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResultCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateDepartRequest::InitAsDefaultInstance() {
  ::DepartProto::_CreateDepartRequest_default_instance_._instance.get_mutable()->depart_ = const_cast< ::DepartProto::DepartInfo*>(
      ::DepartProto::DepartInfo::internal_default_instance());
}
class CreateDepartRequest::_Internal {
 public:
  static const ::DepartProto::DepartInfo& depart(const CreateDepartRequest* msg);
};

const ::DepartProto::DepartInfo&
CreateDepartRequest::_Internal::depart(const CreateDepartRequest* msg) {
  return *msg->depart_;
}
CreateDepartRequest::CreateDepartRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DepartProto.CreateDepartRequest)
}
CreateDepartRequest::CreateDepartRequest(const CreateDepartRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_depart()) {
    depart_ = new ::DepartProto::DepartInfo(*from.depart_);
  } else {
    depart_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DepartProto.CreateDepartRequest)
}

void CreateDepartRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateDepartRequest_Depart_2eproto.base);
  depart_ = nullptr;
}

CreateDepartRequest::~CreateDepartRequest() {
  // @@protoc_insertion_point(destructor:DepartProto.CreateDepartRequest)
  SharedDtor();
}

void CreateDepartRequest::SharedDtor() {
  if (this != internal_default_instance()) delete depart_;
}

void CreateDepartRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateDepartRequest& CreateDepartRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateDepartRequest_Depart_2eproto.base);
  return *internal_default_instance();
}


void CreateDepartRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DepartProto.CreateDepartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && depart_ != nullptr) {
    delete depart_;
  }
  depart_ = nullptr;
  _internal_metadata_.Clear();
}

const char* CreateDepartRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DepartProto.DepartInfo depart = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_depart(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateDepartRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DepartProto.CreateDepartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DepartProto.DepartInfo depart = 1;
  if (this->has_depart()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::depart(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DepartProto.CreateDepartRequest)
  return target;
}

size_t CreateDepartRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DepartProto.CreateDepartRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DepartProto.DepartInfo depart = 1;
  if (this->has_depart()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *depart_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateDepartRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DepartProto.CreateDepartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateDepartRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateDepartRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DepartProto.CreateDepartRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DepartProto.CreateDepartRequest)
    MergeFrom(*source);
  }
}

void CreateDepartRequest::MergeFrom(const CreateDepartRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DepartProto.CreateDepartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_depart()) {
    _internal_mutable_depart()->::DepartProto::DepartInfo::MergeFrom(from._internal_depart());
  }
}

void CreateDepartRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DepartProto.CreateDepartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateDepartRequest::CopyFrom(const CreateDepartRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DepartProto.CreateDepartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDepartRequest::IsInitialized() const {
  return true;
}

void CreateDepartRequest::InternalSwap(CreateDepartRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(depart_, other->depart_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateDepartRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateDepartResponse::InitAsDefaultInstance() {
  ::DepartProto::_CreateDepartResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::DepartProto::ResultCode*>(
      ::DepartProto::ResultCode::internal_default_instance());
}
class CreateDepartResponse::_Internal {
 public:
  static const ::DepartProto::ResultCode& result(const CreateDepartResponse* msg);
};

const ::DepartProto::ResultCode&
CreateDepartResponse::_Internal::result(const CreateDepartResponse* msg) {
  return *msg->result_;
}
CreateDepartResponse::CreateDepartResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DepartProto.CreateDepartResponse)
}
CreateDepartResponse::CreateDepartResponse(const CreateDepartResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::DepartProto::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:DepartProto.CreateDepartResponse)
}

void CreateDepartResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateDepartResponse_Depart_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&result_)) + sizeof(success_));
}

CreateDepartResponse::~CreateDepartResponse() {
  // @@protoc_insertion_point(destructor:DepartProto.CreateDepartResponse)
  SharedDtor();
}

void CreateDepartResponse::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void CreateDepartResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateDepartResponse& CreateDepartResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateDepartResponse_Depart_2eproto.base);
  return *internal_default_instance();
}


void CreateDepartResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DepartProto.CreateDepartResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear();
}

const char* CreateDepartResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DepartProto.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateDepartResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DepartProto.CreateDepartResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DepartProto.ResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DepartProto.CreateDepartResponse)
  return target;
}

size_t CreateDepartResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DepartProto.CreateDepartResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DepartProto.ResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateDepartResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DepartProto.CreateDepartResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateDepartResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateDepartResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DepartProto.CreateDepartResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DepartProto.CreateDepartResponse)
    MergeFrom(*source);
  }
}

void CreateDepartResponse::MergeFrom(const CreateDepartResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DepartProto.CreateDepartResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::DepartProto::ResultCode::MergeFrom(from._internal_result());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void CreateDepartResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DepartProto.CreateDepartResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateDepartResponse::CopyFrom(const CreateDepartResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DepartProto.CreateDepartResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDepartResponse::IsInitialized() const {
  return true;
}

void CreateDepartResponse::InternalSwap(CreateDepartResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateDepartResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DelDepartRequest::InitAsDefaultInstance() {
}
class DelDepartRequest::_Internal {
 public:
};

DelDepartRequest::DelDepartRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DepartProto.DelDepartRequest)
}
DelDepartRequest::DelDepartRequest(const DelDepartRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  departname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_departname().empty()) {
    departname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.departname_);
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  // @@protoc_insertion_point(copy_constructor:DepartProto.DelDepartRequest)
}

void DelDepartRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DelDepartRequest_Depart_2eproto.base);
  departname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DelDepartRequest::~DelDepartRequest() {
  // @@protoc_insertion_point(destructor:DepartProto.DelDepartRequest)
  SharedDtor();
}

void DelDepartRequest::SharedDtor() {
  departname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DelDepartRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DelDepartRequest& DelDepartRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DelDepartRequest_Depart_2eproto.base);
  return *internal_default_instance();
}


void DelDepartRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DepartProto.DelDepartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  departname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* DelDepartRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes departName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_departname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes userName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DelDepartRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DepartProto.DelDepartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes departName = 1;
  if (this->departname().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_departname(), target);
  }

  // bytes userName = 2;
  if (this->username().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DepartProto.DelDepartRequest)
  return target;
}

size_t DelDepartRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DepartProto.DelDepartRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes departName = 1;
  if (this->departname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_departname());
  }

  // bytes userName = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_username());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DelDepartRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DepartProto.DelDepartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DelDepartRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DelDepartRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DepartProto.DelDepartRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DepartProto.DelDepartRequest)
    MergeFrom(*source);
  }
}

void DelDepartRequest::MergeFrom(const DelDepartRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DepartProto.DelDepartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.departname().size() > 0) {

    departname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.departname_);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
}

void DelDepartRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DepartProto.DelDepartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelDepartRequest::CopyFrom(const DelDepartRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DepartProto.DelDepartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelDepartRequest::IsInitialized() const {
  return true;
}

void DelDepartRequest::InternalSwap(DelDepartRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  departname_.Swap(&other->departname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DelDepartRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DelDepartResponse::InitAsDefaultInstance() {
  ::DepartProto::_DelDepartResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::DepartProto::ResultCode*>(
      ::DepartProto::ResultCode::internal_default_instance());
}
class DelDepartResponse::_Internal {
 public:
  static const ::DepartProto::ResultCode& result(const DelDepartResponse* msg);
};

const ::DepartProto::ResultCode&
DelDepartResponse::_Internal::result(const DelDepartResponse* msg) {
  return *msg->result_;
}
DelDepartResponse::DelDepartResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DepartProto.DelDepartResponse)
}
DelDepartResponse::DelDepartResponse(const DelDepartResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::DepartProto::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:DepartProto.DelDepartResponse)
}

void DelDepartResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DelDepartResponse_Depart_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&result_)) + sizeof(success_));
}

DelDepartResponse::~DelDepartResponse() {
  // @@protoc_insertion_point(destructor:DepartProto.DelDepartResponse)
  SharedDtor();
}

void DelDepartResponse::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void DelDepartResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DelDepartResponse& DelDepartResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DelDepartResponse_Depart_2eproto.base);
  return *internal_default_instance();
}


void DelDepartResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DepartProto.DelDepartResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear();
}

const char* DelDepartResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DepartProto.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DelDepartResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DepartProto.DelDepartResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DepartProto.ResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DepartProto.DelDepartResponse)
  return target;
}

size_t DelDepartResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DepartProto.DelDepartResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DepartProto.ResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DelDepartResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DepartProto.DelDepartResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DelDepartResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DelDepartResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DepartProto.DelDepartResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DepartProto.DelDepartResponse)
    MergeFrom(*source);
  }
}

void DelDepartResponse::MergeFrom(const DelDepartResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DepartProto.DelDepartResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::DepartProto::ResultCode::MergeFrom(from._internal_result());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void DelDepartResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DepartProto.DelDepartResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelDepartResponse::CopyFrom(const DelDepartResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DepartProto.DelDepartResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelDepartResponse::IsInitialized() const {
  return true;
}

void DelDepartResponse::InternalSwap(DelDepartResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DelDepartResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddDepartRequest::InitAsDefaultInstance() {
}
class AddDepartRequest::_Internal {
 public:
};

AddDepartRequest::AddDepartRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DepartProto.AddDepartRequest)
}
AddDepartRequest::AddDepartRequest(const AddDepartRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  departname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_departname().empty()) {
    departname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.departname_);
  }
  userrole_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_userrole().empty()) {
    userrole_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.userrole_);
  }
  // @@protoc_insertion_point(copy_constructor:DepartProto.AddDepartRequest)
}

void AddDepartRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddDepartRequest_Depart_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  departname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userrole_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AddDepartRequest::~AddDepartRequest() {
  // @@protoc_insertion_point(destructor:DepartProto.AddDepartRequest)
  SharedDtor();
}

void AddDepartRequest::SharedDtor() {
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  departname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userrole_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddDepartRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddDepartRequest& AddDepartRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddDepartRequest_Depart_2eproto.base);
  return *internal_default_instance();
}


void AddDepartRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DepartProto.AddDepartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  departname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userrole_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* AddDepartRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes userName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes departName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_departname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes userRole = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_userrole();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddDepartRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DepartProto.AddDepartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes userName = 1;
  if (this->username().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_username(), target);
  }

  // bytes departName = 2;
  if (this->departname().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_departname(), target);
  }

  // bytes userRole = 3;
  if (this->userrole().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_userrole(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DepartProto.AddDepartRequest)
  return target;
}

size_t AddDepartRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DepartProto.AddDepartRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes userName = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_username());
  }

  // bytes departName = 2;
  if (this->departname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_departname());
  }

  // bytes userRole = 3;
  if (this->userrole().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_userrole());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddDepartRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DepartProto.AddDepartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddDepartRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddDepartRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DepartProto.AddDepartRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DepartProto.AddDepartRequest)
    MergeFrom(*source);
  }
}

void AddDepartRequest::MergeFrom(const AddDepartRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DepartProto.AddDepartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.departname().size() > 0) {

    departname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.departname_);
  }
  if (from.userrole().size() > 0) {

    userrole_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.userrole_);
  }
}

void AddDepartRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DepartProto.AddDepartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddDepartRequest::CopyFrom(const AddDepartRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DepartProto.AddDepartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddDepartRequest::IsInitialized() const {
  return true;
}

void AddDepartRequest::InternalSwap(AddDepartRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  departname_.Swap(&other->departname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  userrole_.Swap(&other->userrole_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AddDepartRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddDepartResponse::InitAsDefaultInstance() {
  ::DepartProto::_AddDepartResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::DepartProto::ResultCode*>(
      ::DepartProto::ResultCode::internal_default_instance());
}
class AddDepartResponse::_Internal {
 public:
  static const ::DepartProto::ResultCode& result(const AddDepartResponse* msg);
};

const ::DepartProto::ResultCode&
AddDepartResponse::_Internal::result(const AddDepartResponse* msg) {
  return *msg->result_;
}
AddDepartResponse::AddDepartResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DepartProto.AddDepartResponse)
}
AddDepartResponse::AddDepartResponse(const AddDepartResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::DepartProto::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:DepartProto.AddDepartResponse)
}

void AddDepartResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddDepartResponse_Depart_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&result_)) + sizeof(success_));
}

AddDepartResponse::~AddDepartResponse() {
  // @@protoc_insertion_point(destructor:DepartProto.AddDepartResponse)
  SharedDtor();
}

void AddDepartResponse::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void AddDepartResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddDepartResponse& AddDepartResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddDepartResponse_Depart_2eproto.base);
  return *internal_default_instance();
}


void AddDepartResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DepartProto.AddDepartResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear();
}

const char* AddDepartResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DepartProto.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddDepartResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DepartProto.AddDepartResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DepartProto.ResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DepartProto.AddDepartResponse)
  return target;
}

size_t AddDepartResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DepartProto.AddDepartResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DepartProto.ResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddDepartResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DepartProto.AddDepartResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddDepartResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddDepartResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DepartProto.AddDepartResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DepartProto.AddDepartResponse)
    MergeFrom(*source);
  }
}

void AddDepartResponse::MergeFrom(const AddDepartResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DepartProto.AddDepartResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::DepartProto::ResultCode::MergeFrom(from._internal_result());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void AddDepartResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DepartProto.AddDepartResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddDepartResponse::CopyFrom(const AddDepartResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DepartProto.AddDepartResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddDepartResponse::IsInitialized() const {
  return true;
}

void AddDepartResponse::InternalSwap(AddDepartResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddDepartResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QuitDepartRequest::InitAsDefaultInstance() {
}
class QuitDepartRequest::_Internal {
 public:
};

QuitDepartRequest::QuitDepartRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DepartProto.QuitDepartRequest)
}
QuitDepartRequest::QuitDepartRequest(const QuitDepartRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  departname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_departname().empty()) {
    departname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.departname_);
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  // @@protoc_insertion_point(copy_constructor:DepartProto.QuitDepartRequest)
}

void QuitDepartRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QuitDepartRequest_Depart_2eproto.base);
  departname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

QuitDepartRequest::~QuitDepartRequest() {
  // @@protoc_insertion_point(destructor:DepartProto.QuitDepartRequest)
  SharedDtor();
}

void QuitDepartRequest::SharedDtor() {
  departname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QuitDepartRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuitDepartRequest& QuitDepartRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QuitDepartRequest_Depart_2eproto.base);
  return *internal_default_instance();
}


void QuitDepartRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DepartProto.QuitDepartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  departname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* QuitDepartRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes departName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_departname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes userName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QuitDepartRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DepartProto.QuitDepartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes departName = 1;
  if (this->departname().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_departname(), target);
  }

  // bytes userName = 2;
  if (this->username().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DepartProto.QuitDepartRequest)
  return target;
}

size_t QuitDepartRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DepartProto.QuitDepartRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes departName = 1;
  if (this->departname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_departname());
  }

  // bytes userName = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_username());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuitDepartRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DepartProto.QuitDepartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const QuitDepartRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QuitDepartRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DepartProto.QuitDepartRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DepartProto.QuitDepartRequest)
    MergeFrom(*source);
  }
}

void QuitDepartRequest::MergeFrom(const QuitDepartRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DepartProto.QuitDepartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.departname().size() > 0) {

    departname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.departname_);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
}

void QuitDepartRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DepartProto.QuitDepartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuitDepartRequest::CopyFrom(const QuitDepartRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DepartProto.QuitDepartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuitDepartRequest::IsInitialized() const {
  return true;
}

void QuitDepartRequest::InternalSwap(QuitDepartRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  departname_.Swap(&other->departname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata QuitDepartRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QuitDepartResponse::InitAsDefaultInstance() {
  ::DepartProto::_QuitDepartResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::DepartProto::ResultCode*>(
      ::DepartProto::ResultCode::internal_default_instance());
}
class QuitDepartResponse::_Internal {
 public:
  static const ::DepartProto::ResultCode& result(const QuitDepartResponse* msg);
};

const ::DepartProto::ResultCode&
QuitDepartResponse::_Internal::result(const QuitDepartResponse* msg) {
  return *msg->result_;
}
QuitDepartResponse::QuitDepartResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DepartProto.QuitDepartResponse)
}
QuitDepartResponse::QuitDepartResponse(const QuitDepartResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::DepartProto::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:DepartProto.QuitDepartResponse)
}

void QuitDepartResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QuitDepartResponse_Depart_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&result_)) + sizeof(success_));
}

QuitDepartResponse::~QuitDepartResponse() {
  // @@protoc_insertion_point(destructor:DepartProto.QuitDepartResponse)
  SharedDtor();
}

void QuitDepartResponse::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void QuitDepartResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuitDepartResponse& QuitDepartResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QuitDepartResponse_Depart_2eproto.base);
  return *internal_default_instance();
}


void QuitDepartResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DepartProto.QuitDepartResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear();
}

const char* QuitDepartResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DepartProto.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QuitDepartResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DepartProto.QuitDepartResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DepartProto.ResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DepartProto.QuitDepartResponse)
  return target;
}

size_t QuitDepartResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DepartProto.QuitDepartResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DepartProto.ResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuitDepartResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DepartProto.QuitDepartResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const QuitDepartResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QuitDepartResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DepartProto.QuitDepartResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DepartProto.QuitDepartResponse)
    MergeFrom(*source);
  }
}

void QuitDepartResponse::MergeFrom(const QuitDepartResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DepartProto.QuitDepartResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::DepartProto::ResultCode::MergeFrom(from._internal_result());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void QuitDepartResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DepartProto.QuitDepartResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuitDepartResponse::CopyFrom(const QuitDepartResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DepartProto.QuitDepartResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuitDepartResponse::IsInitialized() const {
  return true;
}

void QuitDepartResponse::InternalSwap(QuitDepartResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuitDepartResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryDepartRequest::InitAsDefaultInstance() {
}
class QueryDepartRequest::_Internal {
 public:
};

QueryDepartRequest::QueryDepartRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DepartProto.QueryDepartRequest)
}
QueryDepartRequest::QueryDepartRequest(const QueryDepartRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  // @@protoc_insertion_point(copy_constructor:DepartProto.QueryDepartRequest)
}

void QueryDepartRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryDepartRequest_Depart_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

QueryDepartRequest::~QueryDepartRequest() {
  // @@protoc_insertion_point(destructor:DepartProto.QueryDepartRequest)
  SharedDtor();
}

void QueryDepartRequest::SharedDtor() {
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QueryDepartRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryDepartRequest& QueryDepartRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryDepartRequest_Depart_2eproto.base);
  return *internal_default_instance();
}


void QueryDepartRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DepartProto.QueryDepartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* QueryDepartRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes userName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryDepartRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DepartProto.QueryDepartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes userName = 1;
  if (this->username().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DepartProto.QueryDepartRequest)
  return target;
}

size_t QueryDepartRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DepartProto.QueryDepartRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes userName = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_username());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryDepartRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DepartProto.QueryDepartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryDepartRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryDepartRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DepartProto.QueryDepartRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DepartProto.QueryDepartRequest)
    MergeFrom(*source);
  }
}

void QueryDepartRequest::MergeFrom(const QueryDepartRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DepartProto.QueryDepartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
}

void QueryDepartRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DepartProto.QueryDepartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryDepartRequest::CopyFrom(const QueryDepartRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DepartProto.QueryDepartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDepartRequest::IsInitialized() const {
  return true;
}

void QueryDepartRequest::InternalSwap(QueryDepartRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryDepartRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryDepartResponse::InitAsDefaultInstance() {
  ::DepartProto::_QueryDepartResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::DepartProto::ResultCode*>(
      ::DepartProto::ResultCode::internal_default_instance());
  ::DepartProto::_QueryDepartResponse_default_instance_._instance.get_mutable()->departs_ = const_cast< ::DepartProto::DepartInfo*>(
      ::DepartProto::DepartInfo::internal_default_instance());
}
class QueryDepartResponse::_Internal {
 public:
  static const ::DepartProto::ResultCode& result(const QueryDepartResponse* msg);
  static const ::DepartProto::DepartInfo& departs(const QueryDepartResponse* msg);
};

const ::DepartProto::ResultCode&
QueryDepartResponse::_Internal::result(const QueryDepartResponse* msg) {
  return *msg->result_;
}
const ::DepartProto::DepartInfo&
QueryDepartResponse::_Internal::departs(const QueryDepartResponse* msg) {
  return *msg->departs_;
}
QueryDepartResponse::QueryDepartResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DepartProto.QueryDepartResponse)
}
QueryDepartResponse::QueryDepartResponse(const QueryDepartResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::DepartProto::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  if (from._internal_has_departs()) {
    departs_ = new ::DepartProto::DepartInfo(*from.departs_);
  } else {
    departs_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:DepartProto.QueryDepartResponse)
}

void QueryDepartResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryDepartResponse_Depart_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&result_)) + sizeof(success_));
}

QueryDepartResponse::~QueryDepartResponse() {
  // @@protoc_insertion_point(destructor:DepartProto.QueryDepartResponse)
  SharedDtor();
}

void QueryDepartResponse::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
  if (this != internal_default_instance()) delete departs_;
}

void QueryDepartResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryDepartResponse& QueryDepartResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryDepartResponse_Depart_2eproto.base);
  return *internal_default_instance();
}


void QueryDepartResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DepartProto.QueryDepartResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && departs_ != nullptr) {
    delete departs_;
  }
  departs_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear();
}

const char* QueryDepartResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DepartProto.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DepartProto.DepartInfo departs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_departs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryDepartResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DepartProto.QueryDepartResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DepartProto.ResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // .DepartProto.DepartInfo departs = 3;
  if (this->has_departs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::departs(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DepartProto.QueryDepartResponse)
  return target;
}

size_t QueryDepartResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DepartProto.QueryDepartResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DepartProto.ResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // .DepartProto.DepartInfo departs = 3;
  if (this->has_departs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *departs_);
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryDepartResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DepartProto.QueryDepartResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryDepartResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryDepartResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DepartProto.QueryDepartResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DepartProto.QueryDepartResponse)
    MergeFrom(*source);
  }
}

void QueryDepartResponse::MergeFrom(const QueryDepartResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DepartProto.QueryDepartResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::DepartProto::ResultCode::MergeFrom(from._internal_result());
  }
  if (from.has_departs()) {
    _internal_mutable_departs()->::DepartProto::DepartInfo::MergeFrom(from._internal_departs());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void QueryDepartResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DepartProto.QueryDepartResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryDepartResponse::CopyFrom(const QueryDepartResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DepartProto.QueryDepartResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDepartResponse::IsInitialized() const {
  return true;
}

void QueryDepartResponse::InternalSwap(QueryDepartResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(departs_, other->departs_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryDepartResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryDepartUsersRequest::InitAsDefaultInstance() {
}
class QueryDepartUsersRequest::_Internal {
 public:
};

QueryDepartUsersRequest::QueryDepartUsersRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DepartProto.QueryDepartUsersRequest)
}
QueryDepartUsersRequest::QueryDepartUsersRequest(const QueryDepartUsersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  departname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_departname().empty()) {
    departname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.departname_);
  }
  // @@protoc_insertion_point(copy_constructor:DepartProto.QueryDepartUsersRequest)
}

void QueryDepartUsersRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryDepartUsersRequest_Depart_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  departname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

QueryDepartUsersRequest::~QueryDepartUsersRequest() {
  // @@protoc_insertion_point(destructor:DepartProto.QueryDepartUsersRequest)
  SharedDtor();
}

void QueryDepartUsersRequest::SharedDtor() {
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  departname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QueryDepartUsersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryDepartUsersRequest& QueryDepartUsersRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryDepartUsersRequest_Depart_2eproto.base);
  return *internal_default_instance();
}


void QueryDepartUsersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DepartProto.QueryDepartUsersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  departname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* QueryDepartUsersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes userName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes departName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_departname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryDepartUsersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DepartProto.QueryDepartUsersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes userName = 1;
  if (this->username().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_username(), target);
  }

  // bytes departName = 2;
  if (this->departname().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_departname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DepartProto.QueryDepartUsersRequest)
  return target;
}

size_t QueryDepartUsersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DepartProto.QueryDepartUsersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes userName = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_username());
  }

  // bytes departName = 2;
  if (this->departname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_departname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryDepartUsersRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DepartProto.QueryDepartUsersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryDepartUsersRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryDepartUsersRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DepartProto.QueryDepartUsersRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DepartProto.QueryDepartUsersRequest)
    MergeFrom(*source);
  }
}

void QueryDepartUsersRequest::MergeFrom(const QueryDepartUsersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DepartProto.QueryDepartUsersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.departname().size() > 0) {

    departname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.departname_);
  }
}

void QueryDepartUsersRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DepartProto.QueryDepartUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryDepartUsersRequest::CopyFrom(const QueryDepartUsersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DepartProto.QueryDepartUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDepartUsersRequest::IsInitialized() const {
  return true;
}

void QueryDepartUsersRequest::InternalSwap(QueryDepartUsersRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  departname_.Swap(&other->departname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryDepartUsersRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryDepartUsersResponse::InitAsDefaultInstance() {
  ::DepartProto::_QueryDepartUsersResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::DepartProto::ResultCode*>(
      ::DepartProto::ResultCode::internal_default_instance());
}
class QueryDepartUsersResponse::_Internal {
 public:
  static const ::DepartProto::ResultCode& result(const QueryDepartUsersResponse* msg);
};

const ::DepartProto::ResultCode&
QueryDepartUsersResponse::_Internal::result(const QueryDepartUsersResponse* msg) {
  return *msg->result_;
}
QueryDepartUsersResponse::QueryDepartUsersResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DepartProto.QueryDepartUsersResponse)
}
QueryDepartUsersResponse::QueryDepartUsersResponse(const QueryDepartUsersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      departusername_(from.departusername_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::DepartProto::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:DepartProto.QueryDepartUsersResponse)
}

void QueryDepartUsersResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryDepartUsersResponse_Depart_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&result_)) + sizeof(success_));
}

QueryDepartUsersResponse::~QueryDepartUsersResponse() {
  // @@protoc_insertion_point(destructor:DepartProto.QueryDepartUsersResponse)
  SharedDtor();
}

void QueryDepartUsersResponse::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void QueryDepartUsersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryDepartUsersResponse& QueryDepartUsersResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryDepartUsersResponse_Depart_2eproto.base);
  return *internal_default_instance();
}


void QueryDepartUsersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DepartProto.QueryDepartUsersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  departusername_.Clear();
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear();
}

const char* QueryDepartUsersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DepartProto.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes departUserName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_departusername();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryDepartUsersResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DepartProto.QueryDepartUsersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DepartProto.ResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // repeated bytes departUserName = 3;
  for (int i = 0, n = this->_internal_departusername_size(); i < n; i++) {
    const auto& s = this->_internal_departusername(i);
    target = stream->WriteBytes(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DepartProto.QueryDepartUsersResponse)
  return target;
}

size_t QueryDepartUsersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DepartProto.QueryDepartUsersResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes departUserName = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(departusername_.size());
  for (int i = 0, n = departusername_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      departusername_.Get(i));
  }

  // .DepartProto.ResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryDepartUsersResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DepartProto.QueryDepartUsersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryDepartUsersResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryDepartUsersResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DepartProto.QueryDepartUsersResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DepartProto.QueryDepartUsersResponse)
    MergeFrom(*source);
  }
}

void QueryDepartUsersResponse::MergeFrom(const QueryDepartUsersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DepartProto.QueryDepartUsersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  departusername_.MergeFrom(from.departusername_);
  if (from.has_result()) {
    _internal_mutable_result()->::DepartProto::ResultCode::MergeFrom(from._internal_result());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void QueryDepartUsersResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DepartProto.QueryDepartUsersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryDepartUsersResponse::CopyFrom(const QueryDepartUsersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DepartProto.QueryDepartUsersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDepartUsersResponse::IsInitialized() const {
  return true;
}

void QueryDepartUsersResponse::InternalSwap(QueryDepartUsersResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  departusername_.InternalSwap(&other->departusername_);
  swap(result_, other->result_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryDepartUsersResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

DepartServiceRpc::~DepartServiceRpc() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* DepartServiceRpc::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Depart_2eproto);
  return file_level_service_descriptors_Depart_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* DepartServiceRpc::GetDescriptor() {
  return descriptor();
}

void DepartServiceRpc::CreateDepart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::DepartProto::CreateDepartRequest*,
                         ::DepartProto::CreateDepartResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CreateDepart() not implemented.");
  done->Run();
}

void DepartServiceRpc::DelDepart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::DepartProto::DelDepartRequest*,
                         ::DepartProto::DelDepartResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DelDepart() not implemented.");
  done->Run();
}

void DepartServiceRpc::AddDepart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::DepartProto::AddDepartRequest*,
                         ::DepartProto::AddDepartResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddDepart() not implemented.");
  done->Run();
}

void DepartServiceRpc::QuitDepart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::DepartProto::QuitDepartRequest*,
                         ::DepartProto::QuitDepartResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QuitDepart() not implemented.");
  done->Run();
}

void DepartServiceRpc::QueryDepart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::DepartProto::QueryDepartRequest*,
                         ::DepartProto::QueryDepartResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QueryDepart() not implemented.");
  done->Run();
}

void DepartServiceRpc::QueryDepartUsers(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::DepartProto::QueryDepartUsersRequest*,
                         ::DepartProto::QueryDepartUsersResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QueryDepartUsers() not implemented.");
  done->Run();
}

void DepartServiceRpc::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_Depart_2eproto[0]);
  switch(method->index()) {
    case 0:
      CreateDepart(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::DepartProto::CreateDepartRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::DepartProto::CreateDepartResponse*>(
                 response),
             done);
      break;
    case 1:
      DelDepart(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::DepartProto::DelDepartRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::DepartProto::DelDepartResponse*>(
                 response),
             done);
      break;
    case 2:
      AddDepart(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::DepartProto::AddDepartRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::DepartProto::AddDepartResponse*>(
                 response),
             done);
      break;
    case 3:
      QuitDepart(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::DepartProto::QuitDepartRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::DepartProto::QuitDepartResponse*>(
                 response),
             done);
      break;
    case 4:
      QueryDepart(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::DepartProto::QueryDepartRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::DepartProto::QueryDepartResponse*>(
                 response),
             done);
      break;
    case 5:
      QueryDepartUsers(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::DepartProto::QueryDepartUsersRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::DepartProto::QueryDepartUsersResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& DepartServiceRpc::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::DepartProto::CreateDepartRequest::default_instance();
    case 1:
      return ::DepartProto::DelDepartRequest::default_instance();
    case 2:
      return ::DepartProto::AddDepartRequest::default_instance();
    case 3:
      return ::DepartProto::QuitDepartRequest::default_instance();
    case 4:
      return ::DepartProto::QueryDepartRequest::default_instance();
    case 5:
      return ::DepartProto::QueryDepartUsersRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& DepartServiceRpc::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::DepartProto::CreateDepartResponse::default_instance();
    case 1:
      return ::DepartProto::DelDepartResponse::default_instance();
    case 2:
      return ::DepartProto::AddDepartResponse::default_instance();
    case 3:
      return ::DepartProto::QuitDepartResponse::default_instance();
    case 4:
      return ::DepartProto::QueryDepartResponse::default_instance();
    case 5:
      return ::DepartProto::QueryDepartUsersResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

DepartServiceRpc_Stub::DepartServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
DepartServiceRpc_Stub::DepartServiceRpc_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
DepartServiceRpc_Stub::~DepartServiceRpc_Stub() {
  if (owns_channel_) delete channel_;
}

void DepartServiceRpc_Stub::CreateDepart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::DepartProto::CreateDepartRequest* request,
                              ::DepartProto::CreateDepartResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void DepartServiceRpc_Stub::DelDepart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::DepartProto::DelDepartRequest* request,
                              ::DepartProto::DelDepartResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void DepartServiceRpc_Stub::AddDepart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::DepartProto::AddDepartRequest* request,
                              ::DepartProto::AddDepartResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void DepartServiceRpc_Stub::QuitDepart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::DepartProto::QuitDepartRequest* request,
                              ::DepartProto::QuitDepartResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void DepartServiceRpc_Stub::QueryDepart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::DepartProto::QueryDepartRequest* request,
                              ::DepartProto::QueryDepartResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void DepartServiceRpc_Stub::QueryDepartUsers(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::DepartProto::QueryDepartUsersRequest* request,
                              ::DepartProto::QueryDepartUsersResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace DepartProto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DepartProto::DepartUser* Arena::CreateMaybeMessage< ::DepartProto::DepartUser >(Arena* arena) {
  return Arena::CreateInternal< ::DepartProto::DepartUser >(arena);
}
template<> PROTOBUF_NOINLINE ::DepartProto::DepartInfo* Arena::CreateMaybeMessage< ::DepartProto::DepartInfo >(Arena* arena) {
  return Arena::CreateInternal< ::DepartProto::DepartInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::DepartProto::ResultCode* Arena::CreateMaybeMessage< ::DepartProto::ResultCode >(Arena* arena) {
  return Arena::CreateInternal< ::DepartProto::ResultCode >(arena);
}
template<> PROTOBUF_NOINLINE ::DepartProto::CreateDepartRequest* Arena::CreateMaybeMessage< ::DepartProto::CreateDepartRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DepartProto::CreateDepartRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DepartProto::CreateDepartResponse* Arena::CreateMaybeMessage< ::DepartProto::CreateDepartResponse >(Arena* arena) {
  return Arena::CreateInternal< ::DepartProto::CreateDepartResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::DepartProto::DelDepartRequest* Arena::CreateMaybeMessage< ::DepartProto::DelDepartRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DepartProto::DelDepartRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DepartProto::DelDepartResponse* Arena::CreateMaybeMessage< ::DepartProto::DelDepartResponse >(Arena* arena) {
  return Arena::CreateInternal< ::DepartProto::DelDepartResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::DepartProto::AddDepartRequest* Arena::CreateMaybeMessage< ::DepartProto::AddDepartRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DepartProto::AddDepartRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DepartProto::AddDepartResponse* Arena::CreateMaybeMessage< ::DepartProto::AddDepartResponse >(Arena* arena) {
  return Arena::CreateInternal< ::DepartProto::AddDepartResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::DepartProto::QuitDepartRequest* Arena::CreateMaybeMessage< ::DepartProto::QuitDepartRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DepartProto::QuitDepartRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DepartProto::QuitDepartResponse* Arena::CreateMaybeMessage< ::DepartProto::QuitDepartResponse >(Arena* arena) {
  return Arena::CreateInternal< ::DepartProto::QuitDepartResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::DepartProto::QueryDepartRequest* Arena::CreateMaybeMessage< ::DepartProto::QueryDepartRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DepartProto::QueryDepartRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DepartProto::QueryDepartResponse* Arena::CreateMaybeMessage< ::DepartProto::QueryDepartResponse >(Arena* arena) {
  return Arena::CreateInternal< ::DepartProto::QueryDepartResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::DepartProto::QueryDepartUsersRequest* Arena::CreateMaybeMessage< ::DepartProto::QueryDepartUsersRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DepartProto::QueryDepartUsersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DepartProto::QueryDepartUsersResponse* Arena::CreateMaybeMessage< ::DepartProto::QueryDepartUsersResponse >(Arena* arena) {
  return Arena::CreateInternal< ::DepartProto::QueryDepartUsersResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
