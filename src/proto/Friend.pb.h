// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Friend.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Friend_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Friend_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Friend_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Friend_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Friend_2eproto;
namespace FriendProto {
class AddFriendRequest;
struct AddFriendRequestDefaultTypeInternal;
extern AddFriendRequestDefaultTypeInternal _AddFriendRequest_default_instance_;
class AddFriendResponse;
struct AddFriendResponseDefaultTypeInternal;
extern AddFriendResponseDefaultTypeInternal _AddFriendResponse_default_instance_;
class AdminInfo;
struct AdminInfoDefaultTypeInternal;
extern AdminInfoDefaultTypeInternal _AdminInfo_default_instance_;
class DelFriendRequest;
struct DelFriendRequestDefaultTypeInternal;
extern DelFriendRequestDefaultTypeInternal _DelFriendRequest_default_instance_;
class DelFriendResponse;
struct DelFriendResponseDefaultTypeInternal;
extern DelFriendResponseDefaultTypeInternal _DelFriendResponse_default_instance_;
class GetFriendRequest;
struct GetFriendRequestDefaultTypeInternal;
extern GetFriendRequestDefaultTypeInternal _GetFriendRequest_default_instance_;
class GetFriendResponse;
struct GetFriendResponseDefaultTypeInternal;
extern GetFriendResponseDefaultTypeInternal _GetFriendResponse_default_instance_;
class ResultCode;
struct ResultCodeDefaultTypeInternal;
extern ResultCodeDefaultTypeInternal _ResultCode_default_instance_;
}  // namespace FriendProto
PROTOBUF_NAMESPACE_OPEN
template<> ::FriendProto::AddFriendRequest* Arena::CreateMaybeMessage<::FriendProto::AddFriendRequest>(Arena*);
template<> ::FriendProto::AddFriendResponse* Arena::CreateMaybeMessage<::FriendProto::AddFriendResponse>(Arena*);
template<> ::FriendProto::AdminInfo* Arena::CreateMaybeMessage<::FriendProto::AdminInfo>(Arena*);
template<> ::FriendProto::DelFriendRequest* Arena::CreateMaybeMessage<::FriendProto::DelFriendRequest>(Arena*);
template<> ::FriendProto::DelFriendResponse* Arena::CreateMaybeMessage<::FriendProto::DelFriendResponse>(Arena*);
template<> ::FriendProto::GetFriendRequest* Arena::CreateMaybeMessage<::FriendProto::GetFriendRequest>(Arena*);
template<> ::FriendProto::GetFriendResponse* Arena::CreateMaybeMessage<::FriendProto::GetFriendResponse>(Arena*);
template<> ::FriendProto::ResultCode* Arena::CreateMaybeMessage<::FriendProto::ResultCode>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace FriendProto {

// ===================================================================

class AdminInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FriendProto.AdminInfo) */ {
 public:
  inline AdminInfo() : AdminInfo(nullptr) {}
  ~AdminInfo() override;
  explicit constexpr AdminInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AdminInfo(const AdminInfo& from);
  AdminInfo(AdminInfo&& from) noexcept
    : AdminInfo() {
    *this = ::std::move(from);
  }

  inline AdminInfo& operator=(const AdminInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdminInfo& operator=(AdminInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AdminInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AdminInfo* internal_default_instance() {
    return reinterpret_cast<const AdminInfo*>(
               &_AdminInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AdminInfo& a, AdminInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AdminInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdminInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AdminInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AdminInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AdminInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AdminInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdminInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FriendProto.AdminInfo";
  }
  protected:
  explicit AdminInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kEmailFieldNumber = 2,
    kPhoneFieldNumber = 3,
    kDescFieldNumber = 4,
    kDepartNameFieldNumber = 5,
    kStatusFieldNumber = 6,
  };
  // bytes Name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes Email = 2;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // bytes Phone = 3;
  void clear_phone();
  const std::string& phone() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_phone(ArgT0&& arg0, ArgT... args);
  std::string* mutable_phone();
  PROTOBUF_NODISCARD std::string* release_phone();
  void set_allocated_phone(std::string* phone);
  private:
  const std::string& _internal_phone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phone(const std::string& value);
  std::string* _internal_mutable_phone();
  public:

  // bytes Desc = 4;
  void clear_desc();
  const std::string& desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc();
  PROTOBUF_NODISCARD std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // bytes DepartName = 5;
  void clear_departname();
  const std::string& departname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_departname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_departname();
  PROTOBUF_NODISCARD std::string* release_departname();
  void set_allocated_departname(std::string* departname);
  private:
  const std::string& _internal_departname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_departname(const std::string& value);
  std::string* _internal_mutable_departname();
  public:

  // bytes Status = 6;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:FriendProto.AdminInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr departname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Friend_2eproto;
};
// -------------------------------------------------------------------

class ResultCode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FriendProto.ResultCode) */ {
 public:
  inline ResultCode() : ResultCode(nullptr) {}
  ~ResultCode() override;
  explicit constexpr ResultCode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResultCode(const ResultCode& from);
  ResultCode(ResultCode&& from) noexcept
    : ResultCode() {
    *this = ::std::move(from);
  }

  inline ResultCode& operator=(const ResultCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultCode& operator=(ResultCode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResultCode& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResultCode* internal_default_instance() {
    return reinterpret_cast<const ResultCode*>(
               &_ResultCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ResultCode& a, ResultCode& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultCode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResultCode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResultCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResultCode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResultCode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResultCode& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultCode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FriendProto.ResultCode";
  }
  protected:
  explicit ResultCode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 2,
    kErrcodeFieldNumber = 1,
  };
  // bytes errmsg = 2;
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // int32 errcode = 1;
  void clear_errcode();
  int32_t errcode() const;
  void set_errcode(int32_t value);
  private:
  int32_t _internal_errcode() const;
  void _internal_set_errcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FriendProto.ResultCode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  int32_t errcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Friend_2eproto;
};
// -------------------------------------------------------------------

class AddFriendRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FriendProto.AddFriendRequest) */ {
 public:
  inline AddFriendRequest() : AddFriendRequest(nullptr) {}
  ~AddFriendRequest() override;
  explicit constexpr AddFriendRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddFriendRequest(const AddFriendRequest& from);
  AddFriendRequest(AddFriendRequest&& from) noexcept
    : AddFriendRequest() {
    *this = ::std::move(from);
  }

  inline AddFriendRequest& operator=(const AddFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFriendRequest& operator=(AddFriendRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddFriendRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddFriendRequest* internal_default_instance() {
    return reinterpret_cast<const AddFriendRequest*>(
               &_AddFriendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AddFriendRequest& a, AddFriendRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddFriendRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddFriendRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddFriendRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddFriendRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddFriendRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddFriendRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFriendRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FriendProto.AddFriendRequest";
  }
  protected:
  explicit AddFriendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdminNameFieldNumber = 1,
    kPeerNameFieldNumber = 2,
  };
  // bytes adminName = 1;
  void clear_adminname();
  const std::string& adminname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_adminname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_adminname();
  PROTOBUF_NODISCARD std::string* release_adminname();
  void set_allocated_adminname(std::string* adminname);
  private:
  const std::string& _internal_adminname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_adminname(const std::string& value);
  std::string* _internal_mutable_adminname();
  public:

  // bytes peerName = 2;
  void clear_peername();
  const std::string& peername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_peername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_peername();
  PROTOBUF_NODISCARD std::string* release_peername();
  void set_allocated_peername(std::string* peername);
  private:
  const std::string& _internal_peername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_peername(const std::string& value);
  std::string* _internal_mutable_peername();
  public:

  // @@protoc_insertion_point(class_scope:FriendProto.AddFriendRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr adminname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr peername_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Friend_2eproto;
};
// -------------------------------------------------------------------

class AddFriendResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FriendProto.AddFriendResponse) */ {
 public:
  inline AddFriendResponse() : AddFriendResponse(nullptr) {}
  ~AddFriendResponse() override;
  explicit constexpr AddFriendResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddFriendResponse(const AddFriendResponse& from);
  AddFriendResponse(AddFriendResponse&& from) noexcept
    : AddFriendResponse() {
    *this = ::std::move(from);
  }

  inline AddFriendResponse& operator=(const AddFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFriendResponse& operator=(AddFriendResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddFriendResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddFriendResponse* internal_default_instance() {
    return reinterpret_cast<const AddFriendResponse*>(
               &_AddFriendResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AddFriendResponse& a, AddFriendResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddFriendResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddFriendResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddFriendResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddFriendResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddFriendResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddFriendResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFriendResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FriendProto.AddFriendResponse";
  }
  protected:
  explicit AddFriendResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // .FriendProto.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::FriendProto::ResultCode& result() const;
  PROTOBUF_NODISCARD ::FriendProto::ResultCode* release_result();
  ::FriendProto::ResultCode* mutable_result();
  void set_allocated_result(::FriendProto::ResultCode* result);
  private:
  const ::FriendProto::ResultCode& _internal_result() const;
  ::FriendProto::ResultCode* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::FriendProto::ResultCode* result);
  ::FriendProto::ResultCode* unsafe_arena_release_result();

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:FriendProto.AddFriendResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::FriendProto::ResultCode* result_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Friend_2eproto;
};
// -------------------------------------------------------------------

class GetFriendRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FriendProto.GetFriendRequest) */ {
 public:
  inline GetFriendRequest() : GetFriendRequest(nullptr) {}
  ~GetFriendRequest() override;
  explicit constexpr GetFriendRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFriendRequest(const GetFriendRequest& from);
  GetFriendRequest(GetFriendRequest&& from) noexcept
    : GetFriendRequest() {
    *this = ::std::move(from);
  }

  inline GetFriendRequest& operator=(const GetFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFriendRequest& operator=(GetFriendRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFriendRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFriendRequest* internal_default_instance() {
    return reinterpret_cast<const GetFriendRequest*>(
               &_GetFriendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetFriendRequest& a, GetFriendRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFriendRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFriendRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFriendRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFriendRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFriendRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetFriendRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFriendRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FriendProto.GetFriendRequest";
  }
  protected:
  explicit GetFriendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdminNameFieldNumber = 1,
  };
  // bytes adminName = 1;
  void clear_adminname();
  const std::string& adminname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_adminname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_adminname();
  PROTOBUF_NODISCARD std::string* release_adminname();
  void set_allocated_adminname(std::string* adminname);
  private:
  const std::string& _internal_adminname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_adminname(const std::string& value);
  std::string* _internal_mutable_adminname();
  public:

  // @@protoc_insertion_point(class_scope:FriendProto.GetFriendRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr adminname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Friend_2eproto;
};
// -------------------------------------------------------------------

class GetFriendResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FriendProto.GetFriendResponse) */ {
 public:
  inline GetFriendResponse() : GetFriendResponse(nullptr) {}
  ~GetFriendResponse() override;
  explicit constexpr GetFriendResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFriendResponse(const GetFriendResponse& from);
  GetFriendResponse(GetFriendResponse&& from) noexcept
    : GetFriendResponse() {
    *this = ::std::move(from);
  }

  inline GetFriendResponse& operator=(const GetFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFriendResponse& operator=(GetFriendResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFriendResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFriendResponse* internal_default_instance() {
    return reinterpret_cast<const GetFriendResponse*>(
               &_GetFriendResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetFriendResponse& a, GetFriendResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFriendResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFriendResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFriendResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFriendResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFriendResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetFriendResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFriendResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FriendProto.GetFriendResponse";
  }
  protected:
  explicit GetFriendResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kResultFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // repeated .FriendProto.AdminInfo Data = 3;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::FriendProto::AdminInfo* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FriendProto::AdminInfo >*
      mutable_data();
  private:
  const ::FriendProto::AdminInfo& _internal_data(int index) const;
  ::FriendProto::AdminInfo* _internal_add_data();
  public:
  const ::FriendProto::AdminInfo& data(int index) const;
  ::FriendProto::AdminInfo* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FriendProto::AdminInfo >&
      data() const;

  // .FriendProto.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::FriendProto::ResultCode& result() const;
  PROTOBUF_NODISCARD ::FriendProto::ResultCode* release_result();
  ::FriendProto::ResultCode* mutable_result();
  void set_allocated_result(::FriendProto::ResultCode* result);
  private:
  const ::FriendProto::ResultCode& _internal_result() const;
  ::FriendProto::ResultCode* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::FriendProto::ResultCode* result);
  ::FriendProto::ResultCode* unsafe_arena_release_result();

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:FriendProto.GetFriendResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FriendProto::AdminInfo > data_;
  ::FriendProto::ResultCode* result_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Friend_2eproto;
};
// -------------------------------------------------------------------

class DelFriendRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FriendProto.DelFriendRequest) */ {
 public:
  inline DelFriendRequest() : DelFriendRequest(nullptr) {}
  ~DelFriendRequest() override;
  explicit constexpr DelFriendRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DelFriendRequest(const DelFriendRequest& from);
  DelFriendRequest(DelFriendRequest&& from) noexcept
    : DelFriendRequest() {
    *this = ::std::move(from);
  }

  inline DelFriendRequest& operator=(const DelFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelFriendRequest& operator=(DelFriendRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DelFriendRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DelFriendRequest* internal_default_instance() {
    return reinterpret_cast<const DelFriendRequest*>(
               &_DelFriendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DelFriendRequest& a, DelFriendRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DelFriendRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelFriendRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DelFriendRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DelFriendRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DelFriendRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DelFriendRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelFriendRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FriendProto.DelFriendRequest";
  }
  protected:
  explicit DelFriendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdminNameFieldNumber = 1,
    kPeerNameFieldNumber = 2,
  };
  // bytes adminName = 1;
  void clear_adminname();
  const std::string& adminname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_adminname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_adminname();
  PROTOBUF_NODISCARD std::string* release_adminname();
  void set_allocated_adminname(std::string* adminname);
  private:
  const std::string& _internal_adminname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_adminname(const std::string& value);
  std::string* _internal_mutable_adminname();
  public:

  // bytes peerName = 2;
  void clear_peername();
  const std::string& peername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_peername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_peername();
  PROTOBUF_NODISCARD std::string* release_peername();
  void set_allocated_peername(std::string* peername);
  private:
  const std::string& _internal_peername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_peername(const std::string& value);
  std::string* _internal_mutable_peername();
  public:

  // @@protoc_insertion_point(class_scope:FriendProto.DelFriendRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr adminname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr peername_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Friend_2eproto;
};
// -------------------------------------------------------------------

class DelFriendResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FriendProto.DelFriendResponse) */ {
 public:
  inline DelFriendResponse() : DelFriendResponse(nullptr) {}
  ~DelFriendResponse() override;
  explicit constexpr DelFriendResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DelFriendResponse(const DelFriendResponse& from);
  DelFriendResponse(DelFriendResponse&& from) noexcept
    : DelFriendResponse() {
    *this = ::std::move(from);
  }

  inline DelFriendResponse& operator=(const DelFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelFriendResponse& operator=(DelFriendResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DelFriendResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DelFriendResponse* internal_default_instance() {
    return reinterpret_cast<const DelFriendResponse*>(
               &_DelFriendResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DelFriendResponse& a, DelFriendResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DelFriendResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelFriendResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DelFriendResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DelFriendResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DelFriendResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DelFriendResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelFriendResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FriendProto.DelFriendResponse";
  }
  protected:
  explicit DelFriendResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // .FriendProto.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::FriendProto::ResultCode& result() const;
  PROTOBUF_NODISCARD ::FriendProto::ResultCode* release_result();
  ::FriendProto::ResultCode* mutable_result();
  void set_allocated_result(::FriendProto::ResultCode* result);
  private:
  const ::FriendProto::ResultCode& _internal_result() const;
  ::FriendProto::ResultCode* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::FriendProto::ResultCode* result);
  ::FriendProto::ResultCode* unsafe_arena_release_result();

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:FriendProto.DelFriendResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::FriendProto::ResultCode* result_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Friend_2eproto;
};
// ===================================================================

class FriendServiceRpc_Stub;

class FriendServiceRpc : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline FriendServiceRpc() {};
 public:
  virtual ~FriendServiceRpc();

  typedef FriendServiceRpc_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void AddFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::FriendProto::AddFriendRequest* request,
                       ::FriendProto::AddFriendResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::FriendProto::GetFriendRequest* request,
                       ::FriendProto::GetFriendResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void DelFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::FriendProto::DelFriendRequest* request,
                       ::FriendProto::DelFriendResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FriendServiceRpc);
};

class FriendServiceRpc_Stub : public FriendServiceRpc {
 public:
  FriendServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  FriendServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~FriendServiceRpc_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements FriendServiceRpc ------------------------------------------

  void AddFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::FriendProto::AddFriendRequest* request,
                       ::FriendProto::AddFriendResponse* response,
                       ::google::protobuf::Closure* done);
  void GetFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::FriendProto::GetFriendRequest* request,
                       ::FriendProto::GetFriendResponse* response,
                       ::google::protobuf::Closure* done);
  void DelFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::FriendProto::DelFriendRequest* request,
                       ::FriendProto::DelFriendResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FriendServiceRpc_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AdminInfo

// bytes Name = 1;
inline void AdminInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& AdminInfo::name() const {
  // @@protoc_insertion_point(field_get:FriendProto.AdminInfo.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AdminInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FriendProto.AdminInfo.Name)
}
inline std::string* AdminInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:FriendProto.AdminInfo.Name)
  return _s;
}
inline const std::string& AdminInfo::_internal_name() const {
  return name_.Get();
}
inline void AdminInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AdminInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AdminInfo::release_name() {
  // @@protoc_insertion_point(field_release:FriendProto.AdminInfo.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AdminInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FriendProto.AdminInfo.Name)
}

// bytes Email = 2;
inline void AdminInfo::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& AdminInfo::email() const {
  // @@protoc_insertion_point(field_get:FriendProto.AdminInfo.Email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AdminInfo::set_email(ArgT0&& arg0, ArgT... args) {
 
 email_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FriendProto.AdminInfo.Email)
}
inline std::string* AdminInfo::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:FriendProto.AdminInfo.Email)
  return _s;
}
inline const std::string& AdminInfo::_internal_email() const {
  return email_.Get();
}
inline void AdminInfo::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AdminInfo::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AdminInfo::release_email() {
  // @@protoc_insertion_point(field_release:FriendProto.AdminInfo.Email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AdminInfo::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (email_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FriendProto.AdminInfo.Email)
}

// bytes Phone = 3;
inline void AdminInfo::clear_phone() {
  phone_.ClearToEmpty();
}
inline const std::string& AdminInfo::phone() const {
  // @@protoc_insertion_point(field_get:FriendProto.AdminInfo.Phone)
  return _internal_phone();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AdminInfo::set_phone(ArgT0&& arg0, ArgT... args) {
 
 phone_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FriendProto.AdminInfo.Phone)
}
inline std::string* AdminInfo::mutable_phone() {
  std::string* _s = _internal_mutable_phone();
  // @@protoc_insertion_point(field_mutable:FriendProto.AdminInfo.Phone)
  return _s;
}
inline const std::string& AdminInfo::_internal_phone() const {
  return phone_.Get();
}
inline void AdminInfo::_internal_set_phone(const std::string& value) {
  
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AdminInfo::_internal_mutable_phone() {
  
  return phone_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AdminInfo::release_phone() {
  // @@protoc_insertion_point(field_release:FriendProto.AdminInfo.Phone)
  return phone_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AdminInfo::set_allocated_phone(std::string* phone) {
  if (phone != nullptr) {
    
  } else {
    
  }
  phone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (phone_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    phone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FriendProto.AdminInfo.Phone)
}

// bytes Desc = 4;
inline void AdminInfo::clear_desc() {
  desc_.ClearToEmpty();
}
inline const std::string& AdminInfo::desc() const {
  // @@protoc_insertion_point(field_get:FriendProto.AdminInfo.Desc)
  return _internal_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AdminInfo::set_desc(ArgT0&& arg0, ArgT... args) {
 
 desc_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FriendProto.AdminInfo.Desc)
}
inline std::string* AdminInfo::mutable_desc() {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:FriendProto.AdminInfo.Desc)
  return _s;
}
inline const std::string& AdminInfo::_internal_desc() const {
  return desc_.Get();
}
inline void AdminInfo::_internal_set_desc(const std::string& value) {
  
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AdminInfo::_internal_mutable_desc() {
  
  return desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AdminInfo::release_desc() {
  // @@protoc_insertion_point(field_release:FriendProto.AdminInfo.Desc)
  return desc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AdminInfo::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (desc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FriendProto.AdminInfo.Desc)
}

// bytes DepartName = 5;
inline void AdminInfo::clear_departname() {
  departname_.ClearToEmpty();
}
inline const std::string& AdminInfo::departname() const {
  // @@protoc_insertion_point(field_get:FriendProto.AdminInfo.DepartName)
  return _internal_departname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AdminInfo::set_departname(ArgT0&& arg0, ArgT... args) {
 
 departname_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FriendProto.AdminInfo.DepartName)
}
inline std::string* AdminInfo::mutable_departname() {
  std::string* _s = _internal_mutable_departname();
  // @@protoc_insertion_point(field_mutable:FriendProto.AdminInfo.DepartName)
  return _s;
}
inline const std::string& AdminInfo::_internal_departname() const {
  return departname_.Get();
}
inline void AdminInfo::_internal_set_departname(const std::string& value) {
  
  departname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AdminInfo::_internal_mutable_departname() {
  
  return departname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AdminInfo::release_departname() {
  // @@protoc_insertion_point(field_release:FriendProto.AdminInfo.DepartName)
  return departname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AdminInfo::set_allocated_departname(std::string* departname) {
  if (departname != nullptr) {
    
  } else {
    
  }
  departname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), departname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (departname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    departname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FriendProto.AdminInfo.DepartName)
}

// bytes Status = 6;
inline void AdminInfo::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& AdminInfo::status() const {
  // @@protoc_insertion_point(field_get:FriendProto.AdminInfo.Status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AdminInfo::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FriendProto.AdminInfo.Status)
}
inline std::string* AdminInfo::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:FriendProto.AdminInfo.Status)
  return _s;
}
inline const std::string& AdminInfo::_internal_status() const {
  return status_.Get();
}
inline void AdminInfo::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AdminInfo::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AdminInfo::release_status() {
  // @@protoc_insertion_point(field_release:FriendProto.AdminInfo.Status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AdminInfo::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FriendProto.AdminInfo.Status)
}

// -------------------------------------------------------------------

// ResultCode

// int32 errcode = 1;
inline void ResultCode::clear_errcode() {
  errcode_ = 0;
}
inline int32_t ResultCode::_internal_errcode() const {
  return errcode_;
}
inline int32_t ResultCode::errcode() const {
  // @@protoc_insertion_point(field_get:FriendProto.ResultCode.errcode)
  return _internal_errcode();
}
inline void ResultCode::_internal_set_errcode(int32_t value) {
  
  errcode_ = value;
}
inline void ResultCode::set_errcode(int32_t value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:FriendProto.ResultCode.errcode)
}

// bytes errmsg = 2;
inline void ResultCode::clear_errmsg() {
  errmsg_.ClearToEmpty();
}
inline const std::string& ResultCode::errmsg() const {
  // @@protoc_insertion_point(field_get:FriendProto.ResultCode.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResultCode::set_errmsg(ArgT0&& arg0, ArgT... args) {
 
 errmsg_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FriendProto.ResultCode.errmsg)
}
inline std::string* ResultCode::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:FriendProto.ResultCode.errmsg)
  return _s;
}
inline const std::string& ResultCode::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void ResultCode::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResultCode::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResultCode::release_errmsg() {
  // @@protoc_insertion_point(field_release:FriendProto.ResultCode.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResultCode::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (errmsg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FriendProto.ResultCode.errmsg)
}

// -------------------------------------------------------------------

// AddFriendRequest

// bytes adminName = 1;
inline void AddFriendRequest::clear_adminname() {
  adminname_.ClearToEmpty();
}
inline const std::string& AddFriendRequest::adminname() const {
  // @@protoc_insertion_point(field_get:FriendProto.AddFriendRequest.adminName)
  return _internal_adminname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddFriendRequest::set_adminname(ArgT0&& arg0, ArgT... args) {
 
 adminname_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FriendProto.AddFriendRequest.adminName)
}
inline std::string* AddFriendRequest::mutable_adminname() {
  std::string* _s = _internal_mutable_adminname();
  // @@protoc_insertion_point(field_mutable:FriendProto.AddFriendRequest.adminName)
  return _s;
}
inline const std::string& AddFriendRequest::_internal_adminname() const {
  return adminname_.Get();
}
inline void AddFriendRequest::_internal_set_adminname(const std::string& value) {
  
  adminname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AddFriendRequest::_internal_mutable_adminname() {
  
  return adminname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AddFriendRequest::release_adminname() {
  // @@protoc_insertion_point(field_release:FriendProto.AddFriendRequest.adminName)
  return adminname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AddFriendRequest::set_allocated_adminname(std::string* adminname) {
  if (adminname != nullptr) {
    
  } else {
    
  }
  adminname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), adminname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (adminname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    adminname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FriendProto.AddFriendRequest.adminName)
}

// bytes peerName = 2;
inline void AddFriendRequest::clear_peername() {
  peername_.ClearToEmpty();
}
inline const std::string& AddFriendRequest::peername() const {
  // @@protoc_insertion_point(field_get:FriendProto.AddFriendRequest.peerName)
  return _internal_peername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddFriendRequest::set_peername(ArgT0&& arg0, ArgT... args) {
 
 peername_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FriendProto.AddFriendRequest.peerName)
}
inline std::string* AddFriendRequest::mutable_peername() {
  std::string* _s = _internal_mutable_peername();
  // @@protoc_insertion_point(field_mutable:FriendProto.AddFriendRequest.peerName)
  return _s;
}
inline const std::string& AddFriendRequest::_internal_peername() const {
  return peername_.Get();
}
inline void AddFriendRequest::_internal_set_peername(const std::string& value) {
  
  peername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AddFriendRequest::_internal_mutable_peername() {
  
  return peername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AddFriendRequest::release_peername() {
  // @@protoc_insertion_point(field_release:FriendProto.AddFriendRequest.peerName)
  return peername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AddFriendRequest::set_allocated_peername(std::string* peername) {
  if (peername != nullptr) {
    
  } else {
    
  }
  peername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), peername,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (peername_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    peername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FriendProto.AddFriendRequest.peerName)
}

// -------------------------------------------------------------------

// AddFriendResponse

// .FriendProto.ResultCode result = 1;
inline bool AddFriendResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool AddFriendResponse::has_result() const {
  return _internal_has_result();
}
inline void AddFriendResponse::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::FriendProto::ResultCode& AddFriendResponse::_internal_result() const {
  const ::FriendProto::ResultCode* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::FriendProto::ResultCode&>(
      ::FriendProto::_ResultCode_default_instance_);
}
inline const ::FriendProto::ResultCode& AddFriendResponse::result() const {
  // @@protoc_insertion_point(field_get:FriendProto.AddFriendResponse.result)
  return _internal_result();
}
inline void AddFriendResponse::unsafe_arena_set_allocated_result(
    ::FriendProto::ResultCode* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FriendProto.AddFriendResponse.result)
}
inline ::FriendProto::ResultCode* AddFriendResponse::release_result() {
  
  ::FriendProto::ResultCode* temp = result_;
  result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::FriendProto::ResultCode* AddFriendResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:FriendProto.AddFriendResponse.result)
  
  ::FriendProto::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::FriendProto::ResultCode* AddFriendResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::FriendProto::ResultCode>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::FriendProto::ResultCode* AddFriendResponse::mutable_result() {
  ::FriendProto::ResultCode* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:FriendProto.AddFriendResponse.result)
  return _msg;
}
inline void AddFriendResponse::set_allocated_result(::FriendProto::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::FriendProto::ResultCode>::GetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:FriendProto.AddFriendResponse.result)
}

// bool success = 2;
inline void AddFriendResponse::clear_success() {
  success_ = false;
}
inline bool AddFriendResponse::_internal_success() const {
  return success_;
}
inline bool AddFriendResponse::success() const {
  // @@protoc_insertion_point(field_get:FriendProto.AddFriendResponse.success)
  return _internal_success();
}
inline void AddFriendResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void AddFriendResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:FriendProto.AddFriendResponse.success)
}

// -------------------------------------------------------------------

// GetFriendRequest

// bytes adminName = 1;
inline void GetFriendRequest::clear_adminname() {
  adminname_.ClearToEmpty();
}
inline const std::string& GetFriendRequest::adminname() const {
  // @@protoc_insertion_point(field_get:FriendProto.GetFriendRequest.adminName)
  return _internal_adminname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetFriendRequest::set_adminname(ArgT0&& arg0, ArgT... args) {
 
 adminname_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FriendProto.GetFriendRequest.adminName)
}
inline std::string* GetFriendRequest::mutable_adminname() {
  std::string* _s = _internal_mutable_adminname();
  // @@protoc_insertion_point(field_mutable:FriendProto.GetFriendRequest.adminName)
  return _s;
}
inline const std::string& GetFriendRequest::_internal_adminname() const {
  return adminname_.Get();
}
inline void GetFriendRequest::_internal_set_adminname(const std::string& value) {
  
  adminname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetFriendRequest::_internal_mutable_adminname() {
  
  return adminname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetFriendRequest::release_adminname() {
  // @@protoc_insertion_point(field_release:FriendProto.GetFriendRequest.adminName)
  return adminname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetFriendRequest::set_allocated_adminname(std::string* adminname) {
  if (adminname != nullptr) {
    
  } else {
    
  }
  adminname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), adminname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (adminname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    adminname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FriendProto.GetFriendRequest.adminName)
}

// -------------------------------------------------------------------

// GetFriendResponse

// .FriendProto.ResultCode result = 1;
inline bool GetFriendResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool GetFriendResponse::has_result() const {
  return _internal_has_result();
}
inline void GetFriendResponse::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::FriendProto::ResultCode& GetFriendResponse::_internal_result() const {
  const ::FriendProto::ResultCode* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::FriendProto::ResultCode&>(
      ::FriendProto::_ResultCode_default_instance_);
}
inline const ::FriendProto::ResultCode& GetFriendResponse::result() const {
  // @@protoc_insertion_point(field_get:FriendProto.GetFriendResponse.result)
  return _internal_result();
}
inline void GetFriendResponse::unsafe_arena_set_allocated_result(
    ::FriendProto::ResultCode* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FriendProto.GetFriendResponse.result)
}
inline ::FriendProto::ResultCode* GetFriendResponse::release_result() {
  
  ::FriendProto::ResultCode* temp = result_;
  result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::FriendProto::ResultCode* GetFriendResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:FriendProto.GetFriendResponse.result)
  
  ::FriendProto::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::FriendProto::ResultCode* GetFriendResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::FriendProto::ResultCode>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::FriendProto::ResultCode* GetFriendResponse::mutable_result() {
  ::FriendProto::ResultCode* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:FriendProto.GetFriendResponse.result)
  return _msg;
}
inline void GetFriendResponse::set_allocated_result(::FriendProto::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::FriendProto::ResultCode>::GetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:FriendProto.GetFriendResponse.result)
}

// bool success = 2;
inline void GetFriendResponse::clear_success() {
  success_ = false;
}
inline bool GetFriendResponse::_internal_success() const {
  return success_;
}
inline bool GetFriendResponse::success() const {
  // @@protoc_insertion_point(field_get:FriendProto.GetFriendResponse.success)
  return _internal_success();
}
inline void GetFriendResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void GetFriendResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:FriendProto.GetFriendResponse.success)
}

// repeated .FriendProto.AdminInfo Data = 3;
inline int GetFriendResponse::_internal_data_size() const {
  return data_.size();
}
inline int GetFriendResponse::data_size() const {
  return _internal_data_size();
}
inline void GetFriendResponse::clear_data() {
  data_.Clear();
}
inline ::FriendProto::AdminInfo* GetFriendResponse::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:FriendProto.GetFriendResponse.Data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FriendProto::AdminInfo >*
GetFriendResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:FriendProto.GetFriendResponse.Data)
  return &data_;
}
inline const ::FriendProto::AdminInfo& GetFriendResponse::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::FriendProto::AdminInfo& GetFriendResponse::data(int index) const {
  // @@protoc_insertion_point(field_get:FriendProto.GetFriendResponse.Data)
  return _internal_data(index);
}
inline ::FriendProto::AdminInfo* GetFriendResponse::_internal_add_data() {
  return data_.Add();
}
inline ::FriendProto::AdminInfo* GetFriendResponse::add_data() {
  ::FriendProto::AdminInfo* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:FriendProto.GetFriendResponse.Data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FriendProto::AdminInfo >&
GetFriendResponse::data() const {
  // @@protoc_insertion_point(field_list:FriendProto.GetFriendResponse.Data)
  return data_;
}

// -------------------------------------------------------------------

// DelFriendRequest

// bytes adminName = 1;
inline void DelFriendRequest::clear_adminname() {
  adminname_.ClearToEmpty();
}
inline const std::string& DelFriendRequest::adminname() const {
  // @@protoc_insertion_point(field_get:FriendProto.DelFriendRequest.adminName)
  return _internal_adminname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DelFriendRequest::set_adminname(ArgT0&& arg0, ArgT... args) {
 
 adminname_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FriendProto.DelFriendRequest.adminName)
}
inline std::string* DelFriendRequest::mutable_adminname() {
  std::string* _s = _internal_mutable_adminname();
  // @@protoc_insertion_point(field_mutable:FriendProto.DelFriendRequest.adminName)
  return _s;
}
inline const std::string& DelFriendRequest::_internal_adminname() const {
  return adminname_.Get();
}
inline void DelFriendRequest::_internal_set_adminname(const std::string& value) {
  
  adminname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DelFriendRequest::_internal_mutable_adminname() {
  
  return adminname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DelFriendRequest::release_adminname() {
  // @@protoc_insertion_point(field_release:FriendProto.DelFriendRequest.adminName)
  return adminname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DelFriendRequest::set_allocated_adminname(std::string* adminname) {
  if (adminname != nullptr) {
    
  } else {
    
  }
  adminname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), adminname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (adminname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    adminname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FriendProto.DelFriendRequest.adminName)
}

// bytes peerName = 2;
inline void DelFriendRequest::clear_peername() {
  peername_.ClearToEmpty();
}
inline const std::string& DelFriendRequest::peername() const {
  // @@protoc_insertion_point(field_get:FriendProto.DelFriendRequest.peerName)
  return _internal_peername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DelFriendRequest::set_peername(ArgT0&& arg0, ArgT... args) {
 
 peername_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FriendProto.DelFriendRequest.peerName)
}
inline std::string* DelFriendRequest::mutable_peername() {
  std::string* _s = _internal_mutable_peername();
  // @@protoc_insertion_point(field_mutable:FriendProto.DelFriendRequest.peerName)
  return _s;
}
inline const std::string& DelFriendRequest::_internal_peername() const {
  return peername_.Get();
}
inline void DelFriendRequest::_internal_set_peername(const std::string& value) {
  
  peername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DelFriendRequest::_internal_mutable_peername() {
  
  return peername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DelFriendRequest::release_peername() {
  // @@protoc_insertion_point(field_release:FriendProto.DelFriendRequest.peerName)
  return peername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DelFriendRequest::set_allocated_peername(std::string* peername) {
  if (peername != nullptr) {
    
  } else {
    
  }
  peername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), peername,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (peername_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    peername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FriendProto.DelFriendRequest.peerName)
}

// -------------------------------------------------------------------

// DelFriendResponse

// .FriendProto.ResultCode result = 1;
inline bool DelFriendResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool DelFriendResponse::has_result() const {
  return _internal_has_result();
}
inline void DelFriendResponse::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::FriendProto::ResultCode& DelFriendResponse::_internal_result() const {
  const ::FriendProto::ResultCode* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::FriendProto::ResultCode&>(
      ::FriendProto::_ResultCode_default_instance_);
}
inline const ::FriendProto::ResultCode& DelFriendResponse::result() const {
  // @@protoc_insertion_point(field_get:FriendProto.DelFriendResponse.result)
  return _internal_result();
}
inline void DelFriendResponse::unsafe_arena_set_allocated_result(
    ::FriendProto::ResultCode* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FriendProto.DelFriendResponse.result)
}
inline ::FriendProto::ResultCode* DelFriendResponse::release_result() {
  
  ::FriendProto::ResultCode* temp = result_;
  result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::FriendProto::ResultCode* DelFriendResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:FriendProto.DelFriendResponse.result)
  
  ::FriendProto::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::FriendProto::ResultCode* DelFriendResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::FriendProto::ResultCode>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::FriendProto::ResultCode* DelFriendResponse::mutable_result() {
  ::FriendProto::ResultCode* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:FriendProto.DelFriendResponse.result)
  return _msg;
}
inline void DelFriendResponse::set_allocated_result(::FriendProto::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::FriendProto::ResultCode>::GetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:FriendProto.DelFriendResponse.result)
}

// bool success = 2;
inline void DelFriendResponse::clear_success() {
  success_ = false;
}
inline bool DelFriendResponse::_internal_success() const {
  return success_;
}
inline bool DelFriendResponse::success() const {
  // @@protoc_insertion_point(field_get:FriendProto.DelFriendResponse.success)
  return _internal_success();
}
inline void DelFriendResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void DelFriendResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:FriendProto.DelFriendResponse.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace FriendProto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Friend_2eproto
