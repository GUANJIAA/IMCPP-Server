// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Group.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Group_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Group_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Group_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Group_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Group_2eproto;
namespace GroupProto {
class AddGroupRequest;
class AddGroupRequestDefaultTypeInternal;
extern AddGroupRequestDefaultTypeInternal _AddGroupRequest_default_instance_;
class AddGroupResponse;
class AddGroupResponseDefaultTypeInternal;
extern AddGroupResponseDefaultTypeInternal _AddGroupResponse_default_instance_;
class CreateGroupRequest;
class CreateGroupRequestDefaultTypeInternal;
extern CreateGroupRequestDefaultTypeInternal _CreateGroupRequest_default_instance_;
class CreateGroupResponse;
class CreateGroupResponseDefaultTypeInternal;
extern CreateGroupResponseDefaultTypeInternal _CreateGroupResponse_default_instance_;
class GroupInfo;
class GroupInfoDefaultTypeInternal;
extern GroupInfoDefaultTypeInternal _GroupInfo_default_instance_;
class GroupUser;
class GroupUserDefaultTypeInternal;
extern GroupUserDefaultTypeInternal _GroupUser_default_instance_;
class QueryGroupRequest;
class QueryGroupRequestDefaultTypeInternal;
extern QueryGroupRequestDefaultTypeInternal _QueryGroupRequest_default_instance_;
class QueryGroupResponse;
class QueryGroupResponseDefaultTypeInternal;
extern QueryGroupResponseDefaultTypeInternal _QueryGroupResponse_default_instance_;
class QueryGroupUsersRequest;
class QueryGroupUsersRequestDefaultTypeInternal;
extern QueryGroupUsersRequestDefaultTypeInternal _QueryGroupUsersRequest_default_instance_;
class QueryGroupUsersResponse;
class QueryGroupUsersResponseDefaultTypeInternal;
extern QueryGroupUsersResponseDefaultTypeInternal _QueryGroupUsersResponse_default_instance_;
class QuitGroupRequest;
class QuitGroupRequestDefaultTypeInternal;
extern QuitGroupRequestDefaultTypeInternal _QuitGroupRequest_default_instance_;
class QuitGroupResponse;
class QuitGroupResponseDefaultTypeInternal;
extern QuitGroupResponseDefaultTypeInternal _QuitGroupResponse_default_instance_;
class ResultCode;
class ResultCodeDefaultTypeInternal;
extern ResultCodeDefaultTypeInternal _ResultCode_default_instance_;
}  // namespace GroupProto
PROTOBUF_NAMESPACE_OPEN
template<> ::GroupProto::AddGroupRequest* Arena::CreateMaybeMessage<::GroupProto::AddGroupRequest>(Arena*);
template<> ::GroupProto::AddGroupResponse* Arena::CreateMaybeMessage<::GroupProto::AddGroupResponse>(Arena*);
template<> ::GroupProto::CreateGroupRequest* Arena::CreateMaybeMessage<::GroupProto::CreateGroupRequest>(Arena*);
template<> ::GroupProto::CreateGroupResponse* Arena::CreateMaybeMessage<::GroupProto::CreateGroupResponse>(Arena*);
template<> ::GroupProto::GroupInfo* Arena::CreateMaybeMessage<::GroupProto::GroupInfo>(Arena*);
template<> ::GroupProto::GroupUser* Arena::CreateMaybeMessage<::GroupProto::GroupUser>(Arena*);
template<> ::GroupProto::QueryGroupRequest* Arena::CreateMaybeMessage<::GroupProto::QueryGroupRequest>(Arena*);
template<> ::GroupProto::QueryGroupResponse* Arena::CreateMaybeMessage<::GroupProto::QueryGroupResponse>(Arena*);
template<> ::GroupProto::QueryGroupUsersRequest* Arena::CreateMaybeMessage<::GroupProto::QueryGroupUsersRequest>(Arena*);
template<> ::GroupProto::QueryGroupUsersResponse* Arena::CreateMaybeMessage<::GroupProto::QueryGroupUsersResponse>(Arena*);
template<> ::GroupProto::QuitGroupRequest* Arena::CreateMaybeMessage<::GroupProto::QuitGroupRequest>(Arena*);
template<> ::GroupProto::QuitGroupResponse* Arena::CreateMaybeMessage<::GroupProto::QuitGroupResponse>(Arena*);
template<> ::GroupProto::ResultCode* Arena::CreateMaybeMessage<::GroupProto::ResultCode>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace GroupProto {

// ===================================================================

class GroupUser :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GroupProto.GroupUser) */ {
 public:
  GroupUser();
  virtual ~GroupUser();

  GroupUser(const GroupUser& from);
  GroupUser(GroupUser&& from) noexcept
    : GroupUser() {
    *this = ::std::move(from);
  }

  inline GroupUser& operator=(const GroupUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupUser& operator=(GroupUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupUser* internal_default_instance() {
    return reinterpret_cast<const GroupUser*>(
               &_GroupUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GroupUser& a, GroupUser& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupUser* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupUser* New() const final {
    return CreateMaybeMessage<GroupUser>(nullptr);
  }

  GroupUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupUser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupUser& from);
  void MergeFrom(const GroupUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GroupProto.GroupUser";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Group_2eproto);
    return ::descriptor_table_Group_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kUserEmailFieldNumber = 2,
    kUserPhoneFieldNumber = 3,
    kUserRoleFieldNumber = 4,
  };
  // bytes userName = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const void* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // bytes userEmail = 2;
  void clear_useremail();
  const std::string& useremail() const;
  void set_useremail(const std::string& value);
  void set_useremail(std::string&& value);
  void set_useremail(const char* value);
  void set_useremail(const void* value, size_t size);
  std::string* mutable_useremail();
  std::string* release_useremail();
  void set_allocated_useremail(std::string* useremail);
  private:
  const std::string& _internal_useremail() const;
  void _internal_set_useremail(const std::string& value);
  std::string* _internal_mutable_useremail();
  public:

  // bytes userPhone = 3;
  void clear_userphone();
  const std::string& userphone() const;
  void set_userphone(const std::string& value);
  void set_userphone(std::string&& value);
  void set_userphone(const char* value);
  void set_userphone(const void* value, size_t size);
  std::string* mutable_userphone();
  std::string* release_userphone();
  void set_allocated_userphone(std::string* userphone);
  private:
  const std::string& _internal_userphone() const;
  void _internal_set_userphone(const std::string& value);
  std::string* _internal_mutable_userphone();
  public:

  // bytes userRole = 4;
  void clear_userrole();
  const std::string& userrole() const;
  void set_userrole(const std::string& value);
  void set_userrole(std::string&& value);
  void set_userrole(const char* value);
  void set_userrole(const void* value, size_t size);
  std::string* mutable_userrole();
  std::string* release_userrole();
  void set_allocated_userrole(std::string* userrole);
  private:
  const std::string& _internal_userrole() const;
  void _internal_set_userrole(const std::string& value);
  std::string* _internal_mutable_userrole();
  public:

  // @@protoc_insertion_point(class_scope:GroupProto.GroupUser)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr useremail_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userphone_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userrole_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Group_2eproto;
};
// -------------------------------------------------------------------

class GroupInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GroupProto.GroupInfo) */ {
 public:
  GroupInfo();
  virtual ~GroupInfo();

  GroupInfo(const GroupInfo& from);
  GroupInfo(GroupInfo&& from) noexcept
    : GroupInfo() {
    *this = ::std::move(from);
  }

  inline GroupInfo& operator=(const GroupInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupInfo& operator=(GroupInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupInfo* internal_default_instance() {
    return reinterpret_cast<const GroupInfo*>(
               &_GroupInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GroupInfo& a, GroupInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupInfo* New() const final {
    return CreateMaybeMessage<GroupInfo>(nullptr);
  }

  GroupInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupInfo& from);
  void MergeFrom(const GroupInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GroupProto.GroupInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Group_2eproto);
    return ::descriptor_table_Group_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupUsersFieldNumber = 4,
    kGroupNameFieldNumber = 2,
    kGroupDescFieldNumber = 3,
    kGroupIdFieldNumber = 1,
  };
  // repeated .GroupProto.GroupUser groupUsers = 4;
  int groupusers_size() const;
  private:
  int _internal_groupusers_size() const;
  public:
  void clear_groupusers();
  ::GroupProto::GroupUser* mutable_groupusers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GroupProto::GroupUser >*
      mutable_groupusers();
  private:
  const ::GroupProto::GroupUser& _internal_groupusers(int index) const;
  ::GroupProto::GroupUser* _internal_add_groupusers();
  public:
  const ::GroupProto::GroupUser& groupusers(int index) const;
  ::GroupProto::GroupUser* add_groupusers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GroupProto::GroupUser >&
      groupusers() const;

  // bytes groupName = 2;
  void clear_groupname();
  const std::string& groupname() const;
  void set_groupname(const std::string& value);
  void set_groupname(std::string&& value);
  void set_groupname(const char* value);
  void set_groupname(const void* value, size_t size);
  std::string* mutable_groupname();
  std::string* release_groupname();
  void set_allocated_groupname(std::string* groupname);
  private:
  const std::string& _internal_groupname() const;
  void _internal_set_groupname(const std::string& value);
  std::string* _internal_mutable_groupname();
  public:

  // bytes groupDesc = 3;
  void clear_groupdesc();
  const std::string& groupdesc() const;
  void set_groupdesc(const std::string& value);
  void set_groupdesc(std::string&& value);
  void set_groupdesc(const char* value);
  void set_groupdesc(const void* value, size_t size);
  std::string* mutable_groupdesc();
  std::string* release_groupdesc();
  void set_allocated_groupdesc(std::string* groupdesc);
  private:
  const std::string& _internal_groupdesc() const;
  void _internal_set_groupdesc(const std::string& value);
  std::string* _internal_mutable_groupdesc();
  public:

  // int32 groupId = 1;
  void clear_groupid();
  ::PROTOBUF_NAMESPACE_ID::int32 groupid() const;
  void set_groupid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_groupid() const;
  void _internal_set_groupid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GroupProto.GroupInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GroupProto::GroupUser > groupusers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupdesc_;
  ::PROTOBUF_NAMESPACE_ID::int32 groupid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Group_2eproto;
};
// -------------------------------------------------------------------

class ResultCode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GroupProto.ResultCode) */ {
 public:
  ResultCode();
  virtual ~ResultCode();

  ResultCode(const ResultCode& from);
  ResultCode(ResultCode&& from) noexcept
    : ResultCode() {
    *this = ::std::move(from);
  }

  inline ResultCode& operator=(const ResultCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultCode& operator=(ResultCode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResultCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResultCode* internal_default_instance() {
    return reinterpret_cast<const ResultCode*>(
               &_ResultCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ResultCode& a, ResultCode& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultCode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResultCode* New() const final {
    return CreateMaybeMessage<ResultCode>(nullptr);
  }

  ResultCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResultCode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResultCode& from);
  void MergeFrom(const ResultCode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultCode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GroupProto.ResultCode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Group_2eproto);
    return ::descriptor_table_Group_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 2,
    kErrcodeFieldNumber = 1,
  };
  // bytes errmsg = 2;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const void* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // int32 errcode = 1;
  void clear_errcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errcode() const;
  void set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errcode() const;
  void _internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GroupProto.ResultCode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::int32 errcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Group_2eproto;
};
// -------------------------------------------------------------------

class CreateGroupRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GroupProto.CreateGroupRequest) */ {
 public:
  CreateGroupRequest();
  virtual ~CreateGroupRequest();

  CreateGroupRequest(const CreateGroupRequest& from);
  CreateGroupRequest(CreateGroupRequest&& from) noexcept
    : CreateGroupRequest() {
    *this = ::std::move(from);
  }

  inline CreateGroupRequest& operator=(const CreateGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateGroupRequest& operator=(CreateGroupRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateGroupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateGroupRequest* internal_default_instance() {
    return reinterpret_cast<const CreateGroupRequest*>(
               &_CreateGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateGroupRequest& a, CreateGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateGroupRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateGroupRequest* New() const final {
    return CreateMaybeMessage<CreateGroupRequest>(nullptr);
  }

  CreateGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateGroupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateGroupRequest& from);
  void MergeFrom(const CreateGroupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateGroupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GroupProto.CreateGroupRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Group_2eproto);
    return ::descriptor_table_Group_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupFieldNumber = 1,
  };
  // .GroupProto.GroupInfo group = 1;
  bool has_group() const;
  private:
  bool _internal_has_group() const;
  public:
  void clear_group();
  const ::GroupProto::GroupInfo& group() const;
  ::GroupProto::GroupInfo* release_group();
  ::GroupProto::GroupInfo* mutable_group();
  void set_allocated_group(::GroupProto::GroupInfo* group);
  private:
  const ::GroupProto::GroupInfo& _internal_group() const;
  ::GroupProto::GroupInfo* _internal_mutable_group();
  public:

  // @@protoc_insertion_point(class_scope:GroupProto.CreateGroupRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::GroupProto::GroupInfo* group_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Group_2eproto;
};
// -------------------------------------------------------------------

class CreateGroupResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GroupProto.CreateGroupResponse) */ {
 public:
  CreateGroupResponse();
  virtual ~CreateGroupResponse();

  CreateGroupResponse(const CreateGroupResponse& from);
  CreateGroupResponse(CreateGroupResponse&& from) noexcept
    : CreateGroupResponse() {
    *this = ::std::move(from);
  }

  inline CreateGroupResponse& operator=(const CreateGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateGroupResponse& operator=(CreateGroupResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateGroupResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateGroupResponse* internal_default_instance() {
    return reinterpret_cast<const CreateGroupResponse*>(
               &_CreateGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreateGroupResponse& a, CreateGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateGroupResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateGroupResponse* New() const final {
    return CreateMaybeMessage<CreateGroupResponse>(nullptr);
  }

  CreateGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateGroupResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateGroupResponse& from);
  void MergeFrom(const CreateGroupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateGroupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GroupProto.CreateGroupResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Group_2eproto);
    return ::descriptor_table_Group_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // .GroupProto.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::GroupProto::ResultCode& result() const;
  ::GroupProto::ResultCode* release_result();
  ::GroupProto::ResultCode* mutable_result();
  void set_allocated_result(::GroupProto::ResultCode* result);
  private:
  const ::GroupProto::ResultCode& _internal_result() const;
  ::GroupProto::ResultCode* _internal_mutable_result();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:GroupProto.CreateGroupResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::GroupProto::ResultCode* result_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Group_2eproto;
};
// -------------------------------------------------------------------

class AddGroupRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GroupProto.AddGroupRequest) */ {
 public:
  AddGroupRequest();
  virtual ~AddGroupRequest();

  AddGroupRequest(const AddGroupRequest& from);
  AddGroupRequest(AddGroupRequest&& from) noexcept
    : AddGroupRequest() {
    *this = ::std::move(from);
  }

  inline AddGroupRequest& operator=(const AddGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddGroupRequest& operator=(AddGroupRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddGroupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddGroupRequest* internal_default_instance() {
    return reinterpret_cast<const AddGroupRequest*>(
               &_AddGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AddGroupRequest& a, AddGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddGroupRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddGroupRequest* New() const final {
    return CreateMaybeMessage<AddGroupRequest>(nullptr);
  }

  AddGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddGroupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddGroupRequest& from);
  void MergeFrom(const AddGroupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddGroupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GroupProto.AddGroupRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Group_2eproto);
    return ::descriptor_table_Group_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kGroupNameFieldNumber = 2,
    kUserRoleFieldNumber = 3,
  };
  // bytes userName = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const void* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // bytes groupName = 2;
  void clear_groupname();
  const std::string& groupname() const;
  void set_groupname(const std::string& value);
  void set_groupname(std::string&& value);
  void set_groupname(const char* value);
  void set_groupname(const void* value, size_t size);
  std::string* mutable_groupname();
  std::string* release_groupname();
  void set_allocated_groupname(std::string* groupname);
  private:
  const std::string& _internal_groupname() const;
  void _internal_set_groupname(const std::string& value);
  std::string* _internal_mutable_groupname();
  public:

  // bytes userRole = 3;
  void clear_userrole();
  const std::string& userrole() const;
  void set_userrole(const std::string& value);
  void set_userrole(std::string&& value);
  void set_userrole(const char* value);
  void set_userrole(const void* value, size_t size);
  std::string* mutable_userrole();
  std::string* release_userrole();
  void set_allocated_userrole(std::string* userrole);
  private:
  const std::string& _internal_userrole() const;
  void _internal_set_userrole(const std::string& value);
  std::string* _internal_mutable_userrole();
  public:

  // @@protoc_insertion_point(class_scope:GroupProto.AddGroupRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userrole_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Group_2eproto;
};
// -------------------------------------------------------------------

class AddGroupResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GroupProto.AddGroupResponse) */ {
 public:
  AddGroupResponse();
  virtual ~AddGroupResponse();

  AddGroupResponse(const AddGroupResponse& from);
  AddGroupResponse(AddGroupResponse&& from) noexcept
    : AddGroupResponse() {
    *this = ::std::move(from);
  }

  inline AddGroupResponse& operator=(const AddGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddGroupResponse& operator=(AddGroupResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddGroupResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddGroupResponse* internal_default_instance() {
    return reinterpret_cast<const AddGroupResponse*>(
               &_AddGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AddGroupResponse& a, AddGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddGroupResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddGroupResponse* New() const final {
    return CreateMaybeMessage<AddGroupResponse>(nullptr);
  }

  AddGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddGroupResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddGroupResponse& from);
  void MergeFrom(const AddGroupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddGroupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GroupProto.AddGroupResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Group_2eproto);
    return ::descriptor_table_Group_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // .GroupProto.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::GroupProto::ResultCode& result() const;
  ::GroupProto::ResultCode* release_result();
  ::GroupProto::ResultCode* mutable_result();
  void set_allocated_result(::GroupProto::ResultCode* result);
  private:
  const ::GroupProto::ResultCode& _internal_result() const;
  ::GroupProto::ResultCode* _internal_mutable_result();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:GroupProto.AddGroupResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::GroupProto::ResultCode* result_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Group_2eproto;
};
// -------------------------------------------------------------------

class QuitGroupRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GroupProto.QuitGroupRequest) */ {
 public:
  QuitGroupRequest();
  virtual ~QuitGroupRequest();

  QuitGroupRequest(const QuitGroupRequest& from);
  QuitGroupRequest(QuitGroupRequest&& from) noexcept
    : QuitGroupRequest() {
    *this = ::std::move(from);
  }

  inline QuitGroupRequest& operator=(const QuitGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuitGroupRequest& operator=(QuitGroupRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QuitGroupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuitGroupRequest* internal_default_instance() {
    return reinterpret_cast<const QuitGroupRequest*>(
               &_QuitGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(QuitGroupRequest& a, QuitGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QuitGroupRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QuitGroupRequest* New() const final {
    return CreateMaybeMessage<QuitGroupRequest>(nullptr);
  }

  QuitGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QuitGroupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QuitGroupRequest& from);
  void MergeFrom(const QuitGroupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuitGroupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GroupProto.QuitGroupRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Group_2eproto);
    return ::descriptor_table_Group_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kGroupNameFieldNumber = 2,
  };
  // bytes userName = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const void* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // bytes groupName = 2;
  void clear_groupname();
  const std::string& groupname() const;
  void set_groupname(const std::string& value);
  void set_groupname(std::string&& value);
  void set_groupname(const char* value);
  void set_groupname(const void* value, size_t size);
  std::string* mutable_groupname();
  std::string* release_groupname();
  void set_allocated_groupname(std::string* groupname);
  private:
  const std::string& _internal_groupname() const;
  void _internal_set_groupname(const std::string& value);
  std::string* _internal_mutable_groupname();
  public:

  // @@protoc_insertion_point(class_scope:GroupProto.QuitGroupRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Group_2eproto;
};
// -------------------------------------------------------------------

class QuitGroupResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GroupProto.QuitGroupResponse) */ {
 public:
  QuitGroupResponse();
  virtual ~QuitGroupResponse();

  QuitGroupResponse(const QuitGroupResponse& from);
  QuitGroupResponse(QuitGroupResponse&& from) noexcept
    : QuitGroupResponse() {
    *this = ::std::move(from);
  }

  inline QuitGroupResponse& operator=(const QuitGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuitGroupResponse& operator=(QuitGroupResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QuitGroupResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuitGroupResponse* internal_default_instance() {
    return reinterpret_cast<const QuitGroupResponse*>(
               &_QuitGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(QuitGroupResponse& a, QuitGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QuitGroupResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QuitGroupResponse* New() const final {
    return CreateMaybeMessage<QuitGroupResponse>(nullptr);
  }

  QuitGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QuitGroupResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QuitGroupResponse& from);
  void MergeFrom(const QuitGroupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuitGroupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GroupProto.QuitGroupResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Group_2eproto);
    return ::descriptor_table_Group_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // .GroupProto.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::GroupProto::ResultCode& result() const;
  ::GroupProto::ResultCode* release_result();
  ::GroupProto::ResultCode* mutable_result();
  void set_allocated_result(::GroupProto::ResultCode* result);
  private:
  const ::GroupProto::ResultCode& _internal_result() const;
  ::GroupProto::ResultCode* _internal_mutable_result();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:GroupProto.QuitGroupResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::GroupProto::ResultCode* result_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Group_2eproto;
};
// -------------------------------------------------------------------

class QueryGroupRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GroupProto.QueryGroupRequest) */ {
 public:
  QueryGroupRequest();
  virtual ~QueryGroupRequest();

  QueryGroupRequest(const QueryGroupRequest& from);
  QueryGroupRequest(QueryGroupRequest&& from) noexcept
    : QueryGroupRequest() {
    *this = ::std::move(from);
  }

  inline QueryGroupRequest& operator=(const QueryGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryGroupRequest& operator=(QueryGroupRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryGroupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryGroupRequest* internal_default_instance() {
    return reinterpret_cast<const QueryGroupRequest*>(
               &_QueryGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(QueryGroupRequest& a, QueryGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryGroupRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryGroupRequest* New() const final {
    return CreateMaybeMessage<QueryGroupRequest>(nullptr);
  }

  QueryGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryGroupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryGroupRequest& from);
  void MergeFrom(const QueryGroupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryGroupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GroupProto.QueryGroupRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Group_2eproto);
    return ::descriptor_table_Group_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
  };
  // bytes userName = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const void* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // @@protoc_insertion_point(class_scope:GroupProto.QueryGroupRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Group_2eproto;
};
// -------------------------------------------------------------------

class QueryGroupResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GroupProto.QueryGroupResponse) */ {
 public:
  QueryGroupResponse();
  virtual ~QueryGroupResponse();

  QueryGroupResponse(const QueryGroupResponse& from);
  QueryGroupResponse(QueryGroupResponse&& from) noexcept
    : QueryGroupResponse() {
    *this = ::std::move(from);
  }

  inline QueryGroupResponse& operator=(const QueryGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryGroupResponse& operator=(QueryGroupResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryGroupResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryGroupResponse* internal_default_instance() {
    return reinterpret_cast<const QueryGroupResponse*>(
               &_QueryGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(QueryGroupResponse& a, QueryGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryGroupResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryGroupResponse* New() const final {
    return CreateMaybeMessage<QueryGroupResponse>(nullptr);
  }

  QueryGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryGroupResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryGroupResponse& from);
  void MergeFrom(const QueryGroupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryGroupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GroupProto.QueryGroupResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Group_2eproto);
    return ::descriptor_table_Group_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupsFieldNumber = 3,
    kResultFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // repeated .GroupProto.GroupInfo groups = 3;
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  ::GroupProto::GroupInfo* mutable_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GroupProto::GroupInfo >*
      mutable_groups();
  private:
  const ::GroupProto::GroupInfo& _internal_groups(int index) const;
  ::GroupProto::GroupInfo* _internal_add_groups();
  public:
  const ::GroupProto::GroupInfo& groups(int index) const;
  ::GroupProto::GroupInfo* add_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GroupProto::GroupInfo >&
      groups() const;

  // .GroupProto.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::GroupProto::ResultCode& result() const;
  ::GroupProto::ResultCode* release_result();
  ::GroupProto::ResultCode* mutable_result();
  void set_allocated_result(::GroupProto::ResultCode* result);
  private:
  const ::GroupProto::ResultCode& _internal_result() const;
  ::GroupProto::ResultCode* _internal_mutable_result();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:GroupProto.QueryGroupResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GroupProto::GroupInfo > groups_;
  ::GroupProto::ResultCode* result_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Group_2eproto;
};
// -------------------------------------------------------------------

class QueryGroupUsersRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GroupProto.QueryGroupUsersRequest) */ {
 public:
  QueryGroupUsersRequest();
  virtual ~QueryGroupUsersRequest();

  QueryGroupUsersRequest(const QueryGroupUsersRequest& from);
  QueryGroupUsersRequest(QueryGroupUsersRequest&& from) noexcept
    : QueryGroupUsersRequest() {
    *this = ::std::move(from);
  }

  inline QueryGroupUsersRequest& operator=(const QueryGroupUsersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryGroupUsersRequest& operator=(QueryGroupUsersRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryGroupUsersRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryGroupUsersRequest* internal_default_instance() {
    return reinterpret_cast<const QueryGroupUsersRequest*>(
               &_QueryGroupUsersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(QueryGroupUsersRequest& a, QueryGroupUsersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryGroupUsersRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryGroupUsersRequest* New() const final {
    return CreateMaybeMessage<QueryGroupUsersRequest>(nullptr);
  }

  QueryGroupUsersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryGroupUsersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryGroupUsersRequest& from);
  void MergeFrom(const QueryGroupUsersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryGroupUsersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GroupProto.QueryGroupUsersRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Group_2eproto);
    return ::descriptor_table_Group_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kGroupNameFieldNumber = 2,
  };
  // bytes userName = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const void* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // bytes groupName = 2;
  void clear_groupname();
  const std::string& groupname() const;
  void set_groupname(const std::string& value);
  void set_groupname(std::string&& value);
  void set_groupname(const char* value);
  void set_groupname(const void* value, size_t size);
  std::string* mutable_groupname();
  std::string* release_groupname();
  void set_allocated_groupname(std::string* groupname);
  private:
  const std::string& _internal_groupname() const;
  void _internal_set_groupname(const std::string& value);
  std::string* _internal_mutable_groupname();
  public:

  // @@protoc_insertion_point(class_scope:GroupProto.QueryGroupUsersRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Group_2eproto;
};
// -------------------------------------------------------------------

class QueryGroupUsersResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GroupProto.QueryGroupUsersResponse) */ {
 public:
  QueryGroupUsersResponse();
  virtual ~QueryGroupUsersResponse();

  QueryGroupUsersResponse(const QueryGroupUsersResponse& from);
  QueryGroupUsersResponse(QueryGroupUsersResponse&& from) noexcept
    : QueryGroupUsersResponse() {
    *this = ::std::move(from);
  }

  inline QueryGroupUsersResponse& operator=(const QueryGroupUsersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryGroupUsersResponse& operator=(QueryGroupUsersResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryGroupUsersResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryGroupUsersResponse* internal_default_instance() {
    return reinterpret_cast<const QueryGroupUsersResponse*>(
               &_QueryGroupUsersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(QueryGroupUsersResponse& a, QueryGroupUsersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryGroupUsersResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryGroupUsersResponse* New() const final {
    return CreateMaybeMessage<QueryGroupUsersResponse>(nullptr);
  }

  QueryGroupUsersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryGroupUsersResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryGroupUsersResponse& from);
  void MergeFrom(const QueryGroupUsersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryGroupUsersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GroupProto.QueryGroupUsersResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Group_2eproto);
    return ::descriptor_table_Group_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupUserFieldNumber = 3,
    kResultFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // repeated .GroupProto.GroupUser groupUser = 3;
  int groupuser_size() const;
  private:
  int _internal_groupuser_size() const;
  public:
  void clear_groupuser();
  ::GroupProto::GroupUser* mutable_groupuser(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GroupProto::GroupUser >*
      mutable_groupuser();
  private:
  const ::GroupProto::GroupUser& _internal_groupuser(int index) const;
  ::GroupProto::GroupUser* _internal_add_groupuser();
  public:
  const ::GroupProto::GroupUser& groupuser(int index) const;
  ::GroupProto::GroupUser* add_groupuser();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GroupProto::GroupUser >&
      groupuser() const;

  // .GroupProto.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::GroupProto::ResultCode& result() const;
  ::GroupProto::ResultCode* release_result();
  ::GroupProto::ResultCode* mutable_result();
  void set_allocated_result(::GroupProto::ResultCode* result);
  private:
  const ::GroupProto::ResultCode& _internal_result() const;
  ::GroupProto::ResultCode* _internal_mutable_result();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:GroupProto.QueryGroupUsersResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GroupProto::GroupUser > groupuser_;
  ::GroupProto::ResultCode* result_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Group_2eproto;
};
// ===================================================================

class GroupServiceRpc_Stub;

class GroupServiceRpc : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline GroupServiceRpc() {};
 public:
  virtual ~GroupServiceRpc();

  typedef GroupServiceRpc_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void CreateGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::GroupProto::CreateGroupRequest* request,
                       ::GroupProto::CreateGroupResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void AddGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::GroupProto::AddGroupRequest* request,
                       ::GroupProto::AddGroupResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void QuitGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::GroupProto::QuitGroupRequest* request,
                       ::GroupProto::QuitGroupResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void QueryGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::GroupProto::QueryGroupRequest* request,
                       ::GroupProto::QueryGroupResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void QueryGroupUsers(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::GroupProto::QueryGroupUsersRequest* request,
                       ::GroupProto::QueryGroupUsersResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(GroupServiceRpc);
};

class GroupServiceRpc_Stub : public GroupServiceRpc {
 public:
  GroupServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  GroupServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~GroupServiceRpc_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements GroupServiceRpc ------------------------------------------

  void CreateGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::GroupProto::CreateGroupRequest* request,
                       ::GroupProto::CreateGroupResponse* response,
                       ::google::protobuf::Closure* done);
  void AddGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::GroupProto::AddGroupRequest* request,
                       ::GroupProto::AddGroupResponse* response,
                       ::google::protobuf::Closure* done);
  void QuitGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::GroupProto::QuitGroupRequest* request,
                       ::GroupProto::QuitGroupResponse* response,
                       ::google::protobuf::Closure* done);
  void QueryGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::GroupProto::QueryGroupRequest* request,
                       ::GroupProto::QueryGroupResponse* response,
                       ::google::protobuf::Closure* done);
  void QueryGroupUsers(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::GroupProto::QueryGroupUsersRequest* request,
                       ::GroupProto::QueryGroupUsersResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(GroupServiceRpc_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GroupUser

// bytes userName = 1;
inline void GroupUser::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GroupUser::username() const {
  // @@protoc_insertion_point(field_get:GroupProto.GroupUser.userName)
  return _internal_username();
}
inline void GroupUser::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:GroupProto.GroupUser.userName)
}
inline std::string* GroupUser::mutable_username() {
  // @@protoc_insertion_point(field_mutable:GroupProto.GroupUser.userName)
  return _internal_mutable_username();
}
inline const std::string& GroupUser::_internal_username() const {
  return username_.GetNoArena();
}
inline void GroupUser::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GroupUser::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GroupProto.GroupUser.userName)
}
inline void GroupUser::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GroupProto.GroupUser.userName)
}
inline void GroupUser::set_username(const void* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GroupProto.GroupUser.userName)
}
inline std::string* GroupUser::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GroupUser::release_username() {
  // @@protoc_insertion_point(field_release:GroupProto.GroupUser.userName)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GroupUser::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:GroupProto.GroupUser.userName)
}

// bytes userEmail = 2;
inline void GroupUser::clear_useremail() {
  useremail_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GroupUser::useremail() const {
  // @@protoc_insertion_point(field_get:GroupProto.GroupUser.userEmail)
  return _internal_useremail();
}
inline void GroupUser::set_useremail(const std::string& value) {
  _internal_set_useremail(value);
  // @@protoc_insertion_point(field_set:GroupProto.GroupUser.userEmail)
}
inline std::string* GroupUser::mutable_useremail() {
  // @@protoc_insertion_point(field_mutable:GroupProto.GroupUser.userEmail)
  return _internal_mutable_useremail();
}
inline const std::string& GroupUser::_internal_useremail() const {
  return useremail_.GetNoArena();
}
inline void GroupUser::_internal_set_useremail(const std::string& value) {
  
  useremail_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GroupUser::set_useremail(std::string&& value) {
  
  useremail_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GroupProto.GroupUser.userEmail)
}
inline void GroupUser::set_useremail(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  useremail_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GroupProto.GroupUser.userEmail)
}
inline void GroupUser::set_useremail(const void* value, size_t size) {
  
  useremail_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GroupProto.GroupUser.userEmail)
}
inline std::string* GroupUser::_internal_mutable_useremail() {
  
  return useremail_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GroupUser::release_useremail() {
  // @@protoc_insertion_point(field_release:GroupProto.GroupUser.userEmail)
  
  return useremail_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GroupUser::set_allocated_useremail(std::string* useremail) {
  if (useremail != nullptr) {
    
  } else {
    
  }
  useremail_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), useremail);
  // @@protoc_insertion_point(field_set_allocated:GroupProto.GroupUser.userEmail)
}

// bytes userPhone = 3;
inline void GroupUser::clear_userphone() {
  userphone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GroupUser::userphone() const {
  // @@protoc_insertion_point(field_get:GroupProto.GroupUser.userPhone)
  return _internal_userphone();
}
inline void GroupUser::set_userphone(const std::string& value) {
  _internal_set_userphone(value);
  // @@protoc_insertion_point(field_set:GroupProto.GroupUser.userPhone)
}
inline std::string* GroupUser::mutable_userphone() {
  // @@protoc_insertion_point(field_mutable:GroupProto.GroupUser.userPhone)
  return _internal_mutable_userphone();
}
inline const std::string& GroupUser::_internal_userphone() const {
  return userphone_.GetNoArena();
}
inline void GroupUser::_internal_set_userphone(const std::string& value) {
  
  userphone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GroupUser::set_userphone(std::string&& value) {
  
  userphone_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GroupProto.GroupUser.userPhone)
}
inline void GroupUser::set_userphone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userphone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GroupProto.GroupUser.userPhone)
}
inline void GroupUser::set_userphone(const void* value, size_t size) {
  
  userphone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GroupProto.GroupUser.userPhone)
}
inline std::string* GroupUser::_internal_mutable_userphone() {
  
  return userphone_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GroupUser::release_userphone() {
  // @@protoc_insertion_point(field_release:GroupProto.GroupUser.userPhone)
  
  return userphone_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GroupUser::set_allocated_userphone(std::string* userphone) {
  if (userphone != nullptr) {
    
  } else {
    
  }
  userphone_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userphone);
  // @@protoc_insertion_point(field_set_allocated:GroupProto.GroupUser.userPhone)
}

// bytes userRole = 4;
inline void GroupUser::clear_userrole() {
  userrole_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GroupUser::userrole() const {
  // @@protoc_insertion_point(field_get:GroupProto.GroupUser.userRole)
  return _internal_userrole();
}
inline void GroupUser::set_userrole(const std::string& value) {
  _internal_set_userrole(value);
  // @@protoc_insertion_point(field_set:GroupProto.GroupUser.userRole)
}
inline std::string* GroupUser::mutable_userrole() {
  // @@protoc_insertion_point(field_mutable:GroupProto.GroupUser.userRole)
  return _internal_mutable_userrole();
}
inline const std::string& GroupUser::_internal_userrole() const {
  return userrole_.GetNoArena();
}
inline void GroupUser::_internal_set_userrole(const std::string& value) {
  
  userrole_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GroupUser::set_userrole(std::string&& value) {
  
  userrole_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GroupProto.GroupUser.userRole)
}
inline void GroupUser::set_userrole(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userrole_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GroupProto.GroupUser.userRole)
}
inline void GroupUser::set_userrole(const void* value, size_t size) {
  
  userrole_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GroupProto.GroupUser.userRole)
}
inline std::string* GroupUser::_internal_mutable_userrole() {
  
  return userrole_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GroupUser::release_userrole() {
  // @@protoc_insertion_point(field_release:GroupProto.GroupUser.userRole)
  
  return userrole_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GroupUser::set_allocated_userrole(std::string* userrole) {
  if (userrole != nullptr) {
    
  } else {
    
  }
  userrole_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userrole);
  // @@protoc_insertion_point(field_set_allocated:GroupProto.GroupUser.userRole)
}

// -------------------------------------------------------------------

// GroupInfo

// int32 groupId = 1;
inline void GroupInfo::clear_groupid() {
  groupid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupInfo::_internal_groupid() const {
  return groupid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupInfo::groupid() const {
  // @@protoc_insertion_point(field_get:GroupProto.GroupInfo.groupId)
  return _internal_groupid();
}
inline void GroupInfo::_internal_set_groupid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  groupid_ = value;
}
inline void GroupInfo::set_groupid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:GroupProto.GroupInfo.groupId)
}

// bytes groupName = 2;
inline void GroupInfo::clear_groupname() {
  groupname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GroupInfo::groupname() const {
  // @@protoc_insertion_point(field_get:GroupProto.GroupInfo.groupName)
  return _internal_groupname();
}
inline void GroupInfo::set_groupname(const std::string& value) {
  _internal_set_groupname(value);
  // @@protoc_insertion_point(field_set:GroupProto.GroupInfo.groupName)
}
inline std::string* GroupInfo::mutable_groupname() {
  // @@protoc_insertion_point(field_mutable:GroupProto.GroupInfo.groupName)
  return _internal_mutable_groupname();
}
inline const std::string& GroupInfo::_internal_groupname() const {
  return groupname_.GetNoArena();
}
inline void GroupInfo::_internal_set_groupname(const std::string& value) {
  
  groupname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GroupInfo::set_groupname(std::string&& value) {
  
  groupname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GroupProto.GroupInfo.groupName)
}
inline void GroupInfo::set_groupname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GroupProto.GroupInfo.groupName)
}
inline void GroupInfo::set_groupname(const void* value, size_t size) {
  
  groupname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GroupProto.GroupInfo.groupName)
}
inline std::string* GroupInfo::_internal_mutable_groupname() {
  
  return groupname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GroupInfo::release_groupname() {
  // @@protoc_insertion_point(field_release:GroupProto.GroupInfo.groupName)
  
  return groupname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GroupInfo::set_allocated_groupname(std::string* groupname) {
  if (groupname != nullptr) {
    
  } else {
    
  }
  groupname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupname);
  // @@protoc_insertion_point(field_set_allocated:GroupProto.GroupInfo.groupName)
}

// bytes groupDesc = 3;
inline void GroupInfo::clear_groupdesc() {
  groupdesc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GroupInfo::groupdesc() const {
  // @@protoc_insertion_point(field_get:GroupProto.GroupInfo.groupDesc)
  return _internal_groupdesc();
}
inline void GroupInfo::set_groupdesc(const std::string& value) {
  _internal_set_groupdesc(value);
  // @@protoc_insertion_point(field_set:GroupProto.GroupInfo.groupDesc)
}
inline std::string* GroupInfo::mutable_groupdesc() {
  // @@protoc_insertion_point(field_mutable:GroupProto.GroupInfo.groupDesc)
  return _internal_mutable_groupdesc();
}
inline const std::string& GroupInfo::_internal_groupdesc() const {
  return groupdesc_.GetNoArena();
}
inline void GroupInfo::_internal_set_groupdesc(const std::string& value) {
  
  groupdesc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GroupInfo::set_groupdesc(std::string&& value) {
  
  groupdesc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GroupProto.GroupInfo.groupDesc)
}
inline void GroupInfo::set_groupdesc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupdesc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GroupProto.GroupInfo.groupDesc)
}
inline void GroupInfo::set_groupdesc(const void* value, size_t size) {
  
  groupdesc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GroupProto.GroupInfo.groupDesc)
}
inline std::string* GroupInfo::_internal_mutable_groupdesc() {
  
  return groupdesc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GroupInfo::release_groupdesc() {
  // @@protoc_insertion_point(field_release:GroupProto.GroupInfo.groupDesc)
  
  return groupdesc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GroupInfo::set_allocated_groupdesc(std::string* groupdesc) {
  if (groupdesc != nullptr) {
    
  } else {
    
  }
  groupdesc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupdesc);
  // @@protoc_insertion_point(field_set_allocated:GroupProto.GroupInfo.groupDesc)
}

// repeated .GroupProto.GroupUser groupUsers = 4;
inline int GroupInfo::_internal_groupusers_size() const {
  return groupusers_.size();
}
inline int GroupInfo::groupusers_size() const {
  return _internal_groupusers_size();
}
inline void GroupInfo::clear_groupusers() {
  groupusers_.Clear();
}
inline ::GroupProto::GroupUser* GroupInfo::mutable_groupusers(int index) {
  // @@protoc_insertion_point(field_mutable:GroupProto.GroupInfo.groupUsers)
  return groupusers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GroupProto::GroupUser >*
GroupInfo::mutable_groupusers() {
  // @@protoc_insertion_point(field_mutable_list:GroupProto.GroupInfo.groupUsers)
  return &groupusers_;
}
inline const ::GroupProto::GroupUser& GroupInfo::_internal_groupusers(int index) const {
  return groupusers_.Get(index);
}
inline const ::GroupProto::GroupUser& GroupInfo::groupusers(int index) const {
  // @@protoc_insertion_point(field_get:GroupProto.GroupInfo.groupUsers)
  return _internal_groupusers(index);
}
inline ::GroupProto::GroupUser* GroupInfo::_internal_add_groupusers() {
  return groupusers_.Add();
}
inline ::GroupProto::GroupUser* GroupInfo::add_groupusers() {
  // @@protoc_insertion_point(field_add:GroupProto.GroupInfo.groupUsers)
  return _internal_add_groupusers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GroupProto::GroupUser >&
GroupInfo::groupusers() const {
  // @@protoc_insertion_point(field_list:GroupProto.GroupInfo.groupUsers)
  return groupusers_;
}

// -------------------------------------------------------------------

// ResultCode

// int32 errcode = 1;
inline void ResultCode::clear_errcode() {
  errcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResultCode::_internal_errcode() const {
  return errcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResultCode::errcode() const {
  // @@protoc_insertion_point(field_get:GroupProto.ResultCode.errcode)
  return _internal_errcode();
}
inline void ResultCode::_internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errcode_ = value;
}
inline void ResultCode::set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:GroupProto.ResultCode.errcode)
}

// bytes errmsg = 2;
inline void ResultCode::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ResultCode::errmsg() const {
  // @@protoc_insertion_point(field_get:GroupProto.ResultCode.errmsg)
  return _internal_errmsg();
}
inline void ResultCode::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:GroupProto.ResultCode.errmsg)
}
inline std::string* ResultCode::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:GroupProto.ResultCode.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& ResultCode::_internal_errmsg() const {
  return errmsg_.GetNoArena();
}
inline void ResultCode::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ResultCode::set_errmsg(std::string&& value) {
  
  errmsg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GroupProto.ResultCode.errmsg)
}
inline void ResultCode::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GroupProto.ResultCode.errmsg)
}
inline void ResultCode::set_errmsg(const void* value, size_t size) {
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GroupProto.ResultCode.errmsg)
}
inline std::string* ResultCode::_internal_mutable_errmsg() {
  
  return errmsg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResultCode::release_errmsg() {
  // @@protoc_insertion_point(field_release:GroupProto.ResultCode.errmsg)
  
  return errmsg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResultCode::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:GroupProto.ResultCode.errmsg)
}

// -------------------------------------------------------------------

// CreateGroupRequest

// .GroupProto.GroupInfo group = 1;
inline bool CreateGroupRequest::_internal_has_group() const {
  return this != internal_default_instance() && group_ != nullptr;
}
inline bool CreateGroupRequest::has_group() const {
  return _internal_has_group();
}
inline void CreateGroupRequest::clear_group() {
  if (GetArenaNoVirtual() == nullptr && group_ != nullptr) {
    delete group_;
  }
  group_ = nullptr;
}
inline const ::GroupProto::GroupInfo& CreateGroupRequest::_internal_group() const {
  const ::GroupProto::GroupInfo* p = group_;
  return p != nullptr ? *p : *reinterpret_cast<const ::GroupProto::GroupInfo*>(
      &::GroupProto::_GroupInfo_default_instance_);
}
inline const ::GroupProto::GroupInfo& CreateGroupRequest::group() const {
  // @@protoc_insertion_point(field_get:GroupProto.CreateGroupRequest.group)
  return _internal_group();
}
inline ::GroupProto::GroupInfo* CreateGroupRequest::release_group() {
  // @@protoc_insertion_point(field_release:GroupProto.CreateGroupRequest.group)
  
  ::GroupProto::GroupInfo* temp = group_;
  group_ = nullptr;
  return temp;
}
inline ::GroupProto::GroupInfo* CreateGroupRequest::_internal_mutable_group() {
  
  if (group_ == nullptr) {
    auto* p = CreateMaybeMessage<::GroupProto::GroupInfo>(GetArenaNoVirtual());
    group_ = p;
  }
  return group_;
}
inline ::GroupProto::GroupInfo* CreateGroupRequest::mutable_group() {
  // @@protoc_insertion_point(field_mutable:GroupProto.CreateGroupRequest.group)
  return _internal_mutable_group();
}
inline void CreateGroupRequest::set_allocated_group(::GroupProto::GroupInfo* group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete group_;
  }
  if (group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group, submessage_arena);
    }
    
  } else {
    
  }
  group_ = group;
  // @@protoc_insertion_point(field_set_allocated:GroupProto.CreateGroupRequest.group)
}

// -------------------------------------------------------------------

// CreateGroupResponse

// .GroupProto.ResultCode result = 1;
inline bool CreateGroupResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool CreateGroupResponse::has_result() const {
  return _internal_has_result();
}
inline void CreateGroupResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::GroupProto::ResultCode& CreateGroupResponse::_internal_result() const {
  const ::GroupProto::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::GroupProto::ResultCode*>(
      &::GroupProto::_ResultCode_default_instance_);
}
inline const ::GroupProto::ResultCode& CreateGroupResponse::result() const {
  // @@protoc_insertion_point(field_get:GroupProto.CreateGroupResponse.result)
  return _internal_result();
}
inline ::GroupProto::ResultCode* CreateGroupResponse::release_result() {
  // @@protoc_insertion_point(field_release:GroupProto.CreateGroupResponse.result)
  
  ::GroupProto::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::GroupProto::ResultCode* CreateGroupResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::GroupProto::ResultCode>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::GroupProto::ResultCode* CreateGroupResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:GroupProto.CreateGroupResponse.result)
  return _internal_mutable_result();
}
inline void CreateGroupResponse::set_allocated_result(::GroupProto::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:GroupProto.CreateGroupResponse.result)
}

// bool success = 2;
inline void CreateGroupResponse::clear_success() {
  success_ = false;
}
inline bool CreateGroupResponse::_internal_success() const {
  return success_;
}
inline bool CreateGroupResponse::success() const {
  // @@protoc_insertion_point(field_get:GroupProto.CreateGroupResponse.success)
  return _internal_success();
}
inline void CreateGroupResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void CreateGroupResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:GroupProto.CreateGroupResponse.success)
}

// -------------------------------------------------------------------

// AddGroupRequest

// bytes userName = 1;
inline void AddGroupRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddGroupRequest::username() const {
  // @@protoc_insertion_point(field_get:GroupProto.AddGroupRequest.userName)
  return _internal_username();
}
inline void AddGroupRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:GroupProto.AddGroupRequest.userName)
}
inline std::string* AddGroupRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:GroupProto.AddGroupRequest.userName)
  return _internal_mutable_username();
}
inline const std::string& AddGroupRequest::_internal_username() const {
  return username_.GetNoArena();
}
inline void AddGroupRequest::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddGroupRequest::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GroupProto.AddGroupRequest.userName)
}
inline void AddGroupRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GroupProto.AddGroupRequest.userName)
}
inline void AddGroupRequest::set_username(const void* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GroupProto.AddGroupRequest.userName)
}
inline std::string* AddGroupRequest::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddGroupRequest::release_username() {
  // @@protoc_insertion_point(field_release:GroupProto.AddGroupRequest.userName)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddGroupRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:GroupProto.AddGroupRequest.userName)
}

// bytes groupName = 2;
inline void AddGroupRequest::clear_groupname() {
  groupname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddGroupRequest::groupname() const {
  // @@protoc_insertion_point(field_get:GroupProto.AddGroupRequest.groupName)
  return _internal_groupname();
}
inline void AddGroupRequest::set_groupname(const std::string& value) {
  _internal_set_groupname(value);
  // @@protoc_insertion_point(field_set:GroupProto.AddGroupRequest.groupName)
}
inline std::string* AddGroupRequest::mutable_groupname() {
  // @@protoc_insertion_point(field_mutable:GroupProto.AddGroupRequest.groupName)
  return _internal_mutable_groupname();
}
inline const std::string& AddGroupRequest::_internal_groupname() const {
  return groupname_.GetNoArena();
}
inline void AddGroupRequest::_internal_set_groupname(const std::string& value) {
  
  groupname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddGroupRequest::set_groupname(std::string&& value) {
  
  groupname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GroupProto.AddGroupRequest.groupName)
}
inline void AddGroupRequest::set_groupname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GroupProto.AddGroupRequest.groupName)
}
inline void AddGroupRequest::set_groupname(const void* value, size_t size) {
  
  groupname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GroupProto.AddGroupRequest.groupName)
}
inline std::string* AddGroupRequest::_internal_mutable_groupname() {
  
  return groupname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddGroupRequest::release_groupname() {
  // @@protoc_insertion_point(field_release:GroupProto.AddGroupRequest.groupName)
  
  return groupname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddGroupRequest::set_allocated_groupname(std::string* groupname) {
  if (groupname != nullptr) {
    
  } else {
    
  }
  groupname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupname);
  // @@protoc_insertion_point(field_set_allocated:GroupProto.AddGroupRequest.groupName)
}

// bytes userRole = 3;
inline void AddGroupRequest::clear_userrole() {
  userrole_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddGroupRequest::userrole() const {
  // @@protoc_insertion_point(field_get:GroupProto.AddGroupRequest.userRole)
  return _internal_userrole();
}
inline void AddGroupRequest::set_userrole(const std::string& value) {
  _internal_set_userrole(value);
  // @@protoc_insertion_point(field_set:GroupProto.AddGroupRequest.userRole)
}
inline std::string* AddGroupRequest::mutable_userrole() {
  // @@protoc_insertion_point(field_mutable:GroupProto.AddGroupRequest.userRole)
  return _internal_mutable_userrole();
}
inline const std::string& AddGroupRequest::_internal_userrole() const {
  return userrole_.GetNoArena();
}
inline void AddGroupRequest::_internal_set_userrole(const std::string& value) {
  
  userrole_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddGroupRequest::set_userrole(std::string&& value) {
  
  userrole_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GroupProto.AddGroupRequest.userRole)
}
inline void AddGroupRequest::set_userrole(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userrole_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GroupProto.AddGroupRequest.userRole)
}
inline void AddGroupRequest::set_userrole(const void* value, size_t size) {
  
  userrole_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GroupProto.AddGroupRequest.userRole)
}
inline std::string* AddGroupRequest::_internal_mutable_userrole() {
  
  return userrole_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddGroupRequest::release_userrole() {
  // @@protoc_insertion_point(field_release:GroupProto.AddGroupRequest.userRole)
  
  return userrole_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddGroupRequest::set_allocated_userrole(std::string* userrole) {
  if (userrole != nullptr) {
    
  } else {
    
  }
  userrole_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userrole);
  // @@protoc_insertion_point(field_set_allocated:GroupProto.AddGroupRequest.userRole)
}

// -------------------------------------------------------------------

// AddGroupResponse

// .GroupProto.ResultCode result = 1;
inline bool AddGroupResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool AddGroupResponse::has_result() const {
  return _internal_has_result();
}
inline void AddGroupResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::GroupProto::ResultCode& AddGroupResponse::_internal_result() const {
  const ::GroupProto::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::GroupProto::ResultCode*>(
      &::GroupProto::_ResultCode_default_instance_);
}
inline const ::GroupProto::ResultCode& AddGroupResponse::result() const {
  // @@protoc_insertion_point(field_get:GroupProto.AddGroupResponse.result)
  return _internal_result();
}
inline ::GroupProto::ResultCode* AddGroupResponse::release_result() {
  // @@protoc_insertion_point(field_release:GroupProto.AddGroupResponse.result)
  
  ::GroupProto::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::GroupProto::ResultCode* AddGroupResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::GroupProto::ResultCode>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::GroupProto::ResultCode* AddGroupResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:GroupProto.AddGroupResponse.result)
  return _internal_mutable_result();
}
inline void AddGroupResponse::set_allocated_result(::GroupProto::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:GroupProto.AddGroupResponse.result)
}

// bool success = 2;
inline void AddGroupResponse::clear_success() {
  success_ = false;
}
inline bool AddGroupResponse::_internal_success() const {
  return success_;
}
inline bool AddGroupResponse::success() const {
  // @@protoc_insertion_point(field_get:GroupProto.AddGroupResponse.success)
  return _internal_success();
}
inline void AddGroupResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void AddGroupResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:GroupProto.AddGroupResponse.success)
}

// -------------------------------------------------------------------

// QuitGroupRequest

// bytes userName = 1;
inline void QuitGroupRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QuitGroupRequest::username() const {
  // @@protoc_insertion_point(field_get:GroupProto.QuitGroupRequest.userName)
  return _internal_username();
}
inline void QuitGroupRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:GroupProto.QuitGroupRequest.userName)
}
inline std::string* QuitGroupRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:GroupProto.QuitGroupRequest.userName)
  return _internal_mutable_username();
}
inline const std::string& QuitGroupRequest::_internal_username() const {
  return username_.GetNoArena();
}
inline void QuitGroupRequest::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QuitGroupRequest::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GroupProto.QuitGroupRequest.userName)
}
inline void QuitGroupRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GroupProto.QuitGroupRequest.userName)
}
inline void QuitGroupRequest::set_username(const void* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GroupProto.QuitGroupRequest.userName)
}
inline std::string* QuitGroupRequest::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QuitGroupRequest::release_username() {
  // @@protoc_insertion_point(field_release:GroupProto.QuitGroupRequest.userName)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QuitGroupRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:GroupProto.QuitGroupRequest.userName)
}

// bytes groupName = 2;
inline void QuitGroupRequest::clear_groupname() {
  groupname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QuitGroupRequest::groupname() const {
  // @@protoc_insertion_point(field_get:GroupProto.QuitGroupRequest.groupName)
  return _internal_groupname();
}
inline void QuitGroupRequest::set_groupname(const std::string& value) {
  _internal_set_groupname(value);
  // @@protoc_insertion_point(field_set:GroupProto.QuitGroupRequest.groupName)
}
inline std::string* QuitGroupRequest::mutable_groupname() {
  // @@protoc_insertion_point(field_mutable:GroupProto.QuitGroupRequest.groupName)
  return _internal_mutable_groupname();
}
inline const std::string& QuitGroupRequest::_internal_groupname() const {
  return groupname_.GetNoArena();
}
inline void QuitGroupRequest::_internal_set_groupname(const std::string& value) {
  
  groupname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QuitGroupRequest::set_groupname(std::string&& value) {
  
  groupname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GroupProto.QuitGroupRequest.groupName)
}
inline void QuitGroupRequest::set_groupname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GroupProto.QuitGroupRequest.groupName)
}
inline void QuitGroupRequest::set_groupname(const void* value, size_t size) {
  
  groupname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GroupProto.QuitGroupRequest.groupName)
}
inline std::string* QuitGroupRequest::_internal_mutable_groupname() {
  
  return groupname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QuitGroupRequest::release_groupname() {
  // @@protoc_insertion_point(field_release:GroupProto.QuitGroupRequest.groupName)
  
  return groupname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QuitGroupRequest::set_allocated_groupname(std::string* groupname) {
  if (groupname != nullptr) {
    
  } else {
    
  }
  groupname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupname);
  // @@protoc_insertion_point(field_set_allocated:GroupProto.QuitGroupRequest.groupName)
}

// -------------------------------------------------------------------

// QuitGroupResponse

// .GroupProto.ResultCode result = 1;
inline bool QuitGroupResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool QuitGroupResponse::has_result() const {
  return _internal_has_result();
}
inline void QuitGroupResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::GroupProto::ResultCode& QuitGroupResponse::_internal_result() const {
  const ::GroupProto::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::GroupProto::ResultCode*>(
      &::GroupProto::_ResultCode_default_instance_);
}
inline const ::GroupProto::ResultCode& QuitGroupResponse::result() const {
  // @@protoc_insertion_point(field_get:GroupProto.QuitGroupResponse.result)
  return _internal_result();
}
inline ::GroupProto::ResultCode* QuitGroupResponse::release_result() {
  // @@protoc_insertion_point(field_release:GroupProto.QuitGroupResponse.result)
  
  ::GroupProto::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::GroupProto::ResultCode* QuitGroupResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::GroupProto::ResultCode>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::GroupProto::ResultCode* QuitGroupResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:GroupProto.QuitGroupResponse.result)
  return _internal_mutable_result();
}
inline void QuitGroupResponse::set_allocated_result(::GroupProto::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:GroupProto.QuitGroupResponse.result)
}

// bool success = 2;
inline void QuitGroupResponse::clear_success() {
  success_ = false;
}
inline bool QuitGroupResponse::_internal_success() const {
  return success_;
}
inline bool QuitGroupResponse::success() const {
  // @@protoc_insertion_point(field_get:GroupProto.QuitGroupResponse.success)
  return _internal_success();
}
inline void QuitGroupResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void QuitGroupResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:GroupProto.QuitGroupResponse.success)
}

// -------------------------------------------------------------------

// QueryGroupRequest

// bytes userName = 1;
inline void QueryGroupRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryGroupRequest::username() const {
  // @@protoc_insertion_point(field_get:GroupProto.QueryGroupRequest.userName)
  return _internal_username();
}
inline void QueryGroupRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:GroupProto.QueryGroupRequest.userName)
}
inline std::string* QueryGroupRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:GroupProto.QueryGroupRequest.userName)
  return _internal_mutable_username();
}
inline const std::string& QueryGroupRequest::_internal_username() const {
  return username_.GetNoArena();
}
inline void QueryGroupRequest::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QueryGroupRequest::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GroupProto.QueryGroupRequest.userName)
}
inline void QueryGroupRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GroupProto.QueryGroupRequest.userName)
}
inline void QueryGroupRequest::set_username(const void* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GroupProto.QueryGroupRequest.userName)
}
inline std::string* QueryGroupRequest::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryGroupRequest::release_username() {
  // @@protoc_insertion_point(field_release:GroupProto.QueryGroupRequest.userName)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryGroupRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:GroupProto.QueryGroupRequest.userName)
}

// -------------------------------------------------------------------

// QueryGroupResponse

// .GroupProto.ResultCode result = 1;
inline bool QueryGroupResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool QueryGroupResponse::has_result() const {
  return _internal_has_result();
}
inline void QueryGroupResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::GroupProto::ResultCode& QueryGroupResponse::_internal_result() const {
  const ::GroupProto::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::GroupProto::ResultCode*>(
      &::GroupProto::_ResultCode_default_instance_);
}
inline const ::GroupProto::ResultCode& QueryGroupResponse::result() const {
  // @@protoc_insertion_point(field_get:GroupProto.QueryGroupResponse.result)
  return _internal_result();
}
inline ::GroupProto::ResultCode* QueryGroupResponse::release_result() {
  // @@protoc_insertion_point(field_release:GroupProto.QueryGroupResponse.result)
  
  ::GroupProto::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::GroupProto::ResultCode* QueryGroupResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::GroupProto::ResultCode>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::GroupProto::ResultCode* QueryGroupResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:GroupProto.QueryGroupResponse.result)
  return _internal_mutable_result();
}
inline void QueryGroupResponse::set_allocated_result(::GroupProto::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:GroupProto.QueryGroupResponse.result)
}

// bool success = 2;
inline void QueryGroupResponse::clear_success() {
  success_ = false;
}
inline bool QueryGroupResponse::_internal_success() const {
  return success_;
}
inline bool QueryGroupResponse::success() const {
  // @@protoc_insertion_point(field_get:GroupProto.QueryGroupResponse.success)
  return _internal_success();
}
inline void QueryGroupResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void QueryGroupResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:GroupProto.QueryGroupResponse.success)
}

// repeated .GroupProto.GroupInfo groups = 3;
inline int QueryGroupResponse::_internal_groups_size() const {
  return groups_.size();
}
inline int QueryGroupResponse::groups_size() const {
  return _internal_groups_size();
}
inline void QueryGroupResponse::clear_groups() {
  groups_.Clear();
}
inline ::GroupProto::GroupInfo* QueryGroupResponse::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:GroupProto.QueryGroupResponse.groups)
  return groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GroupProto::GroupInfo >*
QueryGroupResponse::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:GroupProto.QueryGroupResponse.groups)
  return &groups_;
}
inline const ::GroupProto::GroupInfo& QueryGroupResponse::_internal_groups(int index) const {
  return groups_.Get(index);
}
inline const ::GroupProto::GroupInfo& QueryGroupResponse::groups(int index) const {
  // @@protoc_insertion_point(field_get:GroupProto.QueryGroupResponse.groups)
  return _internal_groups(index);
}
inline ::GroupProto::GroupInfo* QueryGroupResponse::_internal_add_groups() {
  return groups_.Add();
}
inline ::GroupProto::GroupInfo* QueryGroupResponse::add_groups() {
  // @@protoc_insertion_point(field_add:GroupProto.QueryGroupResponse.groups)
  return _internal_add_groups();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GroupProto::GroupInfo >&
QueryGroupResponse::groups() const {
  // @@protoc_insertion_point(field_list:GroupProto.QueryGroupResponse.groups)
  return groups_;
}

// -------------------------------------------------------------------

// QueryGroupUsersRequest

// bytes userName = 1;
inline void QueryGroupUsersRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryGroupUsersRequest::username() const {
  // @@protoc_insertion_point(field_get:GroupProto.QueryGroupUsersRequest.userName)
  return _internal_username();
}
inline void QueryGroupUsersRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:GroupProto.QueryGroupUsersRequest.userName)
}
inline std::string* QueryGroupUsersRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:GroupProto.QueryGroupUsersRequest.userName)
  return _internal_mutable_username();
}
inline const std::string& QueryGroupUsersRequest::_internal_username() const {
  return username_.GetNoArena();
}
inline void QueryGroupUsersRequest::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QueryGroupUsersRequest::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GroupProto.QueryGroupUsersRequest.userName)
}
inline void QueryGroupUsersRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GroupProto.QueryGroupUsersRequest.userName)
}
inline void QueryGroupUsersRequest::set_username(const void* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GroupProto.QueryGroupUsersRequest.userName)
}
inline std::string* QueryGroupUsersRequest::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryGroupUsersRequest::release_username() {
  // @@protoc_insertion_point(field_release:GroupProto.QueryGroupUsersRequest.userName)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryGroupUsersRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:GroupProto.QueryGroupUsersRequest.userName)
}

// bytes groupName = 2;
inline void QueryGroupUsersRequest::clear_groupname() {
  groupname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryGroupUsersRequest::groupname() const {
  // @@protoc_insertion_point(field_get:GroupProto.QueryGroupUsersRequest.groupName)
  return _internal_groupname();
}
inline void QueryGroupUsersRequest::set_groupname(const std::string& value) {
  _internal_set_groupname(value);
  // @@protoc_insertion_point(field_set:GroupProto.QueryGroupUsersRequest.groupName)
}
inline std::string* QueryGroupUsersRequest::mutable_groupname() {
  // @@protoc_insertion_point(field_mutable:GroupProto.QueryGroupUsersRequest.groupName)
  return _internal_mutable_groupname();
}
inline const std::string& QueryGroupUsersRequest::_internal_groupname() const {
  return groupname_.GetNoArena();
}
inline void QueryGroupUsersRequest::_internal_set_groupname(const std::string& value) {
  
  groupname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QueryGroupUsersRequest::set_groupname(std::string&& value) {
  
  groupname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GroupProto.QueryGroupUsersRequest.groupName)
}
inline void QueryGroupUsersRequest::set_groupname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GroupProto.QueryGroupUsersRequest.groupName)
}
inline void QueryGroupUsersRequest::set_groupname(const void* value, size_t size) {
  
  groupname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GroupProto.QueryGroupUsersRequest.groupName)
}
inline std::string* QueryGroupUsersRequest::_internal_mutable_groupname() {
  
  return groupname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryGroupUsersRequest::release_groupname() {
  // @@protoc_insertion_point(field_release:GroupProto.QueryGroupUsersRequest.groupName)
  
  return groupname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryGroupUsersRequest::set_allocated_groupname(std::string* groupname) {
  if (groupname != nullptr) {
    
  } else {
    
  }
  groupname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupname);
  // @@protoc_insertion_point(field_set_allocated:GroupProto.QueryGroupUsersRequest.groupName)
}

// -------------------------------------------------------------------

// QueryGroupUsersResponse

// .GroupProto.ResultCode result = 1;
inline bool QueryGroupUsersResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool QueryGroupUsersResponse::has_result() const {
  return _internal_has_result();
}
inline void QueryGroupUsersResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::GroupProto::ResultCode& QueryGroupUsersResponse::_internal_result() const {
  const ::GroupProto::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::GroupProto::ResultCode*>(
      &::GroupProto::_ResultCode_default_instance_);
}
inline const ::GroupProto::ResultCode& QueryGroupUsersResponse::result() const {
  // @@protoc_insertion_point(field_get:GroupProto.QueryGroupUsersResponse.result)
  return _internal_result();
}
inline ::GroupProto::ResultCode* QueryGroupUsersResponse::release_result() {
  // @@protoc_insertion_point(field_release:GroupProto.QueryGroupUsersResponse.result)
  
  ::GroupProto::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::GroupProto::ResultCode* QueryGroupUsersResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::GroupProto::ResultCode>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::GroupProto::ResultCode* QueryGroupUsersResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:GroupProto.QueryGroupUsersResponse.result)
  return _internal_mutable_result();
}
inline void QueryGroupUsersResponse::set_allocated_result(::GroupProto::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:GroupProto.QueryGroupUsersResponse.result)
}

// bool success = 2;
inline void QueryGroupUsersResponse::clear_success() {
  success_ = false;
}
inline bool QueryGroupUsersResponse::_internal_success() const {
  return success_;
}
inline bool QueryGroupUsersResponse::success() const {
  // @@protoc_insertion_point(field_get:GroupProto.QueryGroupUsersResponse.success)
  return _internal_success();
}
inline void QueryGroupUsersResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void QueryGroupUsersResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:GroupProto.QueryGroupUsersResponse.success)
}

// repeated .GroupProto.GroupUser groupUser = 3;
inline int QueryGroupUsersResponse::_internal_groupuser_size() const {
  return groupuser_.size();
}
inline int QueryGroupUsersResponse::groupuser_size() const {
  return _internal_groupuser_size();
}
inline void QueryGroupUsersResponse::clear_groupuser() {
  groupuser_.Clear();
}
inline ::GroupProto::GroupUser* QueryGroupUsersResponse::mutable_groupuser(int index) {
  // @@protoc_insertion_point(field_mutable:GroupProto.QueryGroupUsersResponse.groupUser)
  return groupuser_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GroupProto::GroupUser >*
QueryGroupUsersResponse::mutable_groupuser() {
  // @@protoc_insertion_point(field_mutable_list:GroupProto.QueryGroupUsersResponse.groupUser)
  return &groupuser_;
}
inline const ::GroupProto::GroupUser& QueryGroupUsersResponse::_internal_groupuser(int index) const {
  return groupuser_.Get(index);
}
inline const ::GroupProto::GroupUser& QueryGroupUsersResponse::groupuser(int index) const {
  // @@protoc_insertion_point(field_get:GroupProto.QueryGroupUsersResponse.groupUser)
  return _internal_groupuser(index);
}
inline ::GroupProto::GroupUser* QueryGroupUsersResponse::_internal_add_groupuser() {
  return groupuser_.Add();
}
inline ::GroupProto::GroupUser* QueryGroupUsersResponse::add_groupuser() {
  // @@protoc_insertion_point(field_add:GroupProto.QueryGroupUsersResponse.groupUser)
  return _internal_add_groupuser();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GroupProto::GroupUser >&
QueryGroupUsersResponse::groupuser() const {
  // @@protoc_insertion_point(field_list:GroupProto.QueryGroupUsersResponse.groupUser)
  return groupuser_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace GroupProto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Group_2eproto
