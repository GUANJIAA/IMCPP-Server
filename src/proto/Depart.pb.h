// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Depart.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Depart_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Depart_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Depart_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Depart_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Depart_2eproto;
namespace DepartProto {
class AddDepartRequest;
class AddDepartRequestDefaultTypeInternal;
extern AddDepartRequestDefaultTypeInternal _AddDepartRequest_default_instance_;
class AddDepartResponse;
class AddDepartResponseDefaultTypeInternal;
extern AddDepartResponseDefaultTypeInternal _AddDepartResponse_default_instance_;
class CreateDepartRequest;
class CreateDepartRequestDefaultTypeInternal;
extern CreateDepartRequestDefaultTypeInternal _CreateDepartRequest_default_instance_;
class CreateDepartResponse;
class CreateDepartResponseDefaultTypeInternal;
extern CreateDepartResponseDefaultTypeInternal _CreateDepartResponse_default_instance_;
class DelDepartRequest;
class DelDepartRequestDefaultTypeInternal;
extern DelDepartRequestDefaultTypeInternal _DelDepartRequest_default_instance_;
class DelDepartResponse;
class DelDepartResponseDefaultTypeInternal;
extern DelDepartResponseDefaultTypeInternal _DelDepartResponse_default_instance_;
class DepartInfo;
class DepartInfoDefaultTypeInternal;
extern DepartInfoDefaultTypeInternal _DepartInfo_default_instance_;
class DepartUser;
class DepartUserDefaultTypeInternal;
extern DepartUserDefaultTypeInternal _DepartUser_default_instance_;
class QueryDepartRequest;
class QueryDepartRequestDefaultTypeInternal;
extern QueryDepartRequestDefaultTypeInternal _QueryDepartRequest_default_instance_;
class QueryDepartResponse;
class QueryDepartResponseDefaultTypeInternal;
extern QueryDepartResponseDefaultTypeInternal _QueryDepartResponse_default_instance_;
class QueryDepartUsersRequest;
class QueryDepartUsersRequestDefaultTypeInternal;
extern QueryDepartUsersRequestDefaultTypeInternal _QueryDepartUsersRequest_default_instance_;
class QueryDepartUsersResponse;
class QueryDepartUsersResponseDefaultTypeInternal;
extern QueryDepartUsersResponseDefaultTypeInternal _QueryDepartUsersResponse_default_instance_;
class QuitDepartRequest;
class QuitDepartRequestDefaultTypeInternal;
extern QuitDepartRequestDefaultTypeInternal _QuitDepartRequest_default_instance_;
class QuitDepartResponse;
class QuitDepartResponseDefaultTypeInternal;
extern QuitDepartResponseDefaultTypeInternal _QuitDepartResponse_default_instance_;
class ResultCode;
class ResultCodeDefaultTypeInternal;
extern ResultCodeDefaultTypeInternal _ResultCode_default_instance_;
}  // namespace DepartProto
PROTOBUF_NAMESPACE_OPEN
template<> ::DepartProto::AddDepartRequest* Arena::CreateMaybeMessage<::DepartProto::AddDepartRequest>(Arena*);
template<> ::DepartProto::AddDepartResponse* Arena::CreateMaybeMessage<::DepartProto::AddDepartResponse>(Arena*);
template<> ::DepartProto::CreateDepartRequest* Arena::CreateMaybeMessage<::DepartProto::CreateDepartRequest>(Arena*);
template<> ::DepartProto::CreateDepartResponse* Arena::CreateMaybeMessage<::DepartProto::CreateDepartResponse>(Arena*);
template<> ::DepartProto::DelDepartRequest* Arena::CreateMaybeMessage<::DepartProto::DelDepartRequest>(Arena*);
template<> ::DepartProto::DelDepartResponse* Arena::CreateMaybeMessage<::DepartProto::DelDepartResponse>(Arena*);
template<> ::DepartProto::DepartInfo* Arena::CreateMaybeMessage<::DepartProto::DepartInfo>(Arena*);
template<> ::DepartProto::DepartUser* Arena::CreateMaybeMessage<::DepartProto::DepartUser>(Arena*);
template<> ::DepartProto::QueryDepartRequest* Arena::CreateMaybeMessage<::DepartProto::QueryDepartRequest>(Arena*);
template<> ::DepartProto::QueryDepartResponse* Arena::CreateMaybeMessage<::DepartProto::QueryDepartResponse>(Arena*);
template<> ::DepartProto::QueryDepartUsersRequest* Arena::CreateMaybeMessage<::DepartProto::QueryDepartUsersRequest>(Arena*);
template<> ::DepartProto::QueryDepartUsersResponse* Arena::CreateMaybeMessage<::DepartProto::QueryDepartUsersResponse>(Arena*);
template<> ::DepartProto::QuitDepartRequest* Arena::CreateMaybeMessage<::DepartProto::QuitDepartRequest>(Arena*);
template<> ::DepartProto::QuitDepartResponse* Arena::CreateMaybeMessage<::DepartProto::QuitDepartResponse>(Arena*);
template<> ::DepartProto::ResultCode* Arena::CreateMaybeMessage<::DepartProto::ResultCode>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DepartProto {

// ===================================================================

class DepartUser :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DepartProto.DepartUser) */ {
 public:
  DepartUser();
  virtual ~DepartUser();

  DepartUser(const DepartUser& from);
  DepartUser(DepartUser&& from) noexcept
    : DepartUser() {
    *this = ::std::move(from);
  }

  inline DepartUser& operator=(const DepartUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline DepartUser& operator=(DepartUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DepartUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DepartUser* internal_default_instance() {
    return reinterpret_cast<const DepartUser*>(
               &_DepartUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DepartUser& a, DepartUser& b) {
    a.Swap(&b);
  }
  inline void Swap(DepartUser* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DepartUser* New() const final {
    return CreateMaybeMessage<DepartUser>(nullptr);
  }

  DepartUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DepartUser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DepartUser& from);
  void MergeFrom(const DepartUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DepartUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DepartProto.DepartUser";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Depart_2eproto);
    return ::descriptor_table_Depart_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kUserEmailFieldNumber = 2,
    kUserPhoneFieldNumber = 3,
    kUserRoleFieldNumber = 4,
  };
  // bytes userName = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const void* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // bytes userEmail = 2;
  void clear_useremail();
  const std::string& useremail() const;
  void set_useremail(const std::string& value);
  void set_useremail(std::string&& value);
  void set_useremail(const char* value);
  void set_useremail(const void* value, size_t size);
  std::string* mutable_useremail();
  std::string* release_useremail();
  void set_allocated_useremail(std::string* useremail);
  private:
  const std::string& _internal_useremail() const;
  void _internal_set_useremail(const std::string& value);
  std::string* _internal_mutable_useremail();
  public:

  // bytes userPhone = 3;
  void clear_userphone();
  const std::string& userphone() const;
  void set_userphone(const std::string& value);
  void set_userphone(std::string&& value);
  void set_userphone(const char* value);
  void set_userphone(const void* value, size_t size);
  std::string* mutable_userphone();
  std::string* release_userphone();
  void set_allocated_userphone(std::string* userphone);
  private:
  const std::string& _internal_userphone() const;
  void _internal_set_userphone(const std::string& value);
  std::string* _internal_mutable_userphone();
  public:

  // bytes userRole = 4;
  void clear_userrole();
  const std::string& userrole() const;
  void set_userrole(const std::string& value);
  void set_userrole(std::string&& value);
  void set_userrole(const char* value);
  void set_userrole(const void* value, size_t size);
  std::string* mutable_userrole();
  std::string* release_userrole();
  void set_allocated_userrole(std::string* userrole);
  private:
  const std::string& _internal_userrole() const;
  void _internal_set_userrole(const std::string& value);
  std::string* _internal_mutable_userrole();
  public:

  // @@protoc_insertion_point(class_scope:DepartProto.DepartUser)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr useremail_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userphone_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userrole_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Depart_2eproto;
};
// -------------------------------------------------------------------

class DepartInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DepartProto.DepartInfo) */ {
 public:
  DepartInfo();
  virtual ~DepartInfo();

  DepartInfo(const DepartInfo& from);
  DepartInfo(DepartInfo&& from) noexcept
    : DepartInfo() {
    *this = ::std::move(from);
  }

  inline DepartInfo& operator=(const DepartInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DepartInfo& operator=(DepartInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DepartInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DepartInfo* internal_default_instance() {
    return reinterpret_cast<const DepartInfo*>(
               &_DepartInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DepartInfo& a, DepartInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DepartInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DepartInfo* New() const final {
    return CreateMaybeMessage<DepartInfo>(nullptr);
  }

  DepartInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DepartInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DepartInfo& from);
  void MergeFrom(const DepartInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DepartInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DepartProto.DepartInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Depart_2eproto);
    return ::descriptor_table_Depart_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDepartUsersFieldNumber = 4,
    kDepartNameFieldNumber = 2,
    kDepartDescFieldNumber = 3,
    kDepartIdFieldNumber = 1,
  };
  // repeated .DepartProto.DepartUser departUsers = 4;
  int departusers_size() const;
  private:
  int _internal_departusers_size() const;
  public:
  void clear_departusers();
  ::DepartProto::DepartUser* mutable_departusers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DepartProto::DepartUser >*
      mutable_departusers();
  private:
  const ::DepartProto::DepartUser& _internal_departusers(int index) const;
  ::DepartProto::DepartUser* _internal_add_departusers();
  public:
  const ::DepartProto::DepartUser& departusers(int index) const;
  ::DepartProto::DepartUser* add_departusers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DepartProto::DepartUser >&
      departusers() const;

  // bytes departName = 2;
  void clear_departname();
  const std::string& departname() const;
  void set_departname(const std::string& value);
  void set_departname(std::string&& value);
  void set_departname(const char* value);
  void set_departname(const void* value, size_t size);
  std::string* mutable_departname();
  std::string* release_departname();
  void set_allocated_departname(std::string* departname);
  private:
  const std::string& _internal_departname() const;
  void _internal_set_departname(const std::string& value);
  std::string* _internal_mutable_departname();
  public:

  // bytes departDesc = 3;
  void clear_departdesc();
  const std::string& departdesc() const;
  void set_departdesc(const std::string& value);
  void set_departdesc(std::string&& value);
  void set_departdesc(const char* value);
  void set_departdesc(const void* value, size_t size);
  std::string* mutable_departdesc();
  std::string* release_departdesc();
  void set_allocated_departdesc(std::string* departdesc);
  private:
  const std::string& _internal_departdesc() const;
  void _internal_set_departdesc(const std::string& value);
  std::string* _internal_mutable_departdesc();
  public:

  // int32 departId = 1;
  void clear_departid();
  ::PROTOBUF_NAMESPACE_ID::int32 departid() const;
  void set_departid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_departid() const;
  void _internal_set_departid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DepartProto.DepartInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DepartProto::DepartUser > departusers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr departname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr departdesc_;
  ::PROTOBUF_NAMESPACE_ID::int32 departid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Depart_2eproto;
};
// -------------------------------------------------------------------

class ResultCode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DepartProto.ResultCode) */ {
 public:
  ResultCode();
  virtual ~ResultCode();

  ResultCode(const ResultCode& from);
  ResultCode(ResultCode&& from) noexcept
    : ResultCode() {
    *this = ::std::move(from);
  }

  inline ResultCode& operator=(const ResultCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultCode& operator=(ResultCode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResultCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResultCode* internal_default_instance() {
    return reinterpret_cast<const ResultCode*>(
               &_ResultCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ResultCode& a, ResultCode& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultCode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResultCode* New() const final {
    return CreateMaybeMessage<ResultCode>(nullptr);
  }

  ResultCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResultCode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResultCode& from);
  void MergeFrom(const ResultCode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultCode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DepartProto.ResultCode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Depart_2eproto);
    return ::descriptor_table_Depart_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 2,
    kErrcodeFieldNumber = 1,
  };
  // bytes errmsg = 2;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const void* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // int32 errcode = 1;
  void clear_errcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errcode() const;
  void set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errcode() const;
  void _internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DepartProto.ResultCode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::int32 errcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Depart_2eproto;
};
// -------------------------------------------------------------------

class CreateDepartRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DepartProto.CreateDepartRequest) */ {
 public:
  CreateDepartRequest();
  virtual ~CreateDepartRequest();

  CreateDepartRequest(const CreateDepartRequest& from);
  CreateDepartRequest(CreateDepartRequest&& from) noexcept
    : CreateDepartRequest() {
    *this = ::std::move(from);
  }

  inline CreateDepartRequest& operator=(const CreateDepartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateDepartRequest& operator=(CreateDepartRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateDepartRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateDepartRequest* internal_default_instance() {
    return reinterpret_cast<const CreateDepartRequest*>(
               &_CreateDepartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateDepartRequest& a, CreateDepartRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateDepartRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateDepartRequest* New() const final {
    return CreateMaybeMessage<CreateDepartRequest>(nullptr);
  }

  CreateDepartRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateDepartRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateDepartRequest& from);
  void MergeFrom(const CreateDepartRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDepartRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DepartProto.CreateDepartRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Depart_2eproto);
    return ::descriptor_table_Depart_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDepartFieldNumber = 1,
  };
  // .DepartProto.DepartInfo depart = 1;
  bool has_depart() const;
  private:
  bool _internal_has_depart() const;
  public:
  void clear_depart();
  const ::DepartProto::DepartInfo& depart() const;
  ::DepartProto::DepartInfo* release_depart();
  ::DepartProto::DepartInfo* mutable_depart();
  void set_allocated_depart(::DepartProto::DepartInfo* depart);
  private:
  const ::DepartProto::DepartInfo& _internal_depart() const;
  ::DepartProto::DepartInfo* _internal_mutable_depart();
  public:

  // @@protoc_insertion_point(class_scope:DepartProto.CreateDepartRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::DepartProto::DepartInfo* depart_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Depart_2eproto;
};
// -------------------------------------------------------------------

class CreateDepartResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DepartProto.CreateDepartResponse) */ {
 public:
  CreateDepartResponse();
  virtual ~CreateDepartResponse();

  CreateDepartResponse(const CreateDepartResponse& from);
  CreateDepartResponse(CreateDepartResponse&& from) noexcept
    : CreateDepartResponse() {
    *this = ::std::move(from);
  }

  inline CreateDepartResponse& operator=(const CreateDepartResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateDepartResponse& operator=(CreateDepartResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateDepartResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateDepartResponse* internal_default_instance() {
    return reinterpret_cast<const CreateDepartResponse*>(
               &_CreateDepartResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreateDepartResponse& a, CreateDepartResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateDepartResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateDepartResponse* New() const final {
    return CreateMaybeMessage<CreateDepartResponse>(nullptr);
  }

  CreateDepartResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateDepartResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateDepartResponse& from);
  void MergeFrom(const CreateDepartResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDepartResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DepartProto.CreateDepartResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Depart_2eproto);
    return ::descriptor_table_Depart_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // .DepartProto.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::DepartProto::ResultCode& result() const;
  ::DepartProto::ResultCode* release_result();
  ::DepartProto::ResultCode* mutable_result();
  void set_allocated_result(::DepartProto::ResultCode* result);
  private:
  const ::DepartProto::ResultCode& _internal_result() const;
  ::DepartProto::ResultCode* _internal_mutable_result();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DepartProto.CreateDepartResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::DepartProto::ResultCode* result_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Depart_2eproto;
};
// -------------------------------------------------------------------

class DelDepartRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DepartProto.DelDepartRequest) */ {
 public:
  DelDepartRequest();
  virtual ~DelDepartRequest();

  DelDepartRequest(const DelDepartRequest& from);
  DelDepartRequest(DelDepartRequest&& from) noexcept
    : DelDepartRequest() {
    *this = ::std::move(from);
  }

  inline DelDepartRequest& operator=(const DelDepartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelDepartRequest& operator=(DelDepartRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DelDepartRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DelDepartRequest* internal_default_instance() {
    return reinterpret_cast<const DelDepartRequest*>(
               &_DelDepartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DelDepartRequest& a, DelDepartRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DelDepartRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DelDepartRequest* New() const final {
    return CreateMaybeMessage<DelDepartRequest>(nullptr);
  }

  DelDepartRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DelDepartRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DelDepartRequest& from);
  void MergeFrom(const DelDepartRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelDepartRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DepartProto.DelDepartRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Depart_2eproto);
    return ::descriptor_table_Depart_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDepartNameFieldNumber = 1,
    kUserNameFieldNumber = 2,
  };
  // bytes departName = 1;
  void clear_departname();
  const std::string& departname() const;
  void set_departname(const std::string& value);
  void set_departname(std::string&& value);
  void set_departname(const char* value);
  void set_departname(const void* value, size_t size);
  std::string* mutable_departname();
  std::string* release_departname();
  void set_allocated_departname(std::string* departname);
  private:
  const std::string& _internal_departname() const;
  void _internal_set_departname(const std::string& value);
  std::string* _internal_mutable_departname();
  public:

  // bytes userName = 2;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const void* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // @@protoc_insertion_point(class_scope:DepartProto.DelDepartRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr departname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Depart_2eproto;
};
// -------------------------------------------------------------------

class DelDepartResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DepartProto.DelDepartResponse) */ {
 public:
  DelDepartResponse();
  virtual ~DelDepartResponse();

  DelDepartResponse(const DelDepartResponse& from);
  DelDepartResponse(DelDepartResponse&& from) noexcept
    : DelDepartResponse() {
    *this = ::std::move(from);
  }

  inline DelDepartResponse& operator=(const DelDepartResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelDepartResponse& operator=(DelDepartResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DelDepartResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DelDepartResponse* internal_default_instance() {
    return reinterpret_cast<const DelDepartResponse*>(
               &_DelDepartResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DelDepartResponse& a, DelDepartResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DelDepartResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DelDepartResponse* New() const final {
    return CreateMaybeMessage<DelDepartResponse>(nullptr);
  }

  DelDepartResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DelDepartResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DelDepartResponse& from);
  void MergeFrom(const DelDepartResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelDepartResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DepartProto.DelDepartResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Depart_2eproto);
    return ::descriptor_table_Depart_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // .DepartProto.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::DepartProto::ResultCode& result() const;
  ::DepartProto::ResultCode* release_result();
  ::DepartProto::ResultCode* mutable_result();
  void set_allocated_result(::DepartProto::ResultCode* result);
  private:
  const ::DepartProto::ResultCode& _internal_result() const;
  ::DepartProto::ResultCode* _internal_mutable_result();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DepartProto.DelDepartResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::DepartProto::ResultCode* result_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Depart_2eproto;
};
// -------------------------------------------------------------------

class AddDepartRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DepartProto.AddDepartRequest) */ {
 public:
  AddDepartRequest();
  virtual ~AddDepartRequest();

  AddDepartRequest(const AddDepartRequest& from);
  AddDepartRequest(AddDepartRequest&& from) noexcept
    : AddDepartRequest() {
    *this = ::std::move(from);
  }

  inline AddDepartRequest& operator=(const AddDepartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddDepartRequest& operator=(AddDepartRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddDepartRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddDepartRequest* internal_default_instance() {
    return reinterpret_cast<const AddDepartRequest*>(
               &_AddDepartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AddDepartRequest& a, AddDepartRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddDepartRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddDepartRequest* New() const final {
    return CreateMaybeMessage<AddDepartRequest>(nullptr);
  }

  AddDepartRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddDepartRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddDepartRequest& from);
  void MergeFrom(const AddDepartRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddDepartRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DepartProto.AddDepartRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Depart_2eproto);
    return ::descriptor_table_Depart_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kDepartNameFieldNumber = 2,
    kUserRoleFieldNumber = 3,
  };
  // bytes userName = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const void* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // bytes departName = 2;
  void clear_departname();
  const std::string& departname() const;
  void set_departname(const std::string& value);
  void set_departname(std::string&& value);
  void set_departname(const char* value);
  void set_departname(const void* value, size_t size);
  std::string* mutable_departname();
  std::string* release_departname();
  void set_allocated_departname(std::string* departname);
  private:
  const std::string& _internal_departname() const;
  void _internal_set_departname(const std::string& value);
  std::string* _internal_mutable_departname();
  public:

  // bytes userRole = 3;
  void clear_userrole();
  const std::string& userrole() const;
  void set_userrole(const std::string& value);
  void set_userrole(std::string&& value);
  void set_userrole(const char* value);
  void set_userrole(const void* value, size_t size);
  std::string* mutable_userrole();
  std::string* release_userrole();
  void set_allocated_userrole(std::string* userrole);
  private:
  const std::string& _internal_userrole() const;
  void _internal_set_userrole(const std::string& value);
  std::string* _internal_mutable_userrole();
  public:

  // @@protoc_insertion_point(class_scope:DepartProto.AddDepartRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr departname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userrole_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Depart_2eproto;
};
// -------------------------------------------------------------------

class AddDepartResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DepartProto.AddDepartResponse) */ {
 public:
  AddDepartResponse();
  virtual ~AddDepartResponse();

  AddDepartResponse(const AddDepartResponse& from);
  AddDepartResponse(AddDepartResponse&& from) noexcept
    : AddDepartResponse() {
    *this = ::std::move(from);
  }

  inline AddDepartResponse& operator=(const AddDepartResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddDepartResponse& operator=(AddDepartResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddDepartResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddDepartResponse* internal_default_instance() {
    return reinterpret_cast<const AddDepartResponse*>(
               &_AddDepartResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AddDepartResponse& a, AddDepartResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddDepartResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddDepartResponse* New() const final {
    return CreateMaybeMessage<AddDepartResponse>(nullptr);
  }

  AddDepartResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddDepartResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddDepartResponse& from);
  void MergeFrom(const AddDepartResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddDepartResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DepartProto.AddDepartResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Depart_2eproto);
    return ::descriptor_table_Depart_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // .DepartProto.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::DepartProto::ResultCode& result() const;
  ::DepartProto::ResultCode* release_result();
  ::DepartProto::ResultCode* mutable_result();
  void set_allocated_result(::DepartProto::ResultCode* result);
  private:
  const ::DepartProto::ResultCode& _internal_result() const;
  ::DepartProto::ResultCode* _internal_mutable_result();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DepartProto.AddDepartResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::DepartProto::ResultCode* result_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Depart_2eproto;
};
// -------------------------------------------------------------------

class QuitDepartRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DepartProto.QuitDepartRequest) */ {
 public:
  QuitDepartRequest();
  virtual ~QuitDepartRequest();

  QuitDepartRequest(const QuitDepartRequest& from);
  QuitDepartRequest(QuitDepartRequest&& from) noexcept
    : QuitDepartRequest() {
    *this = ::std::move(from);
  }

  inline QuitDepartRequest& operator=(const QuitDepartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuitDepartRequest& operator=(QuitDepartRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QuitDepartRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuitDepartRequest* internal_default_instance() {
    return reinterpret_cast<const QuitDepartRequest*>(
               &_QuitDepartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(QuitDepartRequest& a, QuitDepartRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QuitDepartRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QuitDepartRequest* New() const final {
    return CreateMaybeMessage<QuitDepartRequest>(nullptr);
  }

  QuitDepartRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QuitDepartRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QuitDepartRequest& from);
  void MergeFrom(const QuitDepartRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuitDepartRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DepartProto.QuitDepartRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Depart_2eproto);
    return ::descriptor_table_Depart_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDepartNameFieldNumber = 1,
    kUserNameFieldNumber = 2,
  };
  // bytes departName = 1;
  void clear_departname();
  const std::string& departname() const;
  void set_departname(const std::string& value);
  void set_departname(std::string&& value);
  void set_departname(const char* value);
  void set_departname(const void* value, size_t size);
  std::string* mutable_departname();
  std::string* release_departname();
  void set_allocated_departname(std::string* departname);
  private:
  const std::string& _internal_departname() const;
  void _internal_set_departname(const std::string& value);
  std::string* _internal_mutable_departname();
  public:

  // bytes userName = 2;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const void* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // @@protoc_insertion_point(class_scope:DepartProto.QuitDepartRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr departname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Depart_2eproto;
};
// -------------------------------------------------------------------

class QuitDepartResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DepartProto.QuitDepartResponse) */ {
 public:
  QuitDepartResponse();
  virtual ~QuitDepartResponse();

  QuitDepartResponse(const QuitDepartResponse& from);
  QuitDepartResponse(QuitDepartResponse&& from) noexcept
    : QuitDepartResponse() {
    *this = ::std::move(from);
  }

  inline QuitDepartResponse& operator=(const QuitDepartResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuitDepartResponse& operator=(QuitDepartResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QuitDepartResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuitDepartResponse* internal_default_instance() {
    return reinterpret_cast<const QuitDepartResponse*>(
               &_QuitDepartResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(QuitDepartResponse& a, QuitDepartResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QuitDepartResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QuitDepartResponse* New() const final {
    return CreateMaybeMessage<QuitDepartResponse>(nullptr);
  }

  QuitDepartResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QuitDepartResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QuitDepartResponse& from);
  void MergeFrom(const QuitDepartResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuitDepartResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DepartProto.QuitDepartResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Depart_2eproto);
    return ::descriptor_table_Depart_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // .DepartProto.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::DepartProto::ResultCode& result() const;
  ::DepartProto::ResultCode* release_result();
  ::DepartProto::ResultCode* mutable_result();
  void set_allocated_result(::DepartProto::ResultCode* result);
  private:
  const ::DepartProto::ResultCode& _internal_result() const;
  ::DepartProto::ResultCode* _internal_mutable_result();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DepartProto.QuitDepartResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::DepartProto::ResultCode* result_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Depart_2eproto;
};
// -------------------------------------------------------------------

class QueryDepartRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DepartProto.QueryDepartRequest) */ {
 public:
  QueryDepartRequest();
  virtual ~QueryDepartRequest();

  QueryDepartRequest(const QueryDepartRequest& from);
  QueryDepartRequest(QueryDepartRequest&& from) noexcept
    : QueryDepartRequest() {
    *this = ::std::move(from);
  }

  inline QueryDepartRequest& operator=(const QueryDepartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryDepartRequest& operator=(QueryDepartRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryDepartRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryDepartRequest* internal_default_instance() {
    return reinterpret_cast<const QueryDepartRequest*>(
               &_QueryDepartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(QueryDepartRequest& a, QueryDepartRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryDepartRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryDepartRequest* New() const final {
    return CreateMaybeMessage<QueryDepartRequest>(nullptr);
  }

  QueryDepartRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryDepartRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryDepartRequest& from);
  void MergeFrom(const QueryDepartRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryDepartRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DepartProto.QueryDepartRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Depart_2eproto);
    return ::descriptor_table_Depart_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
  };
  // bytes userName = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const void* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // @@protoc_insertion_point(class_scope:DepartProto.QueryDepartRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Depart_2eproto;
};
// -------------------------------------------------------------------

class QueryDepartResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DepartProto.QueryDepartResponse) */ {
 public:
  QueryDepartResponse();
  virtual ~QueryDepartResponse();

  QueryDepartResponse(const QueryDepartResponse& from);
  QueryDepartResponse(QueryDepartResponse&& from) noexcept
    : QueryDepartResponse() {
    *this = ::std::move(from);
  }

  inline QueryDepartResponse& operator=(const QueryDepartResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryDepartResponse& operator=(QueryDepartResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryDepartResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryDepartResponse* internal_default_instance() {
    return reinterpret_cast<const QueryDepartResponse*>(
               &_QueryDepartResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(QueryDepartResponse& a, QueryDepartResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryDepartResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryDepartResponse* New() const final {
    return CreateMaybeMessage<QueryDepartResponse>(nullptr);
  }

  QueryDepartResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryDepartResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryDepartResponse& from);
  void MergeFrom(const QueryDepartResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryDepartResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DepartProto.QueryDepartResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Depart_2eproto);
    return ::descriptor_table_Depart_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kDepartsFieldNumber = 3,
    kSuccessFieldNumber = 2,
  };
  // .DepartProto.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::DepartProto::ResultCode& result() const;
  ::DepartProto::ResultCode* release_result();
  ::DepartProto::ResultCode* mutable_result();
  void set_allocated_result(::DepartProto::ResultCode* result);
  private:
  const ::DepartProto::ResultCode& _internal_result() const;
  ::DepartProto::ResultCode* _internal_mutable_result();
  public:

  // .DepartProto.DepartInfo departs = 3;
  bool has_departs() const;
  private:
  bool _internal_has_departs() const;
  public:
  void clear_departs();
  const ::DepartProto::DepartInfo& departs() const;
  ::DepartProto::DepartInfo* release_departs();
  ::DepartProto::DepartInfo* mutable_departs();
  void set_allocated_departs(::DepartProto::DepartInfo* departs);
  private:
  const ::DepartProto::DepartInfo& _internal_departs() const;
  ::DepartProto::DepartInfo* _internal_mutable_departs();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DepartProto.QueryDepartResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::DepartProto::ResultCode* result_;
  ::DepartProto::DepartInfo* departs_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Depart_2eproto;
};
// -------------------------------------------------------------------

class QueryDepartUsersRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DepartProto.QueryDepartUsersRequest) */ {
 public:
  QueryDepartUsersRequest();
  virtual ~QueryDepartUsersRequest();

  QueryDepartUsersRequest(const QueryDepartUsersRequest& from);
  QueryDepartUsersRequest(QueryDepartUsersRequest&& from) noexcept
    : QueryDepartUsersRequest() {
    *this = ::std::move(from);
  }

  inline QueryDepartUsersRequest& operator=(const QueryDepartUsersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryDepartUsersRequest& operator=(QueryDepartUsersRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryDepartUsersRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryDepartUsersRequest* internal_default_instance() {
    return reinterpret_cast<const QueryDepartUsersRequest*>(
               &_QueryDepartUsersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(QueryDepartUsersRequest& a, QueryDepartUsersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryDepartUsersRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryDepartUsersRequest* New() const final {
    return CreateMaybeMessage<QueryDepartUsersRequest>(nullptr);
  }

  QueryDepartUsersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryDepartUsersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryDepartUsersRequest& from);
  void MergeFrom(const QueryDepartUsersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryDepartUsersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DepartProto.QueryDepartUsersRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Depart_2eproto);
    return ::descriptor_table_Depart_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kDepartNameFieldNumber = 2,
  };
  // bytes userName = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const void* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // bytes departName = 2;
  void clear_departname();
  const std::string& departname() const;
  void set_departname(const std::string& value);
  void set_departname(std::string&& value);
  void set_departname(const char* value);
  void set_departname(const void* value, size_t size);
  std::string* mutable_departname();
  std::string* release_departname();
  void set_allocated_departname(std::string* departname);
  private:
  const std::string& _internal_departname() const;
  void _internal_set_departname(const std::string& value);
  std::string* _internal_mutable_departname();
  public:

  // @@protoc_insertion_point(class_scope:DepartProto.QueryDepartUsersRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr departname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Depart_2eproto;
};
// -------------------------------------------------------------------

class QueryDepartUsersResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DepartProto.QueryDepartUsersResponse) */ {
 public:
  QueryDepartUsersResponse();
  virtual ~QueryDepartUsersResponse();

  QueryDepartUsersResponse(const QueryDepartUsersResponse& from);
  QueryDepartUsersResponse(QueryDepartUsersResponse&& from) noexcept
    : QueryDepartUsersResponse() {
    *this = ::std::move(from);
  }

  inline QueryDepartUsersResponse& operator=(const QueryDepartUsersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryDepartUsersResponse& operator=(QueryDepartUsersResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryDepartUsersResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryDepartUsersResponse* internal_default_instance() {
    return reinterpret_cast<const QueryDepartUsersResponse*>(
               &_QueryDepartUsersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(QueryDepartUsersResponse& a, QueryDepartUsersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryDepartUsersResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryDepartUsersResponse* New() const final {
    return CreateMaybeMessage<QueryDepartUsersResponse>(nullptr);
  }

  QueryDepartUsersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryDepartUsersResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryDepartUsersResponse& from);
  void MergeFrom(const QueryDepartUsersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryDepartUsersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DepartProto.QueryDepartUsersResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Depart_2eproto);
    return ::descriptor_table_Depart_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDepartUserNameFieldNumber = 3,
    kResultFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // repeated bytes departUserName = 3;
  int departusername_size() const;
  private:
  int _internal_departusername_size() const;
  public:
  void clear_departusername();
  const std::string& departusername(int index) const;
  std::string* mutable_departusername(int index);
  void set_departusername(int index, const std::string& value);
  void set_departusername(int index, std::string&& value);
  void set_departusername(int index, const char* value);
  void set_departusername(int index, const void* value, size_t size);
  std::string* add_departusername();
  void add_departusername(const std::string& value);
  void add_departusername(std::string&& value);
  void add_departusername(const char* value);
  void add_departusername(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& departusername() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_departusername();
  private:
  const std::string& _internal_departusername(int index) const;
  std::string* _internal_add_departusername();
  public:

  // .DepartProto.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::DepartProto::ResultCode& result() const;
  ::DepartProto::ResultCode* release_result();
  ::DepartProto::ResultCode* mutable_result();
  void set_allocated_result(::DepartProto::ResultCode* result);
  private:
  const ::DepartProto::ResultCode& _internal_result() const;
  ::DepartProto::ResultCode* _internal_mutable_result();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DepartProto.QueryDepartUsersResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> departusername_;
  ::DepartProto::ResultCode* result_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Depart_2eproto;
};
// ===================================================================

class DepartServiceRpc_Stub;

class DepartServiceRpc : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline DepartServiceRpc() {};
 public:
  virtual ~DepartServiceRpc();

  typedef DepartServiceRpc_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void CreateDepart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::DepartProto::CreateDepartRequest* request,
                       ::DepartProto::CreateDepartResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void DelDepart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::DepartProto::DelDepartRequest* request,
                       ::DepartProto::DelDepartResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void AddDepart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::DepartProto::AddDepartRequest* request,
                       ::DepartProto::AddDepartResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void QuitDepart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::DepartProto::QuitDepartRequest* request,
                       ::DepartProto::QuitDepartResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void QueryDepart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::DepartProto::QueryDepartRequest* request,
                       ::DepartProto::QueryDepartResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void QueryDepartUsers(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::DepartProto::QueryDepartUsersRequest* request,
                       ::DepartProto::QueryDepartUsersResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(DepartServiceRpc);
};

class DepartServiceRpc_Stub : public DepartServiceRpc {
 public:
  DepartServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  DepartServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~DepartServiceRpc_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements DepartServiceRpc ------------------------------------------

  void CreateDepart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::DepartProto::CreateDepartRequest* request,
                       ::DepartProto::CreateDepartResponse* response,
                       ::google::protobuf::Closure* done);
  void DelDepart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::DepartProto::DelDepartRequest* request,
                       ::DepartProto::DelDepartResponse* response,
                       ::google::protobuf::Closure* done);
  void AddDepart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::DepartProto::AddDepartRequest* request,
                       ::DepartProto::AddDepartResponse* response,
                       ::google::protobuf::Closure* done);
  void QuitDepart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::DepartProto::QuitDepartRequest* request,
                       ::DepartProto::QuitDepartResponse* response,
                       ::google::protobuf::Closure* done);
  void QueryDepart(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::DepartProto::QueryDepartRequest* request,
                       ::DepartProto::QueryDepartResponse* response,
                       ::google::protobuf::Closure* done);
  void QueryDepartUsers(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::DepartProto::QueryDepartUsersRequest* request,
                       ::DepartProto::QueryDepartUsersResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(DepartServiceRpc_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DepartUser

// bytes userName = 1;
inline void DepartUser::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DepartUser::username() const {
  // @@protoc_insertion_point(field_get:DepartProto.DepartUser.userName)
  return _internal_username();
}
inline void DepartUser::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:DepartProto.DepartUser.userName)
}
inline std::string* DepartUser::mutable_username() {
  // @@protoc_insertion_point(field_mutable:DepartProto.DepartUser.userName)
  return _internal_mutable_username();
}
inline const std::string& DepartUser::_internal_username() const {
  return username_.GetNoArena();
}
inline void DepartUser::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DepartUser::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DepartProto.DepartUser.userName)
}
inline void DepartUser::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DepartProto.DepartUser.userName)
}
inline void DepartUser::set_username(const void* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DepartProto.DepartUser.userName)
}
inline std::string* DepartUser::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DepartUser::release_username() {
  // @@protoc_insertion_point(field_release:DepartProto.DepartUser.userName)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DepartUser::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:DepartProto.DepartUser.userName)
}

// bytes userEmail = 2;
inline void DepartUser::clear_useremail() {
  useremail_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DepartUser::useremail() const {
  // @@protoc_insertion_point(field_get:DepartProto.DepartUser.userEmail)
  return _internal_useremail();
}
inline void DepartUser::set_useremail(const std::string& value) {
  _internal_set_useremail(value);
  // @@protoc_insertion_point(field_set:DepartProto.DepartUser.userEmail)
}
inline std::string* DepartUser::mutable_useremail() {
  // @@protoc_insertion_point(field_mutable:DepartProto.DepartUser.userEmail)
  return _internal_mutable_useremail();
}
inline const std::string& DepartUser::_internal_useremail() const {
  return useremail_.GetNoArena();
}
inline void DepartUser::_internal_set_useremail(const std::string& value) {
  
  useremail_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DepartUser::set_useremail(std::string&& value) {
  
  useremail_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DepartProto.DepartUser.userEmail)
}
inline void DepartUser::set_useremail(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  useremail_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DepartProto.DepartUser.userEmail)
}
inline void DepartUser::set_useremail(const void* value, size_t size) {
  
  useremail_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DepartProto.DepartUser.userEmail)
}
inline std::string* DepartUser::_internal_mutable_useremail() {
  
  return useremail_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DepartUser::release_useremail() {
  // @@protoc_insertion_point(field_release:DepartProto.DepartUser.userEmail)
  
  return useremail_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DepartUser::set_allocated_useremail(std::string* useremail) {
  if (useremail != nullptr) {
    
  } else {
    
  }
  useremail_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), useremail);
  // @@protoc_insertion_point(field_set_allocated:DepartProto.DepartUser.userEmail)
}

// bytes userPhone = 3;
inline void DepartUser::clear_userphone() {
  userphone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DepartUser::userphone() const {
  // @@protoc_insertion_point(field_get:DepartProto.DepartUser.userPhone)
  return _internal_userphone();
}
inline void DepartUser::set_userphone(const std::string& value) {
  _internal_set_userphone(value);
  // @@protoc_insertion_point(field_set:DepartProto.DepartUser.userPhone)
}
inline std::string* DepartUser::mutable_userphone() {
  // @@protoc_insertion_point(field_mutable:DepartProto.DepartUser.userPhone)
  return _internal_mutable_userphone();
}
inline const std::string& DepartUser::_internal_userphone() const {
  return userphone_.GetNoArena();
}
inline void DepartUser::_internal_set_userphone(const std::string& value) {
  
  userphone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DepartUser::set_userphone(std::string&& value) {
  
  userphone_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DepartProto.DepartUser.userPhone)
}
inline void DepartUser::set_userphone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userphone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DepartProto.DepartUser.userPhone)
}
inline void DepartUser::set_userphone(const void* value, size_t size) {
  
  userphone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DepartProto.DepartUser.userPhone)
}
inline std::string* DepartUser::_internal_mutable_userphone() {
  
  return userphone_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DepartUser::release_userphone() {
  // @@protoc_insertion_point(field_release:DepartProto.DepartUser.userPhone)
  
  return userphone_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DepartUser::set_allocated_userphone(std::string* userphone) {
  if (userphone != nullptr) {
    
  } else {
    
  }
  userphone_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userphone);
  // @@protoc_insertion_point(field_set_allocated:DepartProto.DepartUser.userPhone)
}

// bytes userRole = 4;
inline void DepartUser::clear_userrole() {
  userrole_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DepartUser::userrole() const {
  // @@protoc_insertion_point(field_get:DepartProto.DepartUser.userRole)
  return _internal_userrole();
}
inline void DepartUser::set_userrole(const std::string& value) {
  _internal_set_userrole(value);
  // @@protoc_insertion_point(field_set:DepartProto.DepartUser.userRole)
}
inline std::string* DepartUser::mutable_userrole() {
  // @@protoc_insertion_point(field_mutable:DepartProto.DepartUser.userRole)
  return _internal_mutable_userrole();
}
inline const std::string& DepartUser::_internal_userrole() const {
  return userrole_.GetNoArena();
}
inline void DepartUser::_internal_set_userrole(const std::string& value) {
  
  userrole_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DepartUser::set_userrole(std::string&& value) {
  
  userrole_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DepartProto.DepartUser.userRole)
}
inline void DepartUser::set_userrole(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userrole_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DepartProto.DepartUser.userRole)
}
inline void DepartUser::set_userrole(const void* value, size_t size) {
  
  userrole_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DepartProto.DepartUser.userRole)
}
inline std::string* DepartUser::_internal_mutable_userrole() {
  
  return userrole_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DepartUser::release_userrole() {
  // @@protoc_insertion_point(field_release:DepartProto.DepartUser.userRole)
  
  return userrole_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DepartUser::set_allocated_userrole(std::string* userrole) {
  if (userrole != nullptr) {
    
  } else {
    
  }
  userrole_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userrole);
  // @@protoc_insertion_point(field_set_allocated:DepartProto.DepartUser.userRole)
}

// -------------------------------------------------------------------

// DepartInfo

// int32 departId = 1;
inline void DepartInfo::clear_departid() {
  departid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DepartInfo::_internal_departid() const {
  return departid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DepartInfo::departid() const {
  // @@protoc_insertion_point(field_get:DepartProto.DepartInfo.departId)
  return _internal_departid();
}
inline void DepartInfo::_internal_set_departid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  departid_ = value;
}
inline void DepartInfo::set_departid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_departid(value);
  // @@protoc_insertion_point(field_set:DepartProto.DepartInfo.departId)
}

// bytes departName = 2;
inline void DepartInfo::clear_departname() {
  departname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DepartInfo::departname() const {
  // @@protoc_insertion_point(field_get:DepartProto.DepartInfo.departName)
  return _internal_departname();
}
inline void DepartInfo::set_departname(const std::string& value) {
  _internal_set_departname(value);
  // @@protoc_insertion_point(field_set:DepartProto.DepartInfo.departName)
}
inline std::string* DepartInfo::mutable_departname() {
  // @@protoc_insertion_point(field_mutable:DepartProto.DepartInfo.departName)
  return _internal_mutable_departname();
}
inline const std::string& DepartInfo::_internal_departname() const {
  return departname_.GetNoArena();
}
inline void DepartInfo::_internal_set_departname(const std::string& value) {
  
  departname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DepartInfo::set_departname(std::string&& value) {
  
  departname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DepartProto.DepartInfo.departName)
}
inline void DepartInfo::set_departname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  departname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DepartProto.DepartInfo.departName)
}
inline void DepartInfo::set_departname(const void* value, size_t size) {
  
  departname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DepartProto.DepartInfo.departName)
}
inline std::string* DepartInfo::_internal_mutable_departname() {
  
  return departname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DepartInfo::release_departname() {
  // @@protoc_insertion_point(field_release:DepartProto.DepartInfo.departName)
  
  return departname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DepartInfo::set_allocated_departname(std::string* departname) {
  if (departname != nullptr) {
    
  } else {
    
  }
  departname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), departname);
  // @@protoc_insertion_point(field_set_allocated:DepartProto.DepartInfo.departName)
}

// bytes departDesc = 3;
inline void DepartInfo::clear_departdesc() {
  departdesc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DepartInfo::departdesc() const {
  // @@protoc_insertion_point(field_get:DepartProto.DepartInfo.departDesc)
  return _internal_departdesc();
}
inline void DepartInfo::set_departdesc(const std::string& value) {
  _internal_set_departdesc(value);
  // @@protoc_insertion_point(field_set:DepartProto.DepartInfo.departDesc)
}
inline std::string* DepartInfo::mutable_departdesc() {
  // @@protoc_insertion_point(field_mutable:DepartProto.DepartInfo.departDesc)
  return _internal_mutable_departdesc();
}
inline const std::string& DepartInfo::_internal_departdesc() const {
  return departdesc_.GetNoArena();
}
inline void DepartInfo::_internal_set_departdesc(const std::string& value) {
  
  departdesc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DepartInfo::set_departdesc(std::string&& value) {
  
  departdesc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DepartProto.DepartInfo.departDesc)
}
inline void DepartInfo::set_departdesc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  departdesc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DepartProto.DepartInfo.departDesc)
}
inline void DepartInfo::set_departdesc(const void* value, size_t size) {
  
  departdesc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DepartProto.DepartInfo.departDesc)
}
inline std::string* DepartInfo::_internal_mutable_departdesc() {
  
  return departdesc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DepartInfo::release_departdesc() {
  // @@protoc_insertion_point(field_release:DepartProto.DepartInfo.departDesc)
  
  return departdesc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DepartInfo::set_allocated_departdesc(std::string* departdesc) {
  if (departdesc != nullptr) {
    
  } else {
    
  }
  departdesc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), departdesc);
  // @@protoc_insertion_point(field_set_allocated:DepartProto.DepartInfo.departDesc)
}

// repeated .DepartProto.DepartUser departUsers = 4;
inline int DepartInfo::_internal_departusers_size() const {
  return departusers_.size();
}
inline int DepartInfo::departusers_size() const {
  return _internal_departusers_size();
}
inline void DepartInfo::clear_departusers() {
  departusers_.Clear();
}
inline ::DepartProto::DepartUser* DepartInfo::mutable_departusers(int index) {
  // @@protoc_insertion_point(field_mutable:DepartProto.DepartInfo.departUsers)
  return departusers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DepartProto::DepartUser >*
DepartInfo::mutable_departusers() {
  // @@protoc_insertion_point(field_mutable_list:DepartProto.DepartInfo.departUsers)
  return &departusers_;
}
inline const ::DepartProto::DepartUser& DepartInfo::_internal_departusers(int index) const {
  return departusers_.Get(index);
}
inline const ::DepartProto::DepartUser& DepartInfo::departusers(int index) const {
  // @@protoc_insertion_point(field_get:DepartProto.DepartInfo.departUsers)
  return _internal_departusers(index);
}
inline ::DepartProto::DepartUser* DepartInfo::_internal_add_departusers() {
  return departusers_.Add();
}
inline ::DepartProto::DepartUser* DepartInfo::add_departusers() {
  // @@protoc_insertion_point(field_add:DepartProto.DepartInfo.departUsers)
  return _internal_add_departusers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DepartProto::DepartUser >&
DepartInfo::departusers() const {
  // @@protoc_insertion_point(field_list:DepartProto.DepartInfo.departUsers)
  return departusers_;
}

// -------------------------------------------------------------------

// ResultCode

// int32 errcode = 1;
inline void ResultCode::clear_errcode() {
  errcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResultCode::_internal_errcode() const {
  return errcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResultCode::errcode() const {
  // @@protoc_insertion_point(field_get:DepartProto.ResultCode.errcode)
  return _internal_errcode();
}
inline void ResultCode::_internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errcode_ = value;
}
inline void ResultCode::set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:DepartProto.ResultCode.errcode)
}

// bytes errmsg = 2;
inline void ResultCode::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ResultCode::errmsg() const {
  // @@protoc_insertion_point(field_get:DepartProto.ResultCode.errmsg)
  return _internal_errmsg();
}
inline void ResultCode::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:DepartProto.ResultCode.errmsg)
}
inline std::string* ResultCode::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:DepartProto.ResultCode.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& ResultCode::_internal_errmsg() const {
  return errmsg_.GetNoArena();
}
inline void ResultCode::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ResultCode::set_errmsg(std::string&& value) {
  
  errmsg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DepartProto.ResultCode.errmsg)
}
inline void ResultCode::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DepartProto.ResultCode.errmsg)
}
inline void ResultCode::set_errmsg(const void* value, size_t size) {
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DepartProto.ResultCode.errmsg)
}
inline std::string* ResultCode::_internal_mutable_errmsg() {
  
  return errmsg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResultCode::release_errmsg() {
  // @@protoc_insertion_point(field_release:DepartProto.ResultCode.errmsg)
  
  return errmsg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResultCode::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:DepartProto.ResultCode.errmsg)
}

// -------------------------------------------------------------------

// CreateDepartRequest

// .DepartProto.DepartInfo depart = 1;
inline bool CreateDepartRequest::_internal_has_depart() const {
  return this != internal_default_instance() && depart_ != nullptr;
}
inline bool CreateDepartRequest::has_depart() const {
  return _internal_has_depart();
}
inline void CreateDepartRequest::clear_depart() {
  if (GetArenaNoVirtual() == nullptr && depart_ != nullptr) {
    delete depart_;
  }
  depart_ = nullptr;
}
inline const ::DepartProto::DepartInfo& CreateDepartRequest::_internal_depart() const {
  const ::DepartProto::DepartInfo* p = depart_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DepartProto::DepartInfo*>(
      &::DepartProto::_DepartInfo_default_instance_);
}
inline const ::DepartProto::DepartInfo& CreateDepartRequest::depart() const {
  // @@protoc_insertion_point(field_get:DepartProto.CreateDepartRequest.depart)
  return _internal_depart();
}
inline ::DepartProto::DepartInfo* CreateDepartRequest::release_depart() {
  // @@protoc_insertion_point(field_release:DepartProto.CreateDepartRequest.depart)
  
  ::DepartProto::DepartInfo* temp = depart_;
  depart_ = nullptr;
  return temp;
}
inline ::DepartProto::DepartInfo* CreateDepartRequest::_internal_mutable_depart() {
  
  if (depart_ == nullptr) {
    auto* p = CreateMaybeMessage<::DepartProto::DepartInfo>(GetArenaNoVirtual());
    depart_ = p;
  }
  return depart_;
}
inline ::DepartProto::DepartInfo* CreateDepartRequest::mutable_depart() {
  // @@protoc_insertion_point(field_mutable:DepartProto.CreateDepartRequest.depart)
  return _internal_mutable_depart();
}
inline void CreateDepartRequest::set_allocated_depart(::DepartProto::DepartInfo* depart) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete depart_;
  }
  if (depart) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      depart = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, depart, submessage_arena);
    }
    
  } else {
    
  }
  depart_ = depart;
  // @@protoc_insertion_point(field_set_allocated:DepartProto.CreateDepartRequest.depart)
}

// -------------------------------------------------------------------

// CreateDepartResponse

// .DepartProto.ResultCode result = 1;
inline bool CreateDepartResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool CreateDepartResponse::has_result() const {
  return _internal_has_result();
}
inline void CreateDepartResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::DepartProto::ResultCode& CreateDepartResponse::_internal_result() const {
  const ::DepartProto::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DepartProto::ResultCode*>(
      &::DepartProto::_ResultCode_default_instance_);
}
inline const ::DepartProto::ResultCode& CreateDepartResponse::result() const {
  // @@protoc_insertion_point(field_get:DepartProto.CreateDepartResponse.result)
  return _internal_result();
}
inline ::DepartProto::ResultCode* CreateDepartResponse::release_result() {
  // @@protoc_insertion_point(field_release:DepartProto.CreateDepartResponse.result)
  
  ::DepartProto::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::DepartProto::ResultCode* CreateDepartResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::DepartProto::ResultCode>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::DepartProto::ResultCode* CreateDepartResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:DepartProto.CreateDepartResponse.result)
  return _internal_mutable_result();
}
inline void CreateDepartResponse::set_allocated_result(::DepartProto::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:DepartProto.CreateDepartResponse.result)
}

// bool success = 2;
inline void CreateDepartResponse::clear_success() {
  success_ = false;
}
inline bool CreateDepartResponse::_internal_success() const {
  return success_;
}
inline bool CreateDepartResponse::success() const {
  // @@protoc_insertion_point(field_get:DepartProto.CreateDepartResponse.success)
  return _internal_success();
}
inline void CreateDepartResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void CreateDepartResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:DepartProto.CreateDepartResponse.success)
}

// -------------------------------------------------------------------

// DelDepartRequest

// bytes departName = 1;
inline void DelDepartRequest::clear_departname() {
  departname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DelDepartRequest::departname() const {
  // @@protoc_insertion_point(field_get:DepartProto.DelDepartRequest.departName)
  return _internal_departname();
}
inline void DelDepartRequest::set_departname(const std::string& value) {
  _internal_set_departname(value);
  // @@protoc_insertion_point(field_set:DepartProto.DelDepartRequest.departName)
}
inline std::string* DelDepartRequest::mutable_departname() {
  // @@protoc_insertion_point(field_mutable:DepartProto.DelDepartRequest.departName)
  return _internal_mutable_departname();
}
inline const std::string& DelDepartRequest::_internal_departname() const {
  return departname_.GetNoArena();
}
inline void DelDepartRequest::_internal_set_departname(const std::string& value) {
  
  departname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DelDepartRequest::set_departname(std::string&& value) {
  
  departname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DepartProto.DelDepartRequest.departName)
}
inline void DelDepartRequest::set_departname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  departname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DepartProto.DelDepartRequest.departName)
}
inline void DelDepartRequest::set_departname(const void* value, size_t size) {
  
  departname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DepartProto.DelDepartRequest.departName)
}
inline std::string* DelDepartRequest::_internal_mutable_departname() {
  
  return departname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DelDepartRequest::release_departname() {
  // @@protoc_insertion_point(field_release:DepartProto.DelDepartRequest.departName)
  
  return departname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DelDepartRequest::set_allocated_departname(std::string* departname) {
  if (departname != nullptr) {
    
  } else {
    
  }
  departname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), departname);
  // @@protoc_insertion_point(field_set_allocated:DepartProto.DelDepartRequest.departName)
}

// bytes userName = 2;
inline void DelDepartRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DelDepartRequest::username() const {
  // @@protoc_insertion_point(field_get:DepartProto.DelDepartRequest.userName)
  return _internal_username();
}
inline void DelDepartRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:DepartProto.DelDepartRequest.userName)
}
inline std::string* DelDepartRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:DepartProto.DelDepartRequest.userName)
  return _internal_mutable_username();
}
inline const std::string& DelDepartRequest::_internal_username() const {
  return username_.GetNoArena();
}
inline void DelDepartRequest::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DelDepartRequest::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DepartProto.DelDepartRequest.userName)
}
inline void DelDepartRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DepartProto.DelDepartRequest.userName)
}
inline void DelDepartRequest::set_username(const void* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DepartProto.DelDepartRequest.userName)
}
inline std::string* DelDepartRequest::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DelDepartRequest::release_username() {
  // @@protoc_insertion_point(field_release:DepartProto.DelDepartRequest.userName)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DelDepartRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:DepartProto.DelDepartRequest.userName)
}

// -------------------------------------------------------------------

// DelDepartResponse

// .DepartProto.ResultCode result = 1;
inline bool DelDepartResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool DelDepartResponse::has_result() const {
  return _internal_has_result();
}
inline void DelDepartResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::DepartProto::ResultCode& DelDepartResponse::_internal_result() const {
  const ::DepartProto::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DepartProto::ResultCode*>(
      &::DepartProto::_ResultCode_default_instance_);
}
inline const ::DepartProto::ResultCode& DelDepartResponse::result() const {
  // @@protoc_insertion_point(field_get:DepartProto.DelDepartResponse.result)
  return _internal_result();
}
inline ::DepartProto::ResultCode* DelDepartResponse::release_result() {
  // @@protoc_insertion_point(field_release:DepartProto.DelDepartResponse.result)
  
  ::DepartProto::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::DepartProto::ResultCode* DelDepartResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::DepartProto::ResultCode>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::DepartProto::ResultCode* DelDepartResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:DepartProto.DelDepartResponse.result)
  return _internal_mutable_result();
}
inline void DelDepartResponse::set_allocated_result(::DepartProto::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:DepartProto.DelDepartResponse.result)
}

// bool success = 2;
inline void DelDepartResponse::clear_success() {
  success_ = false;
}
inline bool DelDepartResponse::_internal_success() const {
  return success_;
}
inline bool DelDepartResponse::success() const {
  // @@protoc_insertion_point(field_get:DepartProto.DelDepartResponse.success)
  return _internal_success();
}
inline void DelDepartResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void DelDepartResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:DepartProto.DelDepartResponse.success)
}

// -------------------------------------------------------------------

// AddDepartRequest

// bytes userName = 1;
inline void AddDepartRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddDepartRequest::username() const {
  // @@protoc_insertion_point(field_get:DepartProto.AddDepartRequest.userName)
  return _internal_username();
}
inline void AddDepartRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:DepartProto.AddDepartRequest.userName)
}
inline std::string* AddDepartRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:DepartProto.AddDepartRequest.userName)
  return _internal_mutable_username();
}
inline const std::string& AddDepartRequest::_internal_username() const {
  return username_.GetNoArena();
}
inline void AddDepartRequest::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddDepartRequest::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DepartProto.AddDepartRequest.userName)
}
inline void AddDepartRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DepartProto.AddDepartRequest.userName)
}
inline void AddDepartRequest::set_username(const void* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DepartProto.AddDepartRequest.userName)
}
inline std::string* AddDepartRequest::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddDepartRequest::release_username() {
  // @@protoc_insertion_point(field_release:DepartProto.AddDepartRequest.userName)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddDepartRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:DepartProto.AddDepartRequest.userName)
}

// bytes departName = 2;
inline void AddDepartRequest::clear_departname() {
  departname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddDepartRequest::departname() const {
  // @@protoc_insertion_point(field_get:DepartProto.AddDepartRequest.departName)
  return _internal_departname();
}
inline void AddDepartRequest::set_departname(const std::string& value) {
  _internal_set_departname(value);
  // @@protoc_insertion_point(field_set:DepartProto.AddDepartRequest.departName)
}
inline std::string* AddDepartRequest::mutable_departname() {
  // @@protoc_insertion_point(field_mutable:DepartProto.AddDepartRequest.departName)
  return _internal_mutable_departname();
}
inline const std::string& AddDepartRequest::_internal_departname() const {
  return departname_.GetNoArena();
}
inline void AddDepartRequest::_internal_set_departname(const std::string& value) {
  
  departname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddDepartRequest::set_departname(std::string&& value) {
  
  departname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DepartProto.AddDepartRequest.departName)
}
inline void AddDepartRequest::set_departname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  departname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DepartProto.AddDepartRequest.departName)
}
inline void AddDepartRequest::set_departname(const void* value, size_t size) {
  
  departname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DepartProto.AddDepartRequest.departName)
}
inline std::string* AddDepartRequest::_internal_mutable_departname() {
  
  return departname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddDepartRequest::release_departname() {
  // @@protoc_insertion_point(field_release:DepartProto.AddDepartRequest.departName)
  
  return departname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddDepartRequest::set_allocated_departname(std::string* departname) {
  if (departname != nullptr) {
    
  } else {
    
  }
  departname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), departname);
  // @@protoc_insertion_point(field_set_allocated:DepartProto.AddDepartRequest.departName)
}

// bytes userRole = 3;
inline void AddDepartRequest::clear_userrole() {
  userrole_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddDepartRequest::userrole() const {
  // @@protoc_insertion_point(field_get:DepartProto.AddDepartRequest.userRole)
  return _internal_userrole();
}
inline void AddDepartRequest::set_userrole(const std::string& value) {
  _internal_set_userrole(value);
  // @@protoc_insertion_point(field_set:DepartProto.AddDepartRequest.userRole)
}
inline std::string* AddDepartRequest::mutable_userrole() {
  // @@protoc_insertion_point(field_mutable:DepartProto.AddDepartRequest.userRole)
  return _internal_mutable_userrole();
}
inline const std::string& AddDepartRequest::_internal_userrole() const {
  return userrole_.GetNoArena();
}
inline void AddDepartRequest::_internal_set_userrole(const std::string& value) {
  
  userrole_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddDepartRequest::set_userrole(std::string&& value) {
  
  userrole_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DepartProto.AddDepartRequest.userRole)
}
inline void AddDepartRequest::set_userrole(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userrole_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DepartProto.AddDepartRequest.userRole)
}
inline void AddDepartRequest::set_userrole(const void* value, size_t size) {
  
  userrole_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DepartProto.AddDepartRequest.userRole)
}
inline std::string* AddDepartRequest::_internal_mutable_userrole() {
  
  return userrole_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddDepartRequest::release_userrole() {
  // @@protoc_insertion_point(field_release:DepartProto.AddDepartRequest.userRole)
  
  return userrole_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddDepartRequest::set_allocated_userrole(std::string* userrole) {
  if (userrole != nullptr) {
    
  } else {
    
  }
  userrole_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userrole);
  // @@protoc_insertion_point(field_set_allocated:DepartProto.AddDepartRequest.userRole)
}

// -------------------------------------------------------------------

// AddDepartResponse

// .DepartProto.ResultCode result = 1;
inline bool AddDepartResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool AddDepartResponse::has_result() const {
  return _internal_has_result();
}
inline void AddDepartResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::DepartProto::ResultCode& AddDepartResponse::_internal_result() const {
  const ::DepartProto::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DepartProto::ResultCode*>(
      &::DepartProto::_ResultCode_default_instance_);
}
inline const ::DepartProto::ResultCode& AddDepartResponse::result() const {
  // @@protoc_insertion_point(field_get:DepartProto.AddDepartResponse.result)
  return _internal_result();
}
inline ::DepartProto::ResultCode* AddDepartResponse::release_result() {
  // @@protoc_insertion_point(field_release:DepartProto.AddDepartResponse.result)
  
  ::DepartProto::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::DepartProto::ResultCode* AddDepartResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::DepartProto::ResultCode>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::DepartProto::ResultCode* AddDepartResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:DepartProto.AddDepartResponse.result)
  return _internal_mutable_result();
}
inline void AddDepartResponse::set_allocated_result(::DepartProto::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:DepartProto.AddDepartResponse.result)
}

// bool success = 2;
inline void AddDepartResponse::clear_success() {
  success_ = false;
}
inline bool AddDepartResponse::_internal_success() const {
  return success_;
}
inline bool AddDepartResponse::success() const {
  // @@protoc_insertion_point(field_get:DepartProto.AddDepartResponse.success)
  return _internal_success();
}
inline void AddDepartResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void AddDepartResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:DepartProto.AddDepartResponse.success)
}

// -------------------------------------------------------------------

// QuitDepartRequest

// bytes departName = 1;
inline void QuitDepartRequest::clear_departname() {
  departname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QuitDepartRequest::departname() const {
  // @@protoc_insertion_point(field_get:DepartProto.QuitDepartRequest.departName)
  return _internal_departname();
}
inline void QuitDepartRequest::set_departname(const std::string& value) {
  _internal_set_departname(value);
  // @@protoc_insertion_point(field_set:DepartProto.QuitDepartRequest.departName)
}
inline std::string* QuitDepartRequest::mutable_departname() {
  // @@protoc_insertion_point(field_mutable:DepartProto.QuitDepartRequest.departName)
  return _internal_mutable_departname();
}
inline const std::string& QuitDepartRequest::_internal_departname() const {
  return departname_.GetNoArena();
}
inline void QuitDepartRequest::_internal_set_departname(const std::string& value) {
  
  departname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QuitDepartRequest::set_departname(std::string&& value) {
  
  departname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DepartProto.QuitDepartRequest.departName)
}
inline void QuitDepartRequest::set_departname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  departname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DepartProto.QuitDepartRequest.departName)
}
inline void QuitDepartRequest::set_departname(const void* value, size_t size) {
  
  departname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DepartProto.QuitDepartRequest.departName)
}
inline std::string* QuitDepartRequest::_internal_mutable_departname() {
  
  return departname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QuitDepartRequest::release_departname() {
  // @@protoc_insertion_point(field_release:DepartProto.QuitDepartRequest.departName)
  
  return departname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QuitDepartRequest::set_allocated_departname(std::string* departname) {
  if (departname != nullptr) {
    
  } else {
    
  }
  departname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), departname);
  // @@protoc_insertion_point(field_set_allocated:DepartProto.QuitDepartRequest.departName)
}

// bytes userName = 2;
inline void QuitDepartRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QuitDepartRequest::username() const {
  // @@protoc_insertion_point(field_get:DepartProto.QuitDepartRequest.userName)
  return _internal_username();
}
inline void QuitDepartRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:DepartProto.QuitDepartRequest.userName)
}
inline std::string* QuitDepartRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:DepartProto.QuitDepartRequest.userName)
  return _internal_mutable_username();
}
inline const std::string& QuitDepartRequest::_internal_username() const {
  return username_.GetNoArena();
}
inline void QuitDepartRequest::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QuitDepartRequest::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DepartProto.QuitDepartRequest.userName)
}
inline void QuitDepartRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DepartProto.QuitDepartRequest.userName)
}
inline void QuitDepartRequest::set_username(const void* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DepartProto.QuitDepartRequest.userName)
}
inline std::string* QuitDepartRequest::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QuitDepartRequest::release_username() {
  // @@protoc_insertion_point(field_release:DepartProto.QuitDepartRequest.userName)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QuitDepartRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:DepartProto.QuitDepartRequest.userName)
}

// -------------------------------------------------------------------

// QuitDepartResponse

// .DepartProto.ResultCode result = 1;
inline bool QuitDepartResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool QuitDepartResponse::has_result() const {
  return _internal_has_result();
}
inline void QuitDepartResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::DepartProto::ResultCode& QuitDepartResponse::_internal_result() const {
  const ::DepartProto::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DepartProto::ResultCode*>(
      &::DepartProto::_ResultCode_default_instance_);
}
inline const ::DepartProto::ResultCode& QuitDepartResponse::result() const {
  // @@protoc_insertion_point(field_get:DepartProto.QuitDepartResponse.result)
  return _internal_result();
}
inline ::DepartProto::ResultCode* QuitDepartResponse::release_result() {
  // @@protoc_insertion_point(field_release:DepartProto.QuitDepartResponse.result)
  
  ::DepartProto::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::DepartProto::ResultCode* QuitDepartResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::DepartProto::ResultCode>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::DepartProto::ResultCode* QuitDepartResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:DepartProto.QuitDepartResponse.result)
  return _internal_mutable_result();
}
inline void QuitDepartResponse::set_allocated_result(::DepartProto::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:DepartProto.QuitDepartResponse.result)
}

// bool success = 2;
inline void QuitDepartResponse::clear_success() {
  success_ = false;
}
inline bool QuitDepartResponse::_internal_success() const {
  return success_;
}
inline bool QuitDepartResponse::success() const {
  // @@protoc_insertion_point(field_get:DepartProto.QuitDepartResponse.success)
  return _internal_success();
}
inline void QuitDepartResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void QuitDepartResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:DepartProto.QuitDepartResponse.success)
}

// -------------------------------------------------------------------

// QueryDepartRequest

// bytes userName = 1;
inline void QueryDepartRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryDepartRequest::username() const {
  // @@protoc_insertion_point(field_get:DepartProto.QueryDepartRequest.userName)
  return _internal_username();
}
inline void QueryDepartRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:DepartProto.QueryDepartRequest.userName)
}
inline std::string* QueryDepartRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:DepartProto.QueryDepartRequest.userName)
  return _internal_mutable_username();
}
inline const std::string& QueryDepartRequest::_internal_username() const {
  return username_.GetNoArena();
}
inline void QueryDepartRequest::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QueryDepartRequest::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DepartProto.QueryDepartRequest.userName)
}
inline void QueryDepartRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DepartProto.QueryDepartRequest.userName)
}
inline void QueryDepartRequest::set_username(const void* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DepartProto.QueryDepartRequest.userName)
}
inline std::string* QueryDepartRequest::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryDepartRequest::release_username() {
  // @@protoc_insertion_point(field_release:DepartProto.QueryDepartRequest.userName)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryDepartRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:DepartProto.QueryDepartRequest.userName)
}

// -------------------------------------------------------------------

// QueryDepartResponse

// .DepartProto.ResultCode result = 1;
inline bool QueryDepartResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool QueryDepartResponse::has_result() const {
  return _internal_has_result();
}
inline void QueryDepartResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::DepartProto::ResultCode& QueryDepartResponse::_internal_result() const {
  const ::DepartProto::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DepartProto::ResultCode*>(
      &::DepartProto::_ResultCode_default_instance_);
}
inline const ::DepartProto::ResultCode& QueryDepartResponse::result() const {
  // @@protoc_insertion_point(field_get:DepartProto.QueryDepartResponse.result)
  return _internal_result();
}
inline ::DepartProto::ResultCode* QueryDepartResponse::release_result() {
  // @@protoc_insertion_point(field_release:DepartProto.QueryDepartResponse.result)
  
  ::DepartProto::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::DepartProto::ResultCode* QueryDepartResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::DepartProto::ResultCode>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::DepartProto::ResultCode* QueryDepartResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:DepartProto.QueryDepartResponse.result)
  return _internal_mutable_result();
}
inline void QueryDepartResponse::set_allocated_result(::DepartProto::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:DepartProto.QueryDepartResponse.result)
}

// bool success = 2;
inline void QueryDepartResponse::clear_success() {
  success_ = false;
}
inline bool QueryDepartResponse::_internal_success() const {
  return success_;
}
inline bool QueryDepartResponse::success() const {
  // @@protoc_insertion_point(field_get:DepartProto.QueryDepartResponse.success)
  return _internal_success();
}
inline void QueryDepartResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void QueryDepartResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:DepartProto.QueryDepartResponse.success)
}

// .DepartProto.DepartInfo departs = 3;
inline bool QueryDepartResponse::_internal_has_departs() const {
  return this != internal_default_instance() && departs_ != nullptr;
}
inline bool QueryDepartResponse::has_departs() const {
  return _internal_has_departs();
}
inline void QueryDepartResponse::clear_departs() {
  if (GetArenaNoVirtual() == nullptr && departs_ != nullptr) {
    delete departs_;
  }
  departs_ = nullptr;
}
inline const ::DepartProto::DepartInfo& QueryDepartResponse::_internal_departs() const {
  const ::DepartProto::DepartInfo* p = departs_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DepartProto::DepartInfo*>(
      &::DepartProto::_DepartInfo_default_instance_);
}
inline const ::DepartProto::DepartInfo& QueryDepartResponse::departs() const {
  // @@protoc_insertion_point(field_get:DepartProto.QueryDepartResponse.departs)
  return _internal_departs();
}
inline ::DepartProto::DepartInfo* QueryDepartResponse::release_departs() {
  // @@protoc_insertion_point(field_release:DepartProto.QueryDepartResponse.departs)
  
  ::DepartProto::DepartInfo* temp = departs_;
  departs_ = nullptr;
  return temp;
}
inline ::DepartProto::DepartInfo* QueryDepartResponse::_internal_mutable_departs() {
  
  if (departs_ == nullptr) {
    auto* p = CreateMaybeMessage<::DepartProto::DepartInfo>(GetArenaNoVirtual());
    departs_ = p;
  }
  return departs_;
}
inline ::DepartProto::DepartInfo* QueryDepartResponse::mutable_departs() {
  // @@protoc_insertion_point(field_mutable:DepartProto.QueryDepartResponse.departs)
  return _internal_mutable_departs();
}
inline void QueryDepartResponse::set_allocated_departs(::DepartProto::DepartInfo* departs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete departs_;
  }
  if (departs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      departs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, departs, submessage_arena);
    }
    
  } else {
    
  }
  departs_ = departs;
  // @@protoc_insertion_point(field_set_allocated:DepartProto.QueryDepartResponse.departs)
}

// -------------------------------------------------------------------

// QueryDepartUsersRequest

// bytes userName = 1;
inline void QueryDepartUsersRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryDepartUsersRequest::username() const {
  // @@protoc_insertion_point(field_get:DepartProto.QueryDepartUsersRequest.userName)
  return _internal_username();
}
inline void QueryDepartUsersRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:DepartProto.QueryDepartUsersRequest.userName)
}
inline std::string* QueryDepartUsersRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:DepartProto.QueryDepartUsersRequest.userName)
  return _internal_mutable_username();
}
inline const std::string& QueryDepartUsersRequest::_internal_username() const {
  return username_.GetNoArena();
}
inline void QueryDepartUsersRequest::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QueryDepartUsersRequest::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DepartProto.QueryDepartUsersRequest.userName)
}
inline void QueryDepartUsersRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DepartProto.QueryDepartUsersRequest.userName)
}
inline void QueryDepartUsersRequest::set_username(const void* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DepartProto.QueryDepartUsersRequest.userName)
}
inline std::string* QueryDepartUsersRequest::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryDepartUsersRequest::release_username() {
  // @@protoc_insertion_point(field_release:DepartProto.QueryDepartUsersRequest.userName)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryDepartUsersRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:DepartProto.QueryDepartUsersRequest.userName)
}

// bytes departName = 2;
inline void QueryDepartUsersRequest::clear_departname() {
  departname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryDepartUsersRequest::departname() const {
  // @@protoc_insertion_point(field_get:DepartProto.QueryDepartUsersRequest.departName)
  return _internal_departname();
}
inline void QueryDepartUsersRequest::set_departname(const std::string& value) {
  _internal_set_departname(value);
  // @@protoc_insertion_point(field_set:DepartProto.QueryDepartUsersRequest.departName)
}
inline std::string* QueryDepartUsersRequest::mutable_departname() {
  // @@protoc_insertion_point(field_mutable:DepartProto.QueryDepartUsersRequest.departName)
  return _internal_mutable_departname();
}
inline const std::string& QueryDepartUsersRequest::_internal_departname() const {
  return departname_.GetNoArena();
}
inline void QueryDepartUsersRequest::_internal_set_departname(const std::string& value) {
  
  departname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QueryDepartUsersRequest::set_departname(std::string&& value) {
  
  departname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DepartProto.QueryDepartUsersRequest.departName)
}
inline void QueryDepartUsersRequest::set_departname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  departname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DepartProto.QueryDepartUsersRequest.departName)
}
inline void QueryDepartUsersRequest::set_departname(const void* value, size_t size) {
  
  departname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DepartProto.QueryDepartUsersRequest.departName)
}
inline std::string* QueryDepartUsersRequest::_internal_mutable_departname() {
  
  return departname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryDepartUsersRequest::release_departname() {
  // @@protoc_insertion_point(field_release:DepartProto.QueryDepartUsersRequest.departName)
  
  return departname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryDepartUsersRequest::set_allocated_departname(std::string* departname) {
  if (departname != nullptr) {
    
  } else {
    
  }
  departname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), departname);
  // @@protoc_insertion_point(field_set_allocated:DepartProto.QueryDepartUsersRequest.departName)
}

// -------------------------------------------------------------------

// QueryDepartUsersResponse

// .DepartProto.ResultCode result = 1;
inline bool QueryDepartUsersResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool QueryDepartUsersResponse::has_result() const {
  return _internal_has_result();
}
inline void QueryDepartUsersResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::DepartProto::ResultCode& QueryDepartUsersResponse::_internal_result() const {
  const ::DepartProto::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DepartProto::ResultCode*>(
      &::DepartProto::_ResultCode_default_instance_);
}
inline const ::DepartProto::ResultCode& QueryDepartUsersResponse::result() const {
  // @@protoc_insertion_point(field_get:DepartProto.QueryDepartUsersResponse.result)
  return _internal_result();
}
inline ::DepartProto::ResultCode* QueryDepartUsersResponse::release_result() {
  // @@protoc_insertion_point(field_release:DepartProto.QueryDepartUsersResponse.result)
  
  ::DepartProto::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::DepartProto::ResultCode* QueryDepartUsersResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::DepartProto::ResultCode>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::DepartProto::ResultCode* QueryDepartUsersResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:DepartProto.QueryDepartUsersResponse.result)
  return _internal_mutable_result();
}
inline void QueryDepartUsersResponse::set_allocated_result(::DepartProto::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:DepartProto.QueryDepartUsersResponse.result)
}

// bool success = 2;
inline void QueryDepartUsersResponse::clear_success() {
  success_ = false;
}
inline bool QueryDepartUsersResponse::_internal_success() const {
  return success_;
}
inline bool QueryDepartUsersResponse::success() const {
  // @@protoc_insertion_point(field_get:DepartProto.QueryDepartUsersResponse.success)
  return _internal_success();
}
inline void QueryDepartUsersResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void QueryDepartUsersResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:DepartProto.QueryDepartUsersResponse.success)
}

// repeated bytes departUserName = 3;
inline int QueryDepartUsersResponse::_internal_departusername_size() const {
  return departusername_.size();
}
inline int QueryDepartUsersResponse::departusername_size() const {
  return _internal_departusername_size();
}
inline void QueryDepartUsersResponse::clear_departusername() {
  departusername_.Clear();
}
inline std::string* QueryDepartUsersResponse::add_departusername() {
  // @@protoc_insertion_point(field_add_mutable:DepartProto.QueryDepartUsersResponse.departUserName)
  return _internal_add_departusername();
}
inline const std::string& QueryDepartUsersResponse::_internal_departusername(int index) const {
  return departusername_.Get(index);
}
inline const std::string& QueryDepartUsersResponse::departusername(int index) const {
  // @@protoc_insertion_point(field_get:DepartProto.QueryDepartUsersResponse.departUserName)
  return _internal_departusername(index);
}
inline std::string* QueryDepartUsersResponse::mutable_departusername(int index) {
  // @@protoc_insertion_point(field_mutable:DepartProto.QueryDepartUsersResponse.departUserName)
  return departusername_.Mutable(index);
}
inline void QueryDepartUsersResponse::set_departusername(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:DepartProto.QueryDepartUsersResponse.departUserName)
  departusername_.Mutable(index)->assign(value);
}
inline void QueryDepartUsersResponse::set_departusername(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:DepartProto.QueryDepartUsersResponse.departUserName)
  departusername_.Mutable(index)->assign(std::move(value));
}
inline void QueryDepartUsersResponse::set_departusername(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  departusername_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DepartProto.QueryDepartUsersResponse.departUserName)
}
inline void QueryDepartUsersResponse::set_departusername(int index, const void* value, size_t size) {
  departusername_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DepartProto.QueryDepartUsersResponse.departUserName)
}
inline std::string* QueryDepartUsersResponse::_internal_add_departusername() {
  return departusername_.Add();
}
inline void QueryDepartUsersResponse::add_departusername(const std::string& value) {
  departusername_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DepartProto.QueryDepartUsersResponse.departUserName)
}
inline void QueryDepartUsersResponse::add_departusername(std::string&& value) {
  departusername_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:DepartProto.QueryDepartUsersResponse.departUserName)
}
inline void QueryDepartUsersResponse::add_departusername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  departusername_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DepartProto.QueryDepartUsersResponse.departUserName)
}
inline void QueryDepartUsersResponse::add_departusername(const void* value, size_t size) {
  departusername_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DepartProto.QueryDepartUsersResponse.departUserName)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
QueryDepartUsersResponse::departusername() const {
  // @@protoc_insertion_point(field_list:DepartProto.QueryDepartUsersResponse.departUserName)
  return departusername_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
QueryDepartUsersResponse::mutable_departusername() {
  // @@protoc_insertion_point(field_mutable_list:DepartProto.QueryDepartUsersResponse.departUserName)
  return &departusername_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DepartProto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Depart_2eproto
