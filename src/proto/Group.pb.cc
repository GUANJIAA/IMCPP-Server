// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Group.proto

#include "Group.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Group_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GroupInfo_Group_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Group_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroupUser_Group_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Group_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResultCode_Group_2eproto;
namespace GroupProto {
class GroupUserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroupUser> _instance;
} _GroupUser_default_instance_;
class GroupInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroupInfo> _instance;
} _GroupInfo_default_instance_;
class ResultCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResultCode> _instance;
} _ResultCode_default_instance_;
class CreateGroupRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateGroupRequest> _instance;
} _CreateGroupRequest_default_instance_;
class CreateGroupResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateGroupResponse> _instance;
} _CreateGroupResponse_default_instance_;
class AddGroupRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddGroupRequest> _instance;
} _AddGroupRequest_default_instance_;
class AddGroupResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddGroupResponse> _instance;
} _AddGroupResponse_default_instance_;
class QuitGroupRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QuitGroupRequest> _instance;
} _QuitGroupRequest_default_instance_;
class QuitGroupResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QuitGroupResponse> _instance;
} _QuitGroupResponse_default_instance_;
class QueryGroupRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryGroupRequest> _instance;
} _QueryGroupRequest_default_instance_;
class QueryGroupResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryGroupResponse> _instance;
} _QueryGroupResponse_default_instance_;
class QueryGroupUsersRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryGroupUsersRequest> _instance;
} _QueryGroupUsersRequest_default_instance_;
class QueryGroupUsersResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryGroupUsersResponse> _instance;
} _QueryGroupUsersResponse_default_instance_;
}  // namespace GroupProto
static void InitDefaultsscc_info_AddGroupRequest_Group_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GroupProto::_AddGroupRequest_default_instance_;
    new (ptr) ::GroupProto::AddGroupRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GroupProto::AddGroupRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddGroupRequest_Group_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddGroupRequest_Group_2eproto}, {}};

static void InitDefaultsscc_info_AddGroupResponse_Group_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GroupProto::_AddGroupResponse_default_instance_;
    new (ptr) ::GroupProto::AddGroupResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GroupProto::AddGroupResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddGroupResponse_Group_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddGroupResponse_Group_2eproto}, {
      &scc_info_ResultCode_Group_2eproto.base,}};

static void InitDefaultsscc_info_CreateGroupRequest_Group_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GroupProto::_CreateGroupRequest_default_instance_;
    new (ptr) ::GroupProto::CreateGroupRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GroupProto::CreateGroupRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateGroupRequest_Group_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateGroupRequest_Group_2eproto}, {
      &scc_info_GroupInfo_Group_2eproto.base,}};

static void InitDefaultsscc_info_CreateGroupResponse_Group_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GroupProto::_CreateGroupResponse_default_instance_;
    new (ptr) ::GroupProto::CreateGroupResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GroupProto::CreateGroupResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateGroupResponse_Group_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateGroupResponse_Group_2eproto}, {
      &scc_info_ResultCode_Group_2eproto.base,}};

static void InitDefaultsscc_info_GroupInfo_Group_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GroupProto::_GroupInfo_default_instance_;
    new (ptr) ::GroupProto::GroupInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GroupProto::GroupInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GroupInfo_Group_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GroupInfo_Group_2eproto}, {
      &scc_info_GroupUser_Group_2eproto.base,}};

static void InitDefaultsscc_info_GroupUser_Group_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GroupProto::_GroupUser_default_instance_;
    new (ptr) ::GroupProto::GroupUser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GroupProto::GroupUser::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroupUser_Group_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GroupUser_Group_2eproto}, {}};

static void InitDefaultsscc_info_QueryGroupRequest_Group_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GroupProto::_QueryGroupRequest_default_instance_;
    new (ptr) ::GroupProto::QueryGroupRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GroupProto::QueryGroupRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryGroupRequest_Group_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QueryGroupRequest_Group_2eproto}, {}};

static void InitDefaultsscc_info_QueryGroupResponse_Group_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GroupProto::_QueryGroupResponse_default_instance_;
    new (ptr) ::GroupProto::QueryGroupResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GroupProto::QueryGroupResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_QueryGroupResponse_Group_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_QueryGroupResponse_Group_2eproto}, {
      &scc_info_ResultCode_Group_2eproto.base,
      &scc_info_GroupInfo_Group_2eproto.base,}};

static void InitDefaultsscc_info_QueryGroupUsersRequest_Group_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GroupProto::_QueryGroupUsersRequest_default_instance_;
    new (ptr) ::GroupProto::QueryGroupUsersRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GroupProto::QueryGroupUsersRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryGroupUsersRequest_Group_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QueryGroupUsersRequest_Group_2eproto}, {}};

static void InitDefaultsscc_info_QueryGroupUsersResponse_Group_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GroupProto::_QueryGroupUsersResponse_default_instance_;
    new (ptr) ::GroupProto::QueryGroupUsersResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GroupProto::QueryGroupUsersResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_QueryGroupUsersResponse_Group_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_QueryGroupUsersResponse_Group_2eproto}, {
      &scc_info_ResultCode_Group_2eproto.base,
      &scc_info_GroupUser_Group_2eproto.base,}};

static void InitDefaultsscc_info_QuitGroupRequest_Group_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GroupProto::_QuitGroupRequest_default_instance_;
    new (ptr) ::GroupProto::QuitGroupRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GroupProto::QuitGroupRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QuitGroupRequest_Group_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QuitGroupRequest_Group_2eproto}, {}};

static void InitDefaultsscc_info_QuitGroupResponse_Group_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GroupProto::_QuitGroupResponse_default_instance_;
    new (ptr) ::GroupProto::QuitGroupResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GroupProto::QuitGroupResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QuitGroupResponse_Group_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_QuitGroupResponse_Group_2eproto}, {
      &scc_info_ResultCode_Group_2eproto.base,}};

static void InitDefaultsscc_info_ResultCode_Group_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GroupProto::_ResultCode_default_instance_;
    new (ptr) ::GroupProto::ResultCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GroupProto::ResultCode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResultCode_Group_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResultCode_Group_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Group_2eproto[13];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Group_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_Group_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Group_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GroupProto::GroupUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GroupProto::GroupUser, username_),
  PROTOBUF_FIELD_OFFSET(::GroupProto::GroupUser, useremail_),
  PROTOBUF_FIELD_OFFSET(::GroupProto::GroupUser, userphone_),
  PROTOBUF_FIELD_OFFSET(::GroupProto::GroupUser, userrole_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GroupProto::GroupInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GroupProto::GroupInfo, groupid_),
  PROTOBUF_FIELD_OFFSET(::GroupProto::GroupInfo, groupname_),
  PROTOBUF_FIELD_OFFSET(::GroupProto::GroupInfo, groupdesc_),
  PROTOBUF_FIELD_OFFSET(::GroupProto::GroupInfo, groupusers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GroupProto::ResultCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GroupProto::ResultCode, errcode_),
  PROTOBUF_FIELD_OFFSET(::GroupProto::ResultCode, errmsg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GroupProto::CreateGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GroupProto::CreateGroupRequest, group_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GroupProto::CreateGroupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GroupProto::CreateGroupResponse, result_),
  PROTOBUF_FIELD_OFFSET(::GroupProto::CreateGroupResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GroupProto::AddGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GroupProto::AddGroupRequest, username_),
  PROTOBUF_FIELD_OFFSET(::GroupProto::AddGroupRequest, groupname_),
  PROTOBUF_FIELD_OFFSET(::GroupProto::AddGroupRequest, userrole_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GroupProto::AddGroupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GroupProto::AddGroupResponse, result_),
  PROTOBUF_FIELD_OFFSET(::GroupProto::AddGroupResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GroupProto::QuitGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GroupProto::QuitGroupRequest, username_),
  PROTOBUF_FIELD_OFFSET(::GroupProto::QuitGroupRequest, groupname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GroupProto::QuitGroupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GroupProto::QuitGroupResponse, result_),
  PROTOBUF_FIELD_OFFSET(::GroupProto::QuitGroupResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GroupProto::QueryGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GroupProto::QueryGroupRequest, username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GroupProto::QueryGroupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GroupProto::QueryGroupResponse, result_),
  PROTOBUF_FIELD_OFFSET(::GroupProto::QueryGroupResponse, success_),
  PROTOBUF_FIELD_OFFSET(::GroupProto::QueryGroupResponse, groups_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GroupProto::QueryGroupUsersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GroupProto::QueryGroupUsersRequest, username_),
  PROTOBUF_FIELD_OFFSET(::GroupProto::QueryGroupUsersRequest, groupname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GroupProto::QueryGroupUsersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GroupProto::QueryGroupUsersResponse, result_),
  PROTOBUF_FIELD_OFFSET(::GroupProto::QueryGroupUsersResponse, success_),
  PROTOBUF_FIELD_OFFSET(::GroupProto::QueryGroupUsersResponse, groupuser_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::GroupProto::GroupUser)},
  { 9, -1, sizeof(::GroupProto::GroupInfo)},
  { 18, -1, sizeof(::GroupProto::ResultCode)},
  { 25, -1, sizeof(::GroupProto::CreateGroupRequest)},
  { 31, -1, sizeof(::GroupProto::CreateGroupResponse)},
  { 38, -1, sizeof(::GroupProto::AddGroupRequest)},
  { 46, -1, sizeof(::GroupProto::AddGroupResponse)},
  { 53, -1, sizeof(::GroupProto::QuitGroupRequest)},
  { 60, -1, sizeof(::GroupProto::QuitGroupResponse)},
  { 67, -1, sizeof(::GroupProto::QueryGroupRequest)},
  { 73, -1, sizeof(::GroupProto::QueryGroupResponse)},
  { 81, -1, sizeof(::GroupProto::QueryGroupUsersRequest)},
  { 88, -1, sizeof(::GroupProto::QueryGroupUsersResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GroupProto::_GroupUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GroupProto::_GroupInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GroupProto::_ResultCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GroupProto::_CreateGroupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GroupProto::_CreateGroupResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GroupProto::_AddGroupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GroupProto::_AddGroupResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GroupProto::_QuitGroupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GroupProto::_QuitGroupResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GroupProto::_QueryGroupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GroupProto::_QueryGroupResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GroupProto::_QueryGroupUsersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GroupProto::_QueryGroupUsersResponse_default_instance_),
};

const char descriptor_table_protodef_Group_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013Group.proto\022\nGroupProto\"U\n\tGroupUser\022\020"
  "\n\010userName\030\001 \001(\014\022\021\n\tuserEmail\030\002 \001(\014\022\021\n\tu"
  "serPhone\030\003 \001(\014\022\020\n\010userRole\030\004 \001(\014\"m\n\tGrou"
  "pInfo\022\017\n\007groupId\030\001 \001(\005\022\021\n\tgroupName\030\002 \001("
  "\014\022\021\n\tgroupDesc\030\003 \001(\014\022)\n\ngroupUsers\030\004 \003(\013"
  "2\025.GroupProto.GroupUser\"-\n\nResultCode\022\017\n"
  "\007errcode\030\001 \001(\005\022\016\n\006errmsg\030\002 \001(\014\":\n\022Create"
  "GroupRequest\022$\n\005group\030\001 \001(\0132\025.GroupProto"
  ".GroupInfo\"N\n\023CreateGroupResponse\022&\n\006res"
  "ult\030\001 \001(\0132\026.GroupProto.ResultCode\022\017\n\007suc"
  "cess\030\002 \001(\010\"H\n\017AddGroupRequest\022\020\n\010userNam"
  "e\030\001 \001(\014\022\021\n\tgroupName\030\002 \001(\014\022\020\n\010userRole\030\003"
  " \001(\014\"K\n\020AddGroupResponse\022&\n\006result\030\001 \001(\013"
  "2\026.GroupProto.ResultCode\022\017\n\007success\030\002 \001("
  "\010\"7\n\020QuitGroupRequest\022\020\n\010userName\030\001 \001(\014\022"
  "\021\n\tgroupName\030\002 \001(\014\"L\n\021QuitGroupResponse\022"
  "&\n\006result\030\001 \001(\0132\026.GroupProto.ResultCode\022"
  "\017\n\007success\030\002 \001(\010\"%\n\021QueryGroupRequest\022\020\n"
  "\010userName\030\001 \001(\014\"t\n\022QueryGroupResponse\022&\n"
  "\006result\030\001 \001(\0132\026.GroupProto.ResultCode\022\017\n"
  "\007success\030\002 \001(\010\022%\n\006groups\030\003 \003(\0132\025.GroupPr"
  "oto.GroupInfo\"=\n\026QueryGroupUsersRequest\022"
  "\020\n\010userName\030\001 \001(\014\022\021\n\tgroupName\030\002 \001(\014\"|\n\027"
  "QueryGroupUsersResponse\022&\n\006result\030\001 \001(\0132"
  "\026.GroupProto.ResultCode\022\017\n\007success\030\002 \001(\010"
  "\022(\n\tgroupUser\030\003 \003(\0132\025.GroupProto.GroupUs"
  "er2\233\003\n\017GroupServiceRpc\022N\n\013CreateGroup\022\036."
  "GroupProto.CreateGroupRequest\032\037.GroupPro"
  "to.CreateGroupResponse\022E\n\010AddGroup\022\033.Gro"
  "upProto.AddGroupRequest\032\034.GroupProto.Add"
  "GroupResponse\022H\n\tQuitGroup\022\034.GroupProto."
  "QuitGroupRequest\032\035.GroupProto.QuitGroupR"
  "esponse\022K\n\nQueryGroup\022\035.GroupProto.Query"
  "GroupRequest\032\036.GroupProto.QueryGroupResp"
  "onse\022Z\n\017QueryGroupUsers\022\".GroupProto.Que"
  "ryGroupUsersRequest\032#.GroupProto.QueryGr"
  "oupUsersResponseB\003\200\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Group_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Group_2eproto_sccs[13] = {
  &scc_info_AddGroupRequest_Group_2eproto.base,
  &scc_info_AddGroupResponse_Group_2eproto.base,
  &scc_info_CreateGroupRequest_Group_2eproto.base,
  &scc_info_CreateGroupResponse_Group_2eproto.base,
  &scc_info_GroupInfo_Group_2eproto.base,
  &scc_info_GroupUser_Group_2eproto.base,
  &scc_info_QueryGroupRequest_Group_2eproto.base,
  &scc_info_QueryGroupResponse_Group_2eproto.base,
  &scc_info_QueryGroupUsersRequest_Group_2eproto.base,
  &scc_info_QueryGroupUsersResponse_Group_2eproto.base,
  &scc_info_QuitGroupRequest_Group_2eproto.base,
  &scc_info_QuitGroupResponse_Group_2eproto.base,
  &scc_info_ResultCode_Group_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Group_2eproto_once;
static bool descriptor_table_Group_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Group_2eproto = {
  &descriptor_table_Group_2eproto_initialized, descriptor_table_protodef_Group_2eproto, "Group.proto", 1469,
  &descriptor_table_Group_2eproto_once, descriptor_table_Group_2eproto_sccs, descriptor_table_Group_2eproto_deps, 13, 0,
  schemas, file_default_instances, TableStruct_Group_2eproto::offsets,
  file_level_metadata_Group_2eproto, 13, file_level_enum_descriptors_Group_2eproto, file_level_service_descriptors_Group_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Group_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Group_2eproto), true);
namespace GroupProto {

// ===================================================================

void GroupUser::InitAsDefaultInstance() {
}
class GroupUser::_Internal {
 public:
};

GroupUser::GroupUser()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GroupProto.GroupUser)
}
GroupUser::GroupUser(const GroupUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  useremail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_useremail().empty()) {
    useremail_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.useremail_);
  }
  userphone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_userphone().empty()) {
    userphone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.userphone_);
  }
  userrole_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_userrole().empty()) {
    userrole_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.userrole_);
  }
  // @@protoc_insertion_point(copy_constructor:GroupProto.GroupUser)
}

void GroupUser::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GroupUser_Group_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  useremail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userphone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userrole_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GroupUser::~GroupUser() {
  // @@protoc_insertion_point(destructor:GroupProto.GroupUser)
  SharedDtor();
}

void GroupUser::SharedDtor() {
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  useremail_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userphone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userrole_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GroupUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupUser& GroupUser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroupUser_Group_2eproto.base);
  return *internal_default_instance();
}


void GroupUser::Clear() {
// @@protoc_insertion_point(message_clear_start:GroupProto.GroupUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  useremail_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userphone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userrole_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GroupUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes userName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes userEmail = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_useremail();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes userPhone = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_userphone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes userRole = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_userrole();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GroupProto.GroupUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes userName = 1;
  if (this->username().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_username(), target);
  }

  // bytes userEmail = 2;
  if (this->useremail().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_useremail(), target);
  }

  // bytes userPhone = 3;
  if (this->userphone().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_userphone(), target);
  }

  // bytes userRole = 4;
  if (this->userrole().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_userrole(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GroupProto.GroupUser)
  return target;
}

size_t GroupUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GroupProto.GroupUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes userName = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_username());
  }

  // bytes userEmail = 2;
  if (this->useremail().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_useremail());
  }

  // bytes userPhone = 3;
  if (this->userphone().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_userphone());
  }

  // bytes userRole = 4;
  if (this->userrole().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_userrole());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GroupProto.GroupUser)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GroupProto.GroupUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GroupProto.GroupUser)
    MergeFrom(*source);
  }
}

void GroupUser::MergeFrom(const GroupUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GroupProto.GroupUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.useremail().size() > 0) {

    useremail_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.useremail_);
  }
  if (from.userphone().size() > 0) {

    userphone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.userphone_);
  }
  if (from.userrole().size() > 0) {

    userrole_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.userrole_);
  }
}

void GroupUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GroupProto.GroupUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupUser::CopyFrom(const GroupUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GroupProto.GroupUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupUser::IsInitialized() const {
  return true;
}

void GroupUser::InternalSwap(GroupUser* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  useremail_.Swap(&other->useremail_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  userphone_.Swap(&other->userphone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  userrole_.Swap(&other->userrole_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupUser::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GroupInfo::InitAsDefaultInstance() {
}
class GroupInfo::_Internal {
 public:
};

GroupInfo::GroupInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GroupProto.GroupInfo)
}
GroupInfo::GroupInfo(const GroupInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      groupusers_(from.groupusers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  groupname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_groupname().empty()) {
    groupname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.groupname_);
  }
  groupdesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_groupdesc().empty()) {
    groupdesc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.groupdesc_);
  }
  groupid_ = from.groupid_;
  // @@protoc_insertion_point(copy_constructor:GroupProto.GroupInfo)
}

void GroupInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GroupInfo_Group_2eproto.base);
  groupname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  groupdesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  groupid_ = 0;
}

GroupInfo::~GroupInfo() {
  // @@protoc_insertion_point(destructor:GroupProto.GroupInfo)
  SharedDtor();
}

void GroupInfo::SharedDtor() {
  groupname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  groupdesc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GroupInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupInfo& GroupInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroupInfo_Group_2eproto.base);
  return *internal_default_instance();
}


void GroupInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GroupProto.GroupInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groupusers_.Clear();
  groupname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  groupdesc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  groupid_ = 0;
  _internal_metadata_.Clear();
}

const char* GroupInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 groupId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes groupName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_groupname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes groupDesc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_groupdesc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .GroupProto.GroupUser groupUsers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_groupusers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GroupProto.GroupInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 groupId = 1;
  if (this->groupid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_groupid(), target);
  }

  // bytes groupName = 2;
  if (this->groupname().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_groupname(), target);
  }

  // bytes groupDesc = 3;
  if (this->groupdesc().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_groupdesc(), target);
  }

  // repeated .GroupProto.GroupUser groupUsers = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_groupusers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_groupusers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GroupProto.GroupInfo)
  return target;
}

size_t GroupInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GroupProto.GroupInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GroupProto.GroupUser groupUsers = 4;
  total_size += 1UL * this->_internal_groupusers_size();
  for (const auto& msg : this->groupusers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes groupName = 2;
  if (this->groupname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_groupname());
  }

  // bytes groupDesc = 3;
  if (this->groupdesc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_groupdesc());
  }

  // int32 groupId = 1;
  if (this->groupid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_groupid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GroupProto.GroupInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GroupProto.GroupInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GroupProto.GroupInfo)
    MergeFrom(*source);
  }
}

void GroupInfo::MergeFrom(const GroupInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GroupProto.GroupInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  groupusers_.MergeFrom(from.groupusers_);
  if (from.groupname().size() > 0) {

    groupname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.groupname_);
  }
  if (from.groupdesc().size() > 0) {

    groupdesc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.groupdesc_);
  }
  if (from.groupid() != 0) {
    _internal_set_groupid(from._internal_groupid());
  }
}

void GroupInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GroupProto.GroupInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupInfo::CopyFrom(const GroupInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GroupProto.GroupInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupInfo::IsInitialized() const {
  return true;
}

void GroupInfo::InternalSwap(GroupInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  groupusers_.InternalSwap(&other->groupusers_);
  groupname_.Swap(&other->groupname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  groupdesc_.Swap(&other->groupdesc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(groupid_, other->groupid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResultCode::InitAsDefaultInstance() {
}
class ResultCode::_Internal {
 public:
};

ResultCode::ResultCode()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GroupProto.ResultCode)
}
ResultCode::ResultCode(const ResultCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_errmsg().empty()) {
    errmsg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  errcode_ = from.errcode_;
  // @@protoc_insertion_point(copy_constructor:GroupProto.ResultCode)
}

void ResultCode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResultCode_Group_2eproto.base);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  errcode_ = 0;
}

ResultCode::~ResultCode() {
  // @@protoc_insertion_point(destructor:GroupProto.ResultCode)
  SharedDtor();
}

void ResultCode::SharedDtor() {
  errmsg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResultCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResultCode& ResultCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResultCode_Group_2eproto.base);
  return *internal_default_instance();
}


void ResultCode::Clear() {
// @@protoc_insertion_point(message_clear_start:GroupProto.ResultCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errmsg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  errcode_ = 0;
  _internal_metadata_.Clear();
}

const char* ResultCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 errcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          errcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes errmsg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResultCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GroupProto.ResultCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 errcode = 1;
  if (this->errcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_errcode(), target);
  }

  // bytes errmsg = 2;
  if (this->errmsg().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_errmsg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GroupProto.ResultCode)
  return target;
}

size_t ResultCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GroupProto.ResultCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes errmsg = 2;
  if (this->errmsg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_errmsg());
  }

  // int32 errcode = 1;
  if (this->errcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_errcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResultCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GroupProto.ResultCode)
  GOOGLE_DCHECK_NE(&from, this);
  const ResultCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResultCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GroupProto.ResultCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GroupProto.ResultCode)
    MergeFrom(*source);
  }
}

void ResultCode::MergeFrom(const ResultCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GroupProto.ResultCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errmsg().size() > 0) {

    errmsg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  if (from.errcode() != 0) {
    _internal_set_errcode(from._internal_errcode());
  }
}

void ResultCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GroupProto.ResultCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultCode::CopyFrom(const ResultCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GroupProto.ResultCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultCode::IsInitialized() const {
  return true;
}

void ResultCode::InternalSwap(ResultCode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  errmsg_.Swap(&other->errmsg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(errcode_, other->errcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResultCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateGroupRequest::InitAsDefaultInstance() {
  ::GroupProto::_CreateGroupRequest_default_instance_._instance.get_mutable()->group_ = const_cast< ::GroupProto::GroupInfo*>(
      ::GroupProto::GroupInfo::internal_default_instance());
}
class CreateGroupRequest::_Internal {
 public:
  static const ::GroupProto::GroupInfo& group(const CreateGroupRequest* msg);
};

const ::GroupProto::GroupInfo&
CreateGroupRequest::_Internal::group(const CreateGroupRequest* msg) {
  return *msg->group_;
}
CreateGroupRequest::CreateGroupRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GroupProto.CreateGroupRequest)
}
CreateGroupRequest::CreateGroupRequest(const CreateGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_group()) {
    group_ = new ::GroupProto::GroupInfo(*from.group_);
  } else {
    group_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:GroupProto.CreateGroupRequest)
}

void CreateGroupRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateGroupRequest_Group_2eproto.base);
  group_ = nullptr;
}

CreateGroupRequest::~CreateGroupRequest() {
  // @@protoc_insertion_point(destructor:GroupProto.CreateGroupRequest)
  SharedDtor();
}

void CreateGroupRequest::SharedDtor() {
  if (this != internal_default_instance()) delete group_;
}

void CreateGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateGroupRequest& CreateGroupRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateGroupRequest_Group_2eproto.base);
  return *internal_default_instance();
}


void CreateGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GroupProto.CreateGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && group_ != nullptr) {
    delete group_;
  }
  group_ = nullptr;
  _internal_metadata_.Clear();
}

const char* CreateGroupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .GroupProto.GroupInfo group = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_group(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateGroupRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GroupProto.CreateGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GroupProto.GroupInfo group = 1;
  if (this->has_group()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::group(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GroupProto.CreateGroupRequest)
  return target;
}

size_t CreateGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GroupProto.CreateGroupRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .GroupProto.GroupInfo group = 1;
  if (this->has_group()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateGroupRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GroupProto.CreateGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateGroupRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateGroupRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GroupProto.CreateGroupRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GroupProto.CreateGroupRequest)
    MergeFrom(*source);
  }
}

void CreateGroupRequest::MergeFrom(const CreateGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GroupProto.CreateGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_group()) {
    _internal_mutable_group()->::GroupProto::GroupInfo::MergeFrom(from._internal_group());
  }
}

void CreateGroupRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GroupProto.CreateGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateGroupRequest::CopyFrom(const CreateGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GroupProto.CreateGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGroupRequest::IsInitialized() const {
  return true;
}

void CreateGroupRequest::InternalSwap(CreateGroupRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(group_, other->group_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateGroupRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateGroupResponse::InitAsDefaultInstance() {
  ::GroupProto::_CreateGroupResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::GroupProto::ResultCode*>(
      ::GroupProto::ResultCode::internal_default_instance());
}
class CreateGroupResponse::_Internal {
 public:
  static const ::GroupProto::ResultCode& result(const CreateGroupResponse* msg);
};

const ::GroupProto::ResultCode&
CreateGroupResponse::_Internal::result(const CreateGroupResponse* msg) {
  return *msg->result_;
}
CreateGroupResponse::CreateGroupResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GroupProto.CreateGroupResponse)
}
CreateGroupResponse::CreateGroupResponse(const CreateGroupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::GroupProto::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:GroupProto.CreateGroupResponse)
}

void CreateGroupResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateGroupResponse_Group_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&result_)) + sizeof(success_));
}

CreateGroupResponse::~CreateGroupResponse() {
  // @@protoc_insertion_point(destructor:GroupProto.CreateGroupResponse)
  SharedDtor();
}

void CreateGroupResponse::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void CreateGroupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateGroupResponse& CreateGroupResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateGroupResponse_Group_2eproto.base);
  return *internal_default_instance();
}


void CreateGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GroupProto.CreateGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear();
}

const char* CreateGroupResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .GroupProto.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateGroupResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GroupProto.CreateGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GroupProto.ResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GroupProto.CreateGroupResponse)
  return target;
}

size_t CreateGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GroupProto.CreateGroupResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .GroupProto.ResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateGroupResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GroupProto.CreateGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateGroupResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateGroupResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GroupProto.CreateGroupResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GroupProto.CreateGroupResponse)
    MergeFrom(*source);
  }
}

void CreateGroupResponse::MergeFrom(const CreateGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GroupProto.CreateGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::GroupProto::ResultCode::MergeFrom(from._internal_result());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void CreateGroupResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GroupProto.CreateGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateGroupResponse::CopyFrom(const CreateGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GroupProto.CreateGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGroupResponse::IsInitialized() const {
  return true;
}

void CreateGroupResponse::InternalSwap(CreateGroupResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateGroupResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddGroupRequest::InitAsDefaultInstance() {
}
class AddGroupRequest::_Internal {
 public:
};

AddGroupRequest::AddGroupRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GroupProto.AddGroupRequest)
}
AddGroupRequest::AddGroupRequest(const AddGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  groupname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_groupname().empty()) {
    groupname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.groupname_);
  }
  userrole_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_userrole().empty()) {
    userrole_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.userrole_);
  }
  // @@protoc_insertion_point(copy_constructor:GroupProto.AddGroupRequest)
}

void AddGroupRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddGroupRequest_Group_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  groupname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userrole_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AddGroupRequest::~AddGroupRequest() {
  // @@protoc_insertion_point(destructor:GroupProto.AddGroupRequest)
  SharedDtor();
}

void AddGroupRequest::SharedDtor() {
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  groupname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userrole_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddGroupRequest& AddGroupRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddGroupRequest_Group_2eproto.base);
  return *internal_default_instance();
}


void AddGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GroupProto.AddGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  groupname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userrole_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* AddGroupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes userName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes groupName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_groupname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes userRole = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_userrole();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddGroupRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GroupProto.AddGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes userName = 1;
  if (this->username().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_username(), target);
  }

  // bytes groupName = 2;
  if (this->groupname().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_groupname(), target);
  }

  // bytes userRole = 3;
  if (this->userrole().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_userrole(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GroupProto.AddGroupRequest)
  return target;
}

size_t AddGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GroupProto.AddGroupRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes userName = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_username());
  }

  // bytes groupName = 2;
  if (this->groupname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_groupname());
  }

  // bytes userRole = 3;
  if (this->userrole().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_userrole());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddGroupRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GroupProto.AddGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddGroupRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddGroupRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GroupProto.AddGroupRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GroupProto.AddGroupRequest)
    MergeFrom(*source);
  }
}

void AddGroupRequest::MergeFrom(const AddGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GroupProto.AddGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.groupname().size() > 0) {

    groupname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.groupname_);
  }
  if (from.userrole().size() > 0) {

    userrole_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.userrole_);
  }
}

void AddGroupRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GroupProto.AddGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddGroupRequest::CopyFrom(const AddGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GroupProto.AddGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddGroupRequest::IsInitialized() const {
  return true;
}

void AddGroupRequest::InternalSwap(AddGroupRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  groupname_.Swap(&other->groupname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  userrole_.Swap(&other->userrole_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AddGroupRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddGroupResponse::InitAsDefaultInstance() {
  ::GroupProto::_AddGroupResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::GroupProto::ResultCode*>(
      ::GroupProto::ResultCode::internal_default_instance());
}
class AddGroupResponse::_Internal {
 public:
  static const ::GroupProto::ResultCode& result(const AddGroupResponse* msg);
};

const ::GroupProto::ResultCode&
AddGroupResponse::_Internal::result(const AddGroupResponse* msg) {
  return *msg->result_;
}
AddGroupResponse::AddGroupResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GroupProto.AddGroupResponse)
}
AddGroupResponse::AddGroupResponse(const AddGroupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::GroupProto::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:GroupProto.AddGroupResponse)
}

void AddGroupResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddGroupResponse_Group_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&result_)) + sizeof(success_));
}

AddGroupResponse::~AddGroupResponse() {
  // @@protoc_insertion_point(destructor:GroupProto.AddGroupResponse)
  SharedDtor();
}

void AddGroupResponse::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void AddGroupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddGroupResponse& AddGroupResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddGroupResponse_Group_2eproto.base);
  return *internal_default_instance();
}


void AddGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GroupProto.AddGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear();
}

const char* AddGroupResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .GroupProto.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddGroupResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GroupProto.AddGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GroupProto.ResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GroupProto.AddGroupResponse)
  return target;
}

size_t AddGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GroupProto.AddGroupResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .GroupProto.ResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddGroupResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GroupProto.AddGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddGroupResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddGroupResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GroupProto.AddGroupResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GroupProto.AddGroupResponse)
    MergeFrom(*source);
  }
}

void AddGroupResponse::MergeFrom(const AddGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GroupProto.AddGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::GroupProto::ResultCode::MergeFrom(from._internal_result());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void AddGroupResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GroupProto.AddGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddGroupResponse::CopyFrom(const AddGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GroupProto.AddGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddGroupResponse::IsInitialized() const {
  return true;
}

void AddGroupResponse::InternalSwap(AddGroupResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddGroupResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QuitGroupRequest::InitAsDefaultInstance() {
}
class QuitGroupRequest::_Internal {
 public:
};

QuitGroupRequest::QuitGroupRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GroupProto.QuitGroupRequest)
}
QuitGroupRequest::QuitGroupRequest(const QuitGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  groupname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_groupname().empty()) {
    groupname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.groupname_);
  }
  // @@protoc_insertion_point(copy_constructor:GroupProto.QuitGroupRequest)
}

void QuitGroupRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QuitGroupRequest_Group_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  groupname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

QuitGroupRequest::~QuitGroupRequest() {
  // @@protoc_insertion_point(destructor:GroupProto.QuitGroupRequest)
  SharedDtor();
}

void QuitGroupRequest::SharedDtor() {
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  groupname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QuitGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuitGroupRequest& QuitGroupRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QuitGroupRequest_Group_2eproto.base);
  return *internal_default_instance();
}


void QuitGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GroupProto.QuitGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  groupname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* QuitGroupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes userName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes groupName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_groupname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QuitGroupRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GroupProto.QuitGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes userName = 1;
  if (this->username().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_username(), target);
  }

  // bytes groupName = 2;
  if (this->groupname().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_groupname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GroupProto.QuitGroupRequest)
  return target;
}

size_t QuitGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GroupProto.QuitGroupRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes userName = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_username());
  }

  // bytes groupName = 2;
  if (this->groupname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_groupname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuitGroupRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GroupProto.QuitGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const QuitGroupRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QuitGroupRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GroupProto.QuitGroupRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GroupProto.QuitGroupRequest)
    MergeFrom(*source);
  }
}

void QuitGroupRequest::MergeFrom(const QuitGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GroupProto.QuitGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.groupname().size() > 0) {

    groupname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.groupname_);
  }
}

void QuitGroupRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GroupProto.QuitGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuitGroupRequest::CopyFrom(const QuitGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GroupProto.QuitGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuitGroupRequest::IsInitialized() const {
  return true;
}

void QuitGroupRequest::InternalSwap(QuitGroupRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  groupname_.Swap(&other->groupname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata QuitGroupRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QuitGroupResponse::InitAsDefaultInstance() {
  ::GroupProto::_QuitGroupResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::GroupProto::ResultCode*>(
      ::GroupProto::ResultCode::internal_default_instance());
}
class QuitGroupResponse::_Internal {
 public:
  static const ::GroupProto::ResultCode& result(const QuitGroupResponse* msg);
};

const ::GroupProto::ResultCode&
QuitGroupResponse::_Internal::result(const QuitGroupResponse* msg) {
  return *msg->result_;
}
QuitGroupResponse::QuitGroupResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GroupProto.QuitGroupResponse)
}
QuitGroupResponse::QuitGroupResponse(const QuitGroupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::GroupProto::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:GroupProto.QuitGroupResponse)
}

void QuitGroupResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QuitGroupResponse_Group_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&result_)) + sizeof(success_));
}

QuitGroupResponse::~QuitGroupResponse() {
  // @@protoc_insertion_point(destructor:GroupProto.QuitGroupResponse)
  SharedDtor();
}

void QuitGroupResponse::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void QuitGroupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuitGroupResponse& QuitGroupResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QuitGroupResponse_Group_2eproto.base);
  return *internal_default_instance();
}


void QuitGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GroupProto.QuitGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear();
}

const char* QuitGroupResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .GroupProto.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QuitGroupResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GroupProto.QuitGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GroupProto.ResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GroupProto.QuitGroupResponse)
  return target;
}

size_t QuitGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GroupProto.QuitGroupResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .GroupProto.ResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuitGroupResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GroupProto.QuitGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const QuitGroupResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QuitGroupResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GroupProto.QuitGroupResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GroupProto.QuitGroupResponse)
    MergeFrom(*source);
  }
}

void QuitGroupResponse::MergeFrom(const QuitGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GroupProto.QuitGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::GroupProto::ResultCode::MergeFrom(from._internal_result());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void QuitGroupResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GroupProto.QuitGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuitGroupResponse::CopyFrom(const QuitGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GroupProto.QuitGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuitGroupResponse::IsInitialized() const {
  return true;
}

void QuitGroupResponse::InternalSwap(QuitGroupResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuitGroupResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryGroupRequest::InitAsDefaultInstance() {
}
class QueryGroupRequest::_Internal {
 public:
};

QueryGroupRequest::QueryGroupRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GroupProto.QueryGroupRequest)
}
QueryGroupRequest::QueryGroupRequest(const QueryGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  // @@protoc_insertion_point(copy_constructor:GroupProto.QueryGroupRequest)
}

void QueryGroupRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryGroupRequest_Group_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

QueryGroupRequest::~QueryGroupRequest() {
  // @@protoc_insertion_point(destructor:GroupProto.QueryGroupRequest)
  SharedDtor();
}

void QueryGroupRequest::SharedDtor() {
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QueryGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryGroupRequest& QueryGroupRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryGroupRequest_Group_2eproto.base);
  return *internal_default_instance();
}


void QueryGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GroupProto.QueryGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* QueryGroupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes userName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryGroupRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GroupProto.QueryGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes userName = 1;
  if (this->username().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GroupProto.QueryGroupRequest)
  return target;
}

size_t QueryGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GroupProto.QueryGroupRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes userName = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_username());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryGroupRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GroupProto.QueryGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryGroupRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryGroupRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GroupProto.QueryGroupRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GroupProto.QueryGroupRequest)
    MergeFrom(*source);
  }
}

void QueryGroupRequest::MergeFrom(const QueryGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GroupProto.QueryGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
}

void QueryGroupRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GroupProto.QueryGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryGroupRequest::CopyFrom(const QueryGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GroupProto.QueryGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryGroupRequest::IsInitialized() const {
  return true;
}

void QueryGroupRequest::InternalSwap(QueryGroupRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryGroupRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryGroupResponse::InitAsDefaultInstance() {
  ::GroupProto::_QueryGroupResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::GroupProto::ResultCode*>(
      ::GroupProto::ResultCode::internal_default_instance());
}
class QueryGroupResponse::_Internal {
 public:
  static const ::GroupProto::ResultCode& result(const QueryGroupResponse* msg);
};

const ::GroupProto::ResultCode&
QueryGroupResponse::_Internal::result(const QueryGroupResponse* msg) {
  return *msg->result_;
}
QueryGroupResponse::QueryGroupResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GroupProto.QueryGroupResponse)
}
QueryGroupResponse::QueryGroupResponse(const QueryGroupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      groups_(from.groups_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::GroupProto::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:GroupProto.QueryGroupResponse)
}

void QueryGroupResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryGroupResponse_Group_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&result_)) + sizeof(success_));
}

QueryGroupResponse::~QueryGroupResponse() {
  // @@protoc_insertion_point(destructor:GroupProto.QueryGroupResponse)
  SharedDtor();
}

void QueryGroupResponse::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void QueryGroupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryGroupResponse& QueryGroupResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryGroupResponse_Group_2eproto.base);
  return *internal_default_instance();
}


void QueryGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GroupProto.QueryGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groups_.Clear();
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear();
}

const char* QueryGroupResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .GroupProto.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .GroupProto.GroupInfo groups = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryGroupResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GroupProto.QueryGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GroupProto.ResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // repeated .GroupProto.GroupInfo groups = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_groups_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_groups(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GroupProto.QueryGroupResponse)
  return target;
}

size_t QueryGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GroupProto.QueryGroupResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GroupProto.GroupInfo groups = 3;
  total_size += 1UL * this->_internal_groups_size();
  for (const auto& msg : this->groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .GroupProto.ResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryGroupResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GroupProto.QueryGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryGroupResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryGroupResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GroupProto.QueryGroupResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GroupProto.QueryGroupResponse)
    MergeFrom(*source);
  }
}

void QueryGroupResponse::MergeFrom(const QueryGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GroupProto.QueryGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  groups_.MergeFrom(from.groups_);
  if (from.has_result()) {
    _internal_mutable_result()->::GroupProto::ResultCode::MergeFrom(from._internal_result());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void QueryGroupResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GroupProto.QueryGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryGroupResponse::CopyFrom(const QueryGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GroupProto.QueryGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryGroupResponse::IsInitialized() const {
  return true;
}

void QueryGroupResponse::InternalSwap(QueryGroupResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  groups_.InternalSwap(&other->groups_);
  swap(result_, other->result_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryGroupResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryGroupUsersRequest::InitAsDefaultInstance() {
}
class QueryGroupUsersRequest::_Internal {
 public:
};

QueryGroupUsersRequest::QueryGroupUsersRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GroupProto.QueryGroupUsersRequest)
}
QueryGroupUsersRequest::QueryGroupUsersRequest(const QueryGroupUsersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  groupname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_groupname().empty()) {
    groupname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.groupname_);
  }
  // @@protoc_insertion_point(copy_constructor:GroupProto.QueryGroupUsersRequest)
}

void QueryGroupUsersRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryGroupUsersRequest_Group_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  groupname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

QueryGroupUsersRequest::~QueryGroupUsersRequest() {
  // @@protoc_insertion_point(destructor:GroupProto.QueryGroupUsersRequest)
  SharedDtor();
}

void QueryGroupUsersRequest::SharedDtor() {
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  groupname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QueryGroupUsersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryGroupUsersRequest& QueryGroupUsersRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryGroupUsersRequest_Group_2eproto.base);
  return *internal_default_instance();
}


void QueryGroupUsersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GroupProto.QueryGroupUsersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  groupname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* QueryGroupUsersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes userName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes groupName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_groupname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryGroupUsersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GroupProto.QueryGroupUsersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes userName = 1;
  if (this->username().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_username(), target);
  }

  // bytes groupName = 2;
  if (this->groupname().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_groupname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GroupProto.QueryGroupUsersRequest)
  return target;
}

size_t QueryGroupUsersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GroupProto.QueryGroupUsersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes userName = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_username());
  }

  // bytes groupName = 2;
  if (this->groupname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_groupname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryGroupUsersRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GroupProto.QueryGroupUsersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryGroupUsersRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryGroupUsersRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GroupProto.QueryGroupUsersRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GroupProto.QueryGroupUsersRequest)
    MergeFrom(*source);
  }
}

void QueryGroupUsersRequest::MergeFrom(const QueryGroupUsersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GroupProto.QueryGroupUsersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.groupname().size() > 0) {

    groupname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.groupname_);
  }
}

void QueryGroupUsersRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GroupProto.QueryGroupUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryGroupUsersRequest::CopyFrom(const QueryGroupUsersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GroupProto.QueryGroupUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryGroupUsersRequest::IsInitialized() const {
  return true;
}

void QueryGroupUsersRequest::InternalSwap(QueryGroupUsersRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  groupname_.Swap(&other->groupname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryGroupUsersRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryGroupUsersResponse::InitAsDefaultInstance() {
  ::GroupProto::_QueryGroupUsersResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::GroupProto::ResultCode*>(
      ::GroupProto::ResultCode::internal_default_instance());
}
class QueryGroupUsersResponse::_Internal {
 public:
  static const ::GroupProto::ResultCode& result(const QueryGroupUsersResponse* msg);
};

const ::GroupProto::ResultCode&
QueryGroupUsersResponse::_Internal::result(const QueryGroupUsersResponse* msg) {
  return *msg->result_;
}
QueryGroupUsersResponse::QueryGroupUsersResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GroupProto.QueryGroupUsersResponse)
}
QueryGroupUsersResponse::QueryGroupUsersResponse(const QueryGroupUsersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      groupuser_(from.groupuser_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::GroupProto::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:GroupProto.QueryGroupUsersResponse)
}

void QueryGroupUsersResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryGroupUsersResponse_Group_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&result_)) + sizeof(success_));
}

QueryGroupUsersResponse::~QueryGroupUsersResponse() {
  // @@protoc_insertion_point(destructor:GroupProto.QueryGroupUsersResponse)
  SharedDtor();
}

void QueryGroupUsersResponse::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void QueryGroupUsersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryGroupUsersResponse& QueryGroupUsersResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryGroupUsersResponse_Group_2eproto.base);
  return *internal_default_instance();
}


void QueryGroupUsersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GroupProto.QueryGroupUsersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groupuser_.Clear();
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear();
}

const char* QueryGroupUsersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .GroupProto.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .GroupProto.GroupUser groupUser = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_groupuser(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryGroupUsersResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GroupProto.QueryGroupUsersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GroupProto.ResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // repeated .GroupProto.GroupUser groupUser = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_groupuser_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_groupuser(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GroupProto.QueryGroupUsersResponse)
  return target;
}

size_t QueryGroupUsersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GroupProto.QueryGroupUsersResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GroupProto.GroupUser groupUser = 3;
  total_size += 1UL * this->_internal_groupuser_size();
  for (const auto& msg : this->groupuser_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .GroupProto.ResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryGroupUsersResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GroupProto.QueryGroupUsersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryGroupUsersResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryGroupUsersResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GroupProto.QueryGroupUsersResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GroupProto.QueryGroupUsersResponse)
    MergeFrom(*source);
  }
}

void QueryGroupUsersResponse::MergeFrom(const QueryGroupUsersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GroupProto.QueryGroupUsersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  groupuser_.MergeFrom(from.groupuser_);
  if (from.has_result()) {
    _internal_mutable_result()->::GroupProto::ResultCode::MergeFrom(from._internal_result());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void QueryGroupUsersResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GroupProto.QueryGroupUsersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryGroupUsersResponse::CopyFrom(const QueryGroupUsersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GroupProto.QueryGroupUsersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryGroupUsersResponse::IsInitialized() const {
  return true;
}

void QueryGroupUsersResponse::InternalSwap(QueryGroupUsersResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  groupuser_.InternalSwap(&other->groupuser_);
  swap(result_, other->result_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryGroupUsersResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

GroupServiceRpc::~GroupServiceRpc() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GroupServiceRpc::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Group_2eproto);
  return file_level_service_descriptors_Group_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GroupServiceRpc::GetDescriptor() {
  return descriptor();
}

void GroupServiceRpc::CreateGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::GroupProto::CreateGroupRequest*,
                         ::GroupProto::CreateGroupResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CreateGroup() not implemented.");
  done->Run();
}

void GroupServiceRpc::AddGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::GroupProto::AddGroupRequest*,
                         ::GroupProto::AddGroupResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddGroup() not implemented.");
  done->Run();
}

void GroupServiceRpc::QuitGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::GroupProto::QuitGroupRequest*,
                         ::GroupProto::QuitGroupResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QuitGroup() not implemented.");
  done->Run();
}

void GroupServiceRpc::QueryGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::GroupProto::QueryGroupRequest*,
                         ::GroupProto::QueryGroupResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QueryGroup() not implemented.");
  done->Run();
}

void GroupServiceRpc::QueryGroupUsers(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::GroupProto::QueryGroupUsersRequest*,
                         ::GroupProto::QueryGroupUsersResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QueryGroupUsers() not implemented.");
  done->Run();
}

void GroupServiceRpc::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_Group_2eproto[0]);
  switch(method->index()) {
    case 0:
      CreateGroup(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::GroupProto::CreateGroupRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::GroupProto::CreateGroupResponse*>(
                 response),
             done);
      break;
    case 1:
      AddGroup(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::GroupProto::AddGroupRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::GroupProto::AddGroupResponse*>(
                 response),
             done);
      break;
    case 2:
      QuitGroup(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::GroupProto::QuitGroupRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::GroupProto::QuitGroupResponse*>(
                 response),
             done);
      break;
    case 3:
      QueryGroup(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::GroupProto::QueryGroupRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::GroupProto::QueryGroupResponse*>(
                 response),
             done);
      break;
    case 4:
      QueryGroupUsers(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::GroupProto::QueryGroupUsersRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::GroupProto::QueryGroupUsersResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& GroupServiceRpc::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::GroupProto::CreateGroupRequest::default_instance();
    case 1:
      return ::GroupProto::AddGroupRequest::default_instance();
    case 2:
      return ::GroupProto::QuitGroupRequest::default_instance();
    case 3:
      return ::GroupProto::QueryGroupRequest::default_instance();
    case 4:
      return ::GroupProto::QueryGroupUsersRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& GroupServiceRpc::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::GroupProto::CreateGroupResponse::default_instance();
    case 1:
      return ::GroupProto::AddGroupResponse::default_instance();
    case 2:
      return ::GroupProto::QuitGroupResponse::default_instance();
    case 3:
      return ::GroupProto::QueryGroupResponse::default_instance();
    case 4:
      return ::GroupProto::QueryGroupUsersResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

GroupServiceRpc_Stub::GroupServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
GroupServiceRpc_Stub::GroupServiceRpc_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
GroupServiceRpc_Stub::~GroupServiceRpc_Stub() {
  if (owns_channel_) delete channel_;
}

void GroupServiceRpc_Stub::CreateGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::GroupProto::CreateGroupRequest* request,
                              ::GroupProto::CreateGroupResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void GroupServiceRpc_Stub::AddGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::GroupProto::AddGroupRequest* request,
                              ::GroupProto::AddGroupResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void GroupServiceRpc_Stub::QuitGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::GroupProto::QuitGroupRequest* request,
                              ::GroupProto::QuitGroupResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void GroupServiceRpc_Stub::QueryGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::GroupProto::QueryGroupRequest* request,
                              ::GroupProto::QueryGroupResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void GroupServiceRpc_Stub::QueryGroupUsers(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::GroupProto::QueryGroupUsersRequest* request,
                              ::GroupProto::QueryGroupUsersResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace GroupProto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::GroupProto::GroupUser* Arena::CreateMaybeMessage< ::GroupProto::GroupUser >(Arena* arena) {
  return Arena::CreateInternal< ::GroupProto::GroupUser >(arena);
}
template<> PROTOBUF_NOINLINE ::GroupProto::GroupInfo* Arena::CreateMaybeMessage< ::GroupProto::GroupInfo >(Arena* arena) {
  return Arena::CreateInternal< ::GroupProto::GroupInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::GroupProto::ResultCode* Arena::CreateMaybeMessage< ::GroupProto::ResultCode >(Arena* arena) {
  return Arena::CreateInternal< ::GroupProto::ResultCode >(arena);
}
template<> PROTOBUF_NOINLINE ::GroupProto::CreateGroupRequest* Arena::CreateMaybeMessage< ::GroupProto::CreateGroupRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GroupProto::CreateGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GroupProto::CreateGroupResponse* Arena::CreateMaybeMessage< ::GroupProto::CreateGroupResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GroupProto::CreateGroupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GroupProto::AddGroupRequest* Arena::CreateMaybeMessage< ::GroupProto::AddGroupRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GroupProto::AddGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GroupProto::AddGroupResponse* Arena::CreateMaybeMessage< ::GroupProto::AddGroupResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GroupProto::AddGroupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GroupProto::QuitGroupRequest* Arena::CreateMaybeMessage< ::GroupProto::QuitGroupRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GroupProto::QuitGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GroupProto::QuitGroupResponse* Arena::CreateMaybeMessage< ::GroupProto::QuitGroupResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GroupProto::QuitGroupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GroupProto::QueryGroupRequest* Arena::CreateMaybeMessage< ::GroupProto::QueryGroupRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GroupProto::QueryGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GroupProto::QueryGroupResponse* Arena::CreateMaybeMessage< ::GroupProto::QueryGroupResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GroupProto::QueryGroupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GroupProto::QueryGroupUsersRequest* Arena::CreateMaybeMessage< ::GroupProto::QueryGroupUsersRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GroupProto::QueryGroupUsersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GroupProto::QueryGroupUsersResponse* Arena::CreateMaybeMessage< ::GroupProto::QueryGroupUsersResponse >(Arena* arena) {
  return Arena::CreateInternal< ::GroupProto::QueryGroupUsersResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
