// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: offlinemessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_offlinemessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_offlinemessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_offlinemessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_offlinemessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[22]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_offlinemessage_2eproto;
namespace OfflineMessageProto {
class ResultCode;
class ResultCodeDefaultTypeInternal;
extern ResultCodeDefaultTypeInternal _ResultCode_default_instance_;
class addOfflineDepartMsgRequest;
class addOfflineDepartMsgRequestDefaultTypeInternal;
extern addOfflineDepartMsgRequestDefaultTypeInternal _addOfflineDepartMsgRequest_default_instance_;
class addOfflineDepartMsgResponse;
class addOfflineDepartMsgResponseDefaultTypeInternal;
extern addOfflineDepartMsgResponseDefaultTypeInternal _addOfflineDepartMsgResponse_default_instance_;
class addOfflineGroupMsgRequest;
class addOfflineGroupMsgRequestDefaultTypeInternal;
extern addOfflineGroupMsgRequestDefaultTypeInternal _addOfflineGroupMsgRequest_default_instance_;
class addOfflineGroupMsgResponse;
class addOfflineGroupMsgResponseDefaultTypeInternal;
extern addOfflineGroupMsgResponseDefaultTypeInternal _addOfflineGroupMsgResponse_default_instance_;
class addOfflineMsgRequest;
class addOfflineMsgRequestDefaultTypeInternal;
extern addOfflineMsgRequestDefaultTypeInternal _addOfflineMsgRequest_default_instance_;
class addOfflineMsgResponse;
class addOfflineMsgResponseDefaultTypeInternal;
extern addOfflineMsgResponseDefaultTypeInternal _addOfflineMsgResponse_default_instance_;
class delOfflineDepartMsgRequest;
class delOfflineDepartMsgRequestDefaultTypeInternal;
extern delOfflineDepartMsgRequestDefaultTypeInternal _delOfflineDepartMsgRequest_default_instance_;
class delOfflineDepartMsgResponse;
class delOfflineDepartMsgResponseDefaultTypeInternal;
extern delOfflineDepartMsgResponseDefaultTypeInternal _delOfflineDepartMsgResponse_default_instance_;
class delOfflineGroupMsgRequest;
class delOfflineGroupMsgRequestDefaultTypeInternal;
extern delOfflineGroupMsgRequestDefaultTypeInternal _delOfflineGroupMsgRequest_default_instance_;
class delOfflineGroupMsgResponse;
class delOfflineGroupMsgResponseDefaultTypeInternal;
extern delOfflineGroupMsgResponseDefaultTypeInternal _delOfflineGroupMsgResponse_default_instance_;
class delOfflineMsgRequest;
class delOfflineMsgRequestDefaultTypeInternal;
extern delOfflineMsgRequestDefaultTypeInternal _delOfflineMsgRequest_default_instance_;
class delOfflineMsgResponse;
class delOfflineMsgResponseDefaultTypeInternal;
extern delOfflineMsgResponseDefaultTypeInternal _delOfflineMsgResponse_default_instance_;
class departMsg;
class departMsgDefaultTypeInternal;
extern departMsgDefaultTypeInternal _departMsg_default_instance_;
class groupMsg;
class groupMsgDefaultTypeInternal;
extern groupMsgDefaultTypeInternal _groupMsg_default_instance_;
class msg;
class msgDefaultTypeInternal;
extern msgDefaultTypeInternal _msg_default_instance_;
class queryOfflineDepartMsgRequest;
class queryOfflineDepartMsgRequestDefaultTypeInternal;
extern queryOfflineDepartMsgRequestDefaultTypeInternal _queryOfflineDepartMsgRequest_default_instance_;
class queryOfflineDepartMsgResponse;
class queryOfflineDepartMsgResponseDefaultTypeInternal;
extern queryOfflineDepartMsgResponseDefaultTypeInternal _queryOfflineDepartMsgResponse_default_instance_;
class queryOfflineGroupMsgRequest;
class queryOfflineGroupMsgRequestDefaultTypeInternal;
extern queryOfflineGroupMsgRequestDefaultTypeInternal _queryOfflineGroupMsgRequest_default_instance_;
class queryOfflineGroupMsgResponse;
class queryOfflineGroupMsgResponseDefaultTypeInternal;
extern queryOfflineGroupMsgResponseDefaultTypeInternal _queryOfflineGroupMsgResponse_default_instance_;
class queryOfflineMsgRequest;
class queryOfflineMsgRequestDefaultTypeInternal;
extern queryOfflineMsgRequestDefaultTypeInternal _queryOfflineMsgRequest_default_instance_;
class queryOfflineMsgResponse;
class queryOfflineMsgResponseDefaultTypeInternal;
extern queryOfflineMsgResponseDefaultTypeInternal _queryOfflineMsgResponse_default_instance_;
}  // namespace OfflineMessageProto
PROTOBUF_NAMESPACE_OPEN
template<> ::OfflineMessageProto::ResultCode* Arena::CreateMaybeMessage<::OfflineMessageProto::ResultCode>(Arena*);
template<> ::OfflineMessageProto::addOfflineDepartMsgRequest* Arena::CreateMaybeMessage<::OfflineMessageProto::addOfflineDepartMsgRequest>(Arena*);
template<> ::OfflineMessageProto::addOfflineDepartMsgResponse* Arena::CreateMaybeMessage<::OfflineMessageProto::addOfflineDepartMsgResponse>(Arena*);
template<> ::OfflineMessageProto::addOfflineGroupMsgRequest* Arena::CreateMaybeMessage<::OfflineMessageProto::addOfflineGroupMsgRequest>(Arena*);
template<> ::OfflineMessageProto::addOfflineGroupMsgResponse* Arena::CreateMaybeMessage<::OfflineMessageProto::addOfflineGroupMsgResponse>(Arena*);
template<> ::OfflineMessageProto::addOfflineMsgRequest* Arena::CreateMaybeMessage<::OfflineMessageProto::addOfflineMsgRequest>(Arena*);
template<> ::OfflineMessageProto::addOfflineMsgResponse* Arena::CreateMaybeMessage<::OfflineMessageProto::addOfflineMsgResponse>(Arena*);
template<> ::OfflineMessageProto::delOfflineDepartMsgRequest* Arena::CreateMaybeMessage<::OfflineMessageProto::delOfflineDepartMsgRequest>(Arena*);
template<> ::OfflineMessageProto::delOfflineDepartMsgResponse* Arena::CreateMaybeMessage<::OfflineMessageProto::delOfflineDepartMsgResponse>(Arena*);
template<> ::OfflineMessageProto::delOfflineGroupMsgRequest* Arena::CreateMaybeMessage<::OfflineMessageProto::delOfflineGroupMsgRequest>(Arena*);
template<> ::OfflineMessageProto::delOfflineGroupMsgResponse* Arena::CreateMaybeMessage<::OfflineMessageProto::delOfflineGroupMsgResponse>(Arena*);
template<> ::OfflineMessageProto::delOfflineMsgRequest* Arena::CreateMaybeMessage<::OfflineMessageProto::delOfflineMsgRequest>(Arena*);
template<> ::OfflineMessageProto::delOfflineMsgResponse* Arena::CreateMaybeMessage<::OfflineMessageProto::delOfflineMsgResponse>(Arena*);
template<> ::OfflineMessageProto::departMsg* Arena::CreateMaybeMessage<::OfflineMessageProto::departMsg>(Arena*);
template<> ::OfflineMessageProto::groupMsg* Arena::CreateMaybeMessage<::OfflineMessageProto::groupMsg>(Arena*);
template<> ::OfflineMessageProto::msg* Arena::CreateMaybeMessage<::OfflineMessageProto::msg>(Arena*);
template<> ::OfflineMessageProto::queryOfflineDepartMsgRequest* Arena::CreateMaybeMessage<::OfflineMessageProto::queryOfflineDepartMsgRequest>(Arena*);
template<> ::OfflineMessageProto::queryOfflineDepartMsgResponse* Arena::CreateMaybeMessage<::OfflineMessageProto::queryOfflineDepartMsgResponse>(Arena*);
template<> ::OfflineMessageProto::queryOfflineGroupMsgRequest* Arena::CreateMaybeMessage<::OfflineMessageProto::queryOfflineGroupMsgRequest>(Arena*);
template<> ::OfflineMessageProto::queryOfflineGroupMsgResponse* Arena::CreateMaybeMessage<::OfflineMessageProto::queryOfflineGroupMsgResponse>(Arena*);
template<> ::OfflineMessageProto::queryOfflineMsgRequest* Arena::CreateMaybeMessage<::OfflineMessageProto::queryOfflineMsgRequest>(Arena*);
template<> ::OfflineMessageProto::queryOfflineMsgResponse* Arena::CreateMaybeMessage<::OfflineMessageProto::queryOfflineMsgResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace OfflineMessageProto {

// ===================================================================

class ResultCode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OfflineMessageProto.ResultCode) */ {
 public:
  ResultCode();
  virtual ~ResultCode();

  ResultCode(const ResultCode& from);
  ResultCode(ResultCode&& from) noexcept
    : ResultCode() {
    *this = ::std::move(from);
  }

  inline ResultCode& operator=(const ResultCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultCode& operator=(ResultCode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResultCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResultCode* internal_default_instance() {
    return reinterpret_cast<const ResultCode*>(
               &_ResultCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ResultCode& a, ResultCode& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultCode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResultCode* New() const final {
    return CreateMaybeMessage<ResultCode>(nullptr);
  }

  ResultCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResultCode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResultCode& from);
  void MergeFrom(const ResultCode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultCode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OfflineMessageProto.ResultCode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offlinemessage_2eproto);
    return ::descriptor_table_offlinemessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 2,
    kErrcodeFieldNumber = 1,
  };
  // bytes errmsg = 2;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const void* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // int32 errcode = 1;
  void clear_errcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errcode() const;
  void set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errcode() const;
  void _internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:OfflineMessageProto.ResultCode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::int32 errcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offlinemessage_2eproto;
};
// -------------------------------------------------------------------

class msg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OfflineMessageProto.msg) */ {
 public:
  msg();
  virtual ~msg();

  msg(const msg& from);
  msg(msg&& from) noexcept
    : msg() {
    *this = ::std::move(from);
  }

  inline msg& operator=(const msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg& operator=(msg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg* internal_default_instance() {
    return reinterpret_cast<const msg*>(
               &_msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(msg& a, msg& b) {
    a.Swap(&b);
  }
  inline void Swap(msg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msg* New() const final {
    return CreateMaybeMessage<msg>(nullptr);
  }

  msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msg& from);
  void MergeFrom(const msg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OfflineMessageProto.msg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offlinemessage_2eproto);
    return ::descriptor_table_offlinemessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecvnameFieldNumber = 2,
    kSendnameFieldNumber = 3,
    kMessageFieldNumber = 4,
    kMsgidFieldNumber = 1,
  };
  // bytes recvname = 2;
  void clear_recvname();
  const std::string& recvname() const;
  void set_recvname(const std::string& value);
  void set_recvname(std::string&& value);
  void set_recvname(const char* value);
  void set_recvname(const void* value, size_t size);
  std::string* mutable_recvname();
  std::string* release_recvname();
  void set_allocated_recvname(std::string* recvname);
  private:
  const std::string& _internal_recvname() const;
  void _internal_set_recvname(const std::string& value);
  std::string* _internal_mutable_recvname();
  public:

  // bytes sendname = 3;
  void clear_sendname();
  const std::string& sendname() const;
  void set_sendname(const std::string& value);
  void set_sendname(std::string&& value);
  void set_sendname(const char* value);
  void set_sendname(const void* value, size_t size);
  std::string* mutable_sendname();
  std::string* release_sendname();
  void set_allocated_sendname(std::string* sendname);
  private:
  const std::string& _internal_sendname() const;
  void _internal_set_sendname(const std::string& value);
  std::string* _internal_mutable_sendname();
  public:

  // bytes message = 4;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const void* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 msgid = 1;
  void clear_msgid();
  ::PROTOBUF_NAMESPACE_ID::int32 msgid() const;
  void set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msgid() const;
  void _internal_set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:OfflineMessageProto.msg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recvname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sendname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 msgid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offlinemessage_2eproto;
};
// -------------------------------------------------------------------

class addOfflineMsgRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OfflineMessageProto.addOfflineMsgRequest) */ {
 public:
  addOfflineMsgRequest();
  virtual ~addOfflineMsgRequest();

  addOfflineMsgRequest(const addOfflineMsgRequest& from);
  addOfflineMsgRequest(addOfflineMsgRequest&& from) noexcept
    : addOfflineMsgRequest() {
    *this = ::std::move(from);
  }

  inline addOfflineMsgRequest& operator=(const addOfflineMsgRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline addOfflineMsgRequest& operator=(addOfflineMsgRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const addOfflineMsgRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const addOfflineMsgRequest* internal_default_instance() {
    return reinterpret_cast<const addOfflineMsgRequest*>(
               &_addOfflineMsgRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(addOfflineMsgRequest& a, addOfflineMsgRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(addOfflineMsgRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline addOfflineMsgRequest* New() const final {
    return CreateMaybeMessage<addOfflineMsgRequest>(nullptr);
  }

  addOfflineMsgRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<addOfflineMsgRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const addOfflineMsgRequest& from);
  void MergeFrom(const addOfflineMsgRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addOfflineMsgRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OfflineMessageProto.addOfflineMsgRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offlinemessage_2eproto);
    return ::descriptor_table_offlinemessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOfflineMsgFieldNumber = 1,
  };
  // .OfflineMessageProto.msg OfflineMsg = 1;
  bool has_offlinemsg() const;
  private:
  bool _internal_has_offlinemsg() const;
  public:
  void clear_offlinemsg();
  const ::OfflineMessageProto::msg& offlinemsg() const;
  ::OfflineMessageProto::msg* release_offlinemsg();
  ::OfflineMessageProto::msg* mutable_offlinemsg();
  void set_allocated_offlinemsg(::OfflineMessageProto::msg* offlinemsg);
  private:
  const ::OfflineMessageProto::msg& _internal_offlinemsg() const;
  ::OfflineMessageProto::msg* _internal_mutable_offlinemsg();
  public:

  // @@protoc_insertion_point(class_scope:OfflineMessageProto.addOfflineMsgRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::OfflineMessageProto::msg* offlinemsg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offlinemessage_2eproto;
};
// -------------------------------------------------------------------

class addOfflineMsgResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OfflineMessageProto.addOfflineMsgResponse) */ {
 public:
  addOfflineMsgResponse();
  virtual ~addOfflineMsgResponse();

  addOfflineMsgResponse(const addOfflineMsgResponse& from);
  addOfflineMsgResponse(addOfflineMsgResponse&& from) noexcept
    : addOfflineMsgResponse() {
    *this = ::std::move(from);
  }

  inline addOfflineMsgResponse& operator=(const addOfflineMsgResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline addOfflineMsgResponse& operator=(addOfflineMsgResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const addOfflineMsgResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const addOfflineMsgResponse* internal_default_instance() {
    return reinterpret_cast<const addOfflineMsgResponse*>(
               &_addOfflineMsgResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(addOfflineMsgResponse& a, addOfflineMsgResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(addOfflineMsgResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline addOfflineMsgResponse* New() const final {
    return CreateMaybeMessage<addOfflineMsgResponse>(nullptr);
  }

  addOfflineMsgResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<addOfflineMsgResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const addOfflineMsgResponse& from);
  void MergeFrom(const addOfflineMsgResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addOfflineMsgResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OfflineMessageProto.addOfflineMsgResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offlinemessage_2eproto);
    return ::descriptor_table_offlinemessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // .OfflineMessageProto.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::OfflineMessageProto::ResultCode& result() const;
  ::OfflineMessageProto::ResultCode* release_result();
  ::OfflineMessageProto::ResultCode* mutable_result();
  void set_allocated_result(::OfflineMessageProto::ResultCode* result);
  private:
  const ::OfflineMessageProto::ResultCode& _internal_result() const;
  ::OfflineMessageProto::ResultCode* _internal_mutable_result();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:OfflineMessageProto.addOfflineMsgResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::OfflineMessageProto::ResultCode* result_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offlinemessage_2eproto;
};
// -------------------------------------------------------------------

class delOfflineMsgRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OfflineMessageProto.delOfflineMsgRequest) */ {
 public:
  delOfflineMsgRequest();
  virtual ~delOfflineMsgRequest();

  delOfflineMsgRequest(const delOfflineMsgRequest& from);
  delOfflineMsgRequest(delOfflineMsgRequest&& from) noexcept
    : delOfflineMsgRequest() {
    *this = ::std::move(from);
  }

  inline delOfflineMsgRequest& operator=(const delOfflineMsgRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline delOfflineMsgRequest& operator=(delOfflineMsgRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const delOfflineMsgRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const delOfflineMsgRequest* internal_default_instance() {
    return reinterpret_cast<const delOfflineMsgRequest*>(
               &_delOfflineMsgRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(delOfflineMsgRequest& a, delOfflineMsgRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(delOfflineMsgRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline delOfflineMsgRequest* New() const final {
    return CreateMaybeMessage<delOfflineMsgRequest>(nullptr);
  }

  delOfflineMsgRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<delOfflineMsgRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const delOfflineMsgRequest& from);
  void MergeFrom(const delOfflineMsgRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(delOfflineMsgRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OfflineMessageProto.delOfflineMsgRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offlinemessage_2eproto);
    return ::descriptor_table_offlinemessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOfflineMsgFieldNumber = 1,
  };
  // .OfflineMessageProto.msg OfflineMsg = 1;
  bool has_offlinemsg() const;
  private:
  bool _internal_has_offlinemsg() const;
  public:
  void clear_offlinemsg();
  const ::OfflineMessageProto::msg& offlinemsg() const;
  ::OfflineMessageProto::msg* release_offlinemsg();
  ::OfflineMessageProto::msg* mutable_offlinemsg();
  void set_allocated_offlinemsg(::OfflineMessageProto::msg* offlinemsg);
  private:
  const ::OfflineMessageProto::msg& _internal_offlinemsg() const;
  ::OfflineMessageProto::msg* _internal_mutable_offlinemsg();
  public:

  // @@protoc_insertion_point(class_scope:OfflineMessageProto.delOfflineMsgRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::OfflineMessageProto::msg* offlinemsg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offlinemessage_2eproto;
};
// -------------------------------------------------------------------

class delOfflineMsgResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OfflineMessageProto.delOfflineMsgResponse) */ {
 public:
  delOfflineMsgResponse();
  virtual ~delOfflineMsgResponse();

  delOfflineMsgResponse(const delOfflineMsgResponse& from);
  delOfflineMsgResponse(delOfflineMsgResponse&& from) noexcept
    : delOfflineMsgResponse() {
    *this = ::std::move(from);
  }

  inline delOfflineMsgResponse& operator=(const delOfflineMsgResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline delOfflineMsgResponse& operator=(delOfflineMsgResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const delOfflineMsgResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const delOfflineMsgResponse* internal_default_instance() {
    return reinterpret_cast<const delOfflineMsgResponse*>(
               &_delOfflineMsgResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(delOfflineMsgResponse& a, delOfflineMsgResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(delOfflineMsgResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline delOfflineMsgResponse* New() const final {
    return CreateMaybeMessage<delOfflineMsgResponse>(nullptr);
  }

  delOfflineMsgResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<delOfflineMsgResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const delOfflineMsgResponse& from);
  void MergeFrom(const delOfflineMsgResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(delOfflineMsgResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OfflineMessageProto.delOfflineMsgResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offlinemessage_2eproto);
    return ::descriptor_table_offlinemessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // .OfflineMessageProto.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::OfflineMessageProto::ResultCode& result() const;
  ::OfflineMessageProto::ResultCode* release_result();
  ::OfflineMessageProto::ResultCode* mutable_result();
  void set_allocated_result(::OfflineMessageProto::ResultCode* result);
  private:
  const ::OfflineMessageProto::ResultCode& _internal_result() const;
  ::OfflineMessageProto::ResultCode* _internal_mutable_result();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:OfflineMessageProto.delOfflineMsgResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::OfflineMessageProto::ResultCode* result_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offlinemessage_2eproto;
};
// -------------------------------------------------------------------

class queryOfflineMsgRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OfflineMessageProto.queryOfflineMsgRequest) */ {
 public:
  queryOfflineMsgRequest();
  virtual ~queryOfflineMsgRequest();

  queryOfflineMsgRequest(const queryOfflineMsgRequest& from);
  queryOfflineMsgRequest(queryOfflineMsgRequest&& from) noexcept
    : queryOfflineMsgRequest() {
    *this = ::std::move(from);
  }

  inline queryOfflineMsgRequest& operator=(const queryOfflineMsgRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline queryOfflineMsgRequest& operator=(queryOfflineMsgRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const queryOfflineMsgRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const queryOfflineMsgRequest* internal_default_instance() {
    return reinterpret_cast<const queryOfflineMsgRequest*>(
               &_queryOfflineMsgRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(queryOfflineMsgRequest& a, queryOfflineMsgRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(queryOfflineMsgRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline queryOfflineMsgRequest* New() const final {
    return CreateMaybeMessage<queryOfflineMsgRequest>(nullptr);
  }

  queryOfflineMsgRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<queryOfflineMsgRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const queryOfflineMsgRequest& from);
  void MergeFrom(const queryOfflineMsgRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(queryOfflineMsgRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OfflineMessageProto.queryOfflineMsgRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offlinemessage_2eproto);
    return ::descriptor_table_offlinemessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecvnameFieldNumber = 1,
  };
  // bytes recvname = 1;
  void clear_recvname();
  const std::string& recvname() const;
  void set_recvname(const std::string& value);
  void set_recvname(std::string&& value);
  void set_recvname(const char* value);
  void set_recvname(const void* value, size_t size);
  std::string* mutable_recvname();
  std::string* release_recvname();
  void set_allocated_recvname(std::string* recvname);
  private:
  const std::string& _internal_recvname() const;
  void _internal_set_recvname(const std::string& value);
  std::string* _internal_mutable_recvname();
  public:

  // @@protoc_insertion_point(class_scope:OfflineMessageProto.queryOfflineMsgRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recvname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offlinemessage_2eproto;
};
// -------------------------------------------------------------------

class queryOfflineMsgResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OfflineMessageProto.queryOfflineMsgResponse) */ {
 public:
  queryOfflineMsgResponse();
  virtual ~queryOfflineMsgResponse();

  queryOfflineMsgResponse(const queryOfflineMsgResponse& from);
  queryOfflineMsgResponse(queryOfflineMsgResponse&& from) noexcept
    : queryOfflineMsgResponse() {
    *this = ::std::move(from);
  }

  inline queryOfflineMsgResponse& operator=(const queryOfflineMsgResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline queryOfflineMsgResponse& operator=(queryOfflineMsgResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const queryOfflineMsgResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const queryOfflineMsgResponse* internal_default_instance() {
    return reinterpret_cast<const queryOfflineMsgResponse*>(
               &_queryOfflineMsgResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(queryOfflineMsgResponse& a, queryOfflineMsgResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(queryOfflineMsgResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline queryOfflineMsgResponse* New() const final {
    return CreateMaybeMessage<queryOfflineMsgResponse>(nullptr);
  }

  queryOfflineMsgResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<queryOfflineMsgResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const queryOfflineMsgResponse& from);
  void MergeFrom(const queryOfflineMsgResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(queryOfflineMsgResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OfflineMessageProto.queryOfflineMsgResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offlinemessage_2eproto);
    return ::descriptor_table_offlinemessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOfflineMsgFieldNumber = 1,
    kResultFieldNumber = 2,
    kSuccessFieldNumber = 3,
  };
  // repeated .OfflineMessageProto.msg OfflineMsg = 1;
  int offlinemsg_size() const;
  private:
  int _internal_offlinemsg_size() const;
  public:
  void clear_offlinemsg();
  ::OfflineMessageProto::msg* mutable_offlinemsg(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OfflineMessageProto::msg >*
      mutable_offlinemsg();
  private:
  const ::OfflineMessageProto::msg& _internal_offlinemsg(int index) const;
  ::OfflineMessageProto::msg* _internal_add_offlinemsg();
  public:
  const ::OfflineMessageProto::msg& offlinemsg(int index) const;
  ::OfflineMessageProto::msg* add_offlinemsg();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OfflineMessageProto::msg >&
      offlinemsg() const;

  // .OfflineMessageProto.ResultCode result = 2;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::OfflineMessageProto::ResultCode& result() const;
  ::OfflineMessageProto::ResultCode* release_result();
  ::OfflineMessageProto::ResultCode* mutable_result();
  void set_allocated_result(::OfflineMessageProto::ResultCode* result);
  private:
  const ::OfflineMessageProto::ResultCode& _internal_result() const;
  ::OfflineMessageProto::ResultCode* _internal_mutable_result();
  public:

  // bool success = 3;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:OfflineMessageProto.queryOfflineMsgResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OfflineMessageProto::msg > offlinemsg_;
  ::OfflineMessageProto::ResultCode* result_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offlinemessage_2eproto;
};
// -------------------------------------------------------------------

class groupMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OfflineMessageProto.groupMsg) */ {
 public:
  groupMsg();
  virtual ~groupMsg();

  groupMsg(const groupMsg& from);
  groupMsg(groupMsg&& from) noexcept
    : groupMsg() {
    *this = ::std::move(from);
  }

  inline groupMsg& operator=(const groupMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline groupMsg& operator=(groupMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const groupMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const groupMsg* internal_default_instance() {
    return reinterpret_cast<const groupMsg*>(
               &_groupMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(groupMsg& a, groupMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(groupMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline groupMsg* New() const final {
    return CreateMaybeMessage<groupMsg>(nullptr);
  }

  groupMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<groupMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const groupMsg& from);
  void MergeFrom(const groupMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(groupMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OfflineMessageProto.groupMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offlinemessage_2eproto);
    return ::descriptor_table_offlinemessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupnameFieldNumber = 2,
    kSendnameFieldNumber = 3,
    kMessageFieldNumber = 4,
    kMsgidFieldNumber = 1,
  };
  // bytes groupname = 2;
  void clear_groupname();
  const std::string& groupname() const;
  void set_groupname(const std::string& value);
  void set_groupname(std::string&& value);
  void set_groupname(const char* value);
  void set_groupname(const void* value, size_t size);
  std::string* mutable_groupname();
  std::string* release_groupname();
  void set_allocated_groupname(std::string* groupname);
  private:
  const std::string& _internal_groupname() const;
  void _internal_set_groupname(const std::string& value);
  std::string* _internal_mutable_groupname();
  public:

  // bytes sendname = 3;
  void clear_sendname();
  const std::string& sendname() const;
  void set_sendname(const std::string& value);
  void set_sendname(std::string&& value);
  void set_sendname(const char* value);
  void set_sendname(const void* value, size_t size);
  std::string* mutable_sendname();
  std::string* release_sendname();
  void set_allocated_sendname(std::string* sendname);
  private:
  const std::string& _internal_sendname() const;
  void _internal_set_sendname(const std::string& value);
  std::string* _internal_mutable_sendname();
  public:

  // bytes message = 4;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const void* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 msgid = 1;
  void clear_msgid();
  ::PROTOBUF_NAMESPACE_ID::int32 msgid() const;
  void set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msgid() const;
  void _internal_set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:OfflineMessageProto.groupMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sendname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 msgid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offlinemessage_2eproto;
};
// -------------------------------------------------------------------

class addOfflineGroupMsgRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OfflineMessageProto.addOfflineGroupMsgRequest) */ {
 public:
  addOfflineGroupMsgRequest();
  virtual ~addOfflineGroupMsgRequest();

  addOfflineGroupMsgRequest(const addOfflineGroupMsgRequest& from);
  addOfflineGroupMsgRequest(addOfflineGroupMsgRequest&& from) noexcept
    : addOfflineGroupMsgRequest() {
    *this = ::std::move(from);
  }

  inline addOfflineGroupMsgRequest& operator=(const addOfflineGroupMsgRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline addOfflineGroupMsgRequest& operator=(addOfflineGroupMsgRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const addOfflineGroupMsgRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const addOfflineGroupMsgRequest* internal_default_instance() {
    return reinterpret_cast<const addOfflineGroupMsgRequest*>(
               &_addOfflineGroupMsgRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(addOfflineGroupMsgRequest& a, addOfflineGroupMsgRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(addOfflineGroupMsgRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline addOfflineGroupMsgRequest* New() const final {
    return CreateMaybeMessage<addOfflineGroupMsgRequest>(nullptr);
  }

  addOfflineGroupMsgRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<addOfflineGroupMsgRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const addOfflineGroupMsgRequest& from);
  void MergeFrom(const addOfflineGroupMsgRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addOfflineGroupMsgRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OfflineMessageProto.addOfflineGroupMsgRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offlinemessage_2eproto);
    return ::descriptor_table_offlinemessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOfflineGroupMsgFieldNumber = 1,
  };
  // .OfflineMessageProto.groupMsg OfflineGroupMsg = 1;
  bool has_offlinegroupmsg() const;
  private:
  bool _internal_has_offlinegroupmsg() const;
  public:
  void clear_offlinegroupmsg();
  const ::OfflineMessageProto::groupMsg& offlinegroupmsg() const;
  ::OfflineMessageProto::groupMsg* release_offlinegroupmsg();
  ::OfflineMessageProto::groupMsg* mutable_offlinegroupmsg();
  void set_allocated_offlinegroupmsg(::OfflineMessageProto::groupMsg* offlinegroupmsg);
  private:
  const ::OfflineMessageProto::groupMsg& _internal_offlinegroupmsg() const;
  ::OfflineMessageProto::groupMsg* _internal_mutable_offlinegroupmsg();
  public:

  // @@protoc_insertion_point(class_scope:OfflineMessageProto.addOfflineGroupMsgRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::OfflineMessageProto::groupMsg* offlinegroupmsg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offlinemessage_2eproto;
};
// -------------------------------------------------------------------

class addOfflineGroupMsgResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OfflineMessageProto.addOfflineGroupMsgResponse) */ {
 public:
  addOfflineGroupMsgResponse();
  virtual ~addOfflineGroupMsgResponse();

  addOfflineGroupMsgResponse(const addOfflineGroupMsgResponse& from);
  addOfflineGroupMsgResponse(addOfflineGroupMsgResponse&& from) noexcept
    : addOfflineGroupMsgResponse() {
    *this = ::std::move(from);
  }

  inline addOfflineGroupMsgResponse& operator=(const addOfflineGroupMsgResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline addOfflineGroupMsgResponse& operator=(addOfflineGroupMsgResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const addOfflineGroupMsgResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const addOfflineGroupMsgResponse* internal_default_instance() {
    return reinterpret_cast<const addOfflineGroupMsgResponse*>(
               &_addOfflineGroupMsgResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(addOfflineGroupMsgResponse& a, addOfflineGroupMsgResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(addOfflineGroupMsgResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline addOfflineGroupMsgResponse* New() const final {
    return CreateMaybeMessage<addOfflineGroupMsgResponse>(nullptr);
  }

  addOfflineGroupMsgResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<addOfflineGroupMsgResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const addOfflineGroupMsgResponse& from);
  void MergeFrom(const addOfflineGroupMsgResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addOfflineGroupMsgResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OfflineMessageProto.addOfflineGroupMsgResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offlinemessage_2eproto);
    return ::descriptor_table_offlinemessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // .OfflineMessageProto.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::OfflineMessageProto::ResultCode& result() const;
  ::OfflineMessageProto::ResultCode* release_result();
  ::OfflineMessageProto::ResultCode* mutable_result();
  void set_allocated_result(::OfflineMessageProto::ResultCode* result);
  private:
  const ::OfflineMessageProto::ResultCode& _internal_result() const;
  ::OfflineMessageProto::ResultCode* _internal_mutable_result();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:OfflineMessageProto.addOfflineGroupMsgResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::OfflineMessageProto::ResultCode* result_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offlinemessage_2eproto;
};
// -------------------------------------------------------------------

class delOfflineGroupMsgRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OfflineMessageProto.delOfflineGroupMsgRequest) */ {
 public:
  delOfflineGroupMsgRequest();
  virtual ~delOfflineGroupMsgRequest();

  delOfflineGroupMsgRequest(const delOfflineGroupMsgRequest& from);
  delOfflineGroupMsgRequest(delOfflineGroupMsgRequest&& from) noexcept
    : delOfflineGroupMsgRequest() {
    *this = ::std::move(from);
  }

  inline delOfflineGroupMsgRequest& operator=(const delOfflineGroupMsgRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline delOfflineGroupMsgRequest& operator=(delOfflineGroupMsgRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const delOfflineGroupMsgRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const delOfflineGroupMsgRequest* internal_default_instance() {
    return reinterpret_cast<const delOfflineGroupMsgRequest*>(
               &_delOfflineGroupMsgRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(delOfflineGroupMsgRequest& a, delOfflineGroupMsgRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(delOfflineGroupMsgRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline delOfflineGroupMsgRequest* New() const final {
    return CreateMaybeMessage<delOfflineGroupMsgRequest>(nullptr);
  }

  delOfflineGroupMsgRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<delOfflineGroupMsgRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const delOfflineGroupMsgRequest& from);
  void MergeFrom(const delOfflineGroupMsgRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(delOfflineGroupMsgRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OfflineMessageProto.delOfflineGroupMsgRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offlinemessage_2eproto);
    return ::descriptor_table_offlinemessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOfflineGroupMsgFieldNumber = 1,
  };
  // .OfflineMessageProto.groupMsg OfflineGroupMsg = 1;
  bool has_offlinegroupmsg() const;
  private:
  bool _internal_has_offlinegroupmsg() const;
  public:
  void clear_offlinegroupmsg();
  const ::OfflineMessageProto::groupMsg& offlinegroupmsg() const;
  ::OfflineMessageProto::groupMsg* release_offlinegroupmsg();
  ::OfflineMessageProto::groupMsg* mutable_offlinegroupmsg();
  void set_allocated_offlinegroupmsg(::OfflineMessageProto::groupMsg* offlinegroupmsg);
  private:
  const ::OfflineMessageProto::groupMsg& _internal_offlinegroupmsg() const;
  ::OfflineMessageProto::groupMsg* _internal_mutable_offlinegroupmsg();
  public:

  // @@protoc_insertion_point(class_scope:OfflineMessageProto.delOfflineGroupMsgRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::OfflineMessageProto::groupMsg* offlinegroupmsg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offlinemessage_2eproto;
};
// -------------------------------------------------------------------

class delOfflineGroupMsgResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OfflineMessageProto.delOfflineGroupMsgResponse) */ {
 public:
  delOfflineGroupMsgResponse();
  virtual ~delOfflineGroupMsgResponse();

  delOfflineGroupMsgResponse(const delOfflineGroupMsgResponse& from);
  delOfflineGroupMsgResponse(delOfflineGroupMsgResponse&& from) noexcept
    : delOfflineGroupMsgResponse() {
    *this = ::std::move(from);
  }

  inline delOfflineGroupMsgResponse& operator=(const delOfflineGroupMsgResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline delOfflineGroupMsgResponse& operator=(delOfflineGroupMsgResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const delOfflineGroupMsgResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const delOfflineGroupMsgResponse* internal_default_instance() {
    return reinterpret_cast<const delOfflineGroupMsgResponse*>(
               &_delOfflineGroupMsgResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(delOfflineGroupMsgResponse& a, delOfflineGroupMsgResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(delOfflineGroupMsgResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline delOfflineGroupMsgResponse* New() const final {
    return CreateMaybeMessage<delOfflineGroupMsgResponse>(nullptr);
  }

  delOfflineGroupMsgResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<delOfflineGroupMsgResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const delOfflineGroupMsgResponse& from);
  void MergeFrom(const delOfflineGroupMsgResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(delOfflineGroupMsgResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OfflineMessageProto.delOfflineGroupMsgResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offlinemessage_2eproto);
    return ::descriptor_table_offlinemessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // .OfflineMessageProto.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::OfflineMessageProto::ResultCode& result() const;
  ::OfflineMessageProto::ResultCode* release_result();
  ::OfflineMessageProto::ResultCode* mutable_result();
  void set_allocated_result(::OfflineMessageProto::ResultCode* result);
  private:
  const ::OfflineMessageProto::ResultCode& _internal_result() const;
  ::OfflineMessageProto::ResultCode* _internal_mutable_result();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:OfflineMessageProto.delOfflineGroupMsgResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::OfflineMessageProto::ResultCode* result_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offlinemessage_2eproto;
};
// -------------------------------------------------------------------

class queryOfflineGroupMsgRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OfflineMessageProto.queryOfflineGroupMsgRequest) */ {
 public:
  queryOfflineGroupMsgRequest();
  virtual ~queryOfflineGroupMsgRequest();

  queryOfflineGroupMsgRequest(const queryOfflineGroupMsgRequest& from);
  queryOfflineGroupMsgRequest(queryOfflineGroupMsgRequest&& from) noexcept
    : queryOfflineGroupMsgRequest() {
    *this = ::std::move(from);
  }

  inline queryOfflineGroupMsgRequest& operator=(const queryOfflineGroupMsgRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline queryOfflineGroupMsgRequest& operator=(queryOfflineGroupMsgRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const queryOfflineGroupMsgRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const queryOfflineGroupMsgRequest* internal_default_instance() {
    return reinterpret_cast<const queryOfflineGroupMsgRequest*>(
               &_queryOfflineGroupMsgRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(queryOfflineGroupMsgRequest& a, queryOfflineGroupMsgRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(queryOfflineGroupMsgRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline queryOfflineGroupMsgRequest* New() const final {
    return CreateMaybeMessage<queryOfflineGroupMsgRequest>(nullptr);
  }

  queryOfflineGroupMsgRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<queryOfflineGroupMsgRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const queryOfflineGroupMsgRequest& from);
  void MergeFrom(const queryOfflineGroupMsgRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(queryOfflineGroupMsgRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OfflineMessageProto.queryOfflineGroupMsgRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offlinemessage_2eproto);
    return ::descriptor_table_offlinemessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
  };
  // bytes username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const void* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // @@protoc_insertion_point(class_scope:OfflineMessageProto.queryOfflineGroupMsgRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offlinemessage_2eproto;
};
// -------------------------------------------------------------------

class queryOfflineGroupMsgResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OfflineMessageProto.queryOfflineGroupMsgResponse) */ {
 public:
  queryOfflineGroupMsgResponse();
  virtual ~queryOfflineGroupMsgResponse();

  queryOfflineGroupMsgResponse(const queryOfflineGroupMsgResponse& from);
  queryOfflineGroupMsgResponse(queryOfflineGroupMsgResponse&& from) noexcept
    : queryOfflineGroupMsgResponse() {
    *this = ::std::move(from);
  }

  inline queryOfflineGroupMsgResponse& operator=(const queryOfflineGroupMsgResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline queryOfflineGroupMsgResponse& operator=(queryOfflineGroupMsgResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const queryOfflineGroupMsgResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const queryOfflineGroupMsgResponse* internal_default_instance() {
    return reinterpret_cast<const queryOfflineGroupMsgResponse*>(
               &_queryOfflineGroupMsgResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(queryOfflineGroupMsgResponse& a, queryOfflineGroupMsgResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(queryOfflineGroupMsgResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline queryOfflineGroupMsgResponse* New() const final {
    return CreateMaybeMessage<queryOfflineGroupMsgResponse>(nullptr);
  }

  queryOfflineGroupMsgResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<queryOfflineGroupMsgResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const queryOfflineGroupMsgResponse& from);
  void MergeFrom(const queryOfflineGroupMsgResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(queryOfflineGroupMsgResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OfflineMessageProto.queryOfflineGroupMsgResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offlinemessage_2eproto);
    return ::descriptor_table_offlinemessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOfflineGroupMsgFieldNumber = 1,
    kResultFieldNumber = 2,
    kSuccessFieldNumber = 3,
  };
  // repeated .OfflineMessageProto.groupMsg OfflineGroupMsg = 1;
  int offlinegroupmsg_size() const;
  private:
  int _internal_offlinegroupmsg_size() const;
  public:
  void clear_offlinegroupmsg();
  ::OfflineMessageProto::groupMsg* mutable_offlinegroupmsg(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OfflineMessageProto::groupMsg >*
      mutable_offlinegroupmsg();
  private:
  const ::OfflineMessageProto::groupMsg& _internal_offlinegroupmsg(int index) const;
  ::OfflineMessageProto::groupMsg* _internal_add_offlinegroupmsg();
  public:
  const ::OfflineMessageProto::groupMsg& offlinegroupmsg(int index) const;
  ::OfflineMessageProto::groupMsg* add_offlinegroupmsg();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OfflineMessageProto::groupMsg >&
      offlinegroupmsg() const;

  // .OfflineMessageProto.ResultCode result = 2;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::OfflineMessageProto::ResultCode& result() const;
  ::OfflineMessageProto::ResultCode* release_result();
  ::OfflineMessageProto::ResultCode* mutable_result();
  void set_allocated_result(::OfflineMessageProto::ResultCode* result);
  private:
  const ::OfflineMessageProto::ResultCode& _internal_result() const;
  ::OfflineMessageProto::ResultCode* _internal_mutable_result();
  public:

  // bool success = 3;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:OfflineMessageProto.queryOfflineGroupMsgResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OfflineMessageProto::groupMsg > offlinegroupmsg_;
  ::OfflineMessageProto::ResultCode* result_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offlinemessage_2eproto;
};
// -------------------------------------------------------------------

class departMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OfflineMessageProto.departMsg) */ {
 public:
  departMsg();
  virtual ~departMsg();

  departMsg(const departMsg& from);
  departMsg(departMsg&& from) noexcept
    : departMsg() {
    *this = ::std::move(from);
  }

  inline departMsg& operator=(const departMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline departMsg& operator=(departMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const departMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const departMsg* internal_default_instance() {
    return reinterpret_cast<const departMsg*>(
               &_departMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(departMsg& a, departMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(departMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline departMsg* New() const final {
    return CreateMaybeMessage<departMsg>(nullptr);
  }

  departMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<departMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const departMsg& from);
  void MergeFrom(const departMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(departMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OfflineMessageProto.departMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offlinemessage_2eproto);
    return ::descriptor_table_offlinemessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDepartnameFieldNumber = 2,
    kSendnameFieldNumber = 3,
    kMessageFieldNumber = 4,
    kMsgidFieldNumber = 1,
  };
  // bytes departname = 2;
  void clear_departname();
  const std::string& departname() const;
  void set_departname(const std::string& value);
  void set_departname(std::string&& value);
  void set_departname(const char* value);
  void set_departname(const void* value, size_t size);
  std::string* mutable_departname();
  std::string* release_departname();
  void set_allocated_departname(std::string* departname);
  private:
  const std::string& _internal_departname() const;
  void _internal_set_departname(const std::string& value);
  std::string* _internal_mutable_departname();
  public:

  // bytes sendname = 3;
  void clear_sendname();
  const std::string& sendname() const;
  void set_sendname(const std::string& value);
  void set_sendname(std::string&& value);
  void set_sendname(const char* value);
  void set_sendname(const void* value, size_t size);
  std::string* mutable_sendname();
  std::string* release_sendname();
  void set_allocated_sendname(std::string* sendname);
  private:
  const std::string& _internal_sendname() const;
  void _internal_set_sendname(const std::string& value);
  std::string* _internal_mutable_sendname();
  public:

  // bytes message = 4;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const void* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 msgid = 1;
  void clear_msgid();
  ::PROTOBUF_NAMESPACE_ID::int32 msgid() const;
  void set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msgid() const;
  void _internal_set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:OfflineMessageProto.departMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr departname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sendname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 msgid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offlinemessage_2eproto;
};
// -------------------------------------------------------------------

class addOfflineDepartMsgRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OfflineMessageProto.addOfflineDepartMsgRequest) */ {
 public:
  addOfflineDepartMsgRequest();
  virtual ~addOfflineDepartMsgRequest();

  addOfflineDepartMsgRequest(const addOfflineDepartMsgRequest& from);
  addOfflineDepartMsgRequest(addOfflineDepartMsgRequest&& from) noexcept
    : addOfflineDepartMsgRequest() {
    *this = ::std::move(from);
  }

  inline addOfflineDepartMsgRequest& operator=(const addOfflineDepartMsgRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline addOfflineDepartMsgRequest& operator=(addOfflineDepartMsgRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const addOfflineDepartMsgRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const addOfflineDepartMsgRequest* internal_default_instance() {
    return reinterpret_cast<const addOfflineDepartMsgRequest*>(
               &_addOfflineDepartMsgRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(addOfflineDepartMsgRequest& a, addOfflineDepartMsgRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(addOfflineDepartMsgRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline addOfflineDepartMsgRequest* New() const final {
    return CreateMaybeMessage<addOfflineDepartMsgRequest>(nullptr);
  }

  addOfflineDepartMsgRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<addOfflineDepartMsgRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const addOfflineDepartMsgRequest& from);
  void MergeFrom(const addOfflineDepartMsgRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addOfflineDepartMsgRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OfflineMessageProto.addOfflineDepartMsgRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offlinemessage_2eproto);
    return ::descriptor_table_offlinemessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOfflineDepartMsgFieldNumber = 1,
  };
  // .OfflineMessageProto.departMsg OfflineDepartMsg = 1;
  bool has_offlinedepartmsg() const;
  private:
  bool _internal_has_offlinedepartmsg() const;
  public:
  void clear_offlinedepartmsg();
  const ::OfflineMessageProto::departMsg& offlinedepartmsg() const;
  ::OfflineMessageProto::departMsg* release_offlinedepartmsg();
  ::OfflineMessageProto::departMsg* mutable_offlinedepartmsg();
  void set_allocated_offlinedepartmsg(::OfflineMessageProto::departMsg* offlinedepartmsg);
  private:
  const ::OfflineMessageProto::departMsg& _internal_offlinedepartmsg() const;
  ::OfflineMessageProto::departMsg* _internal_mutable_offlinedepartmsg();
  public:

  // @@protoc_insertion_point(class_scope:OfflineMessageProto.addOfflineDepartMsgRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::OfflineMessageProto::departMsg* offlinedepartmsg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offlinemessage_2eproto;
};
// -------------------------------------------------------------------

class addOfflineDepartMsgResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OfflineMessageProto.addOfflineDepartMsgResponse) */ {
 public:
  addOfflineDepartMsgResponse();
  virtual ~addOfflineDepartMsgResponse();

  addOfflineDepartMsgResponse(const addOfflineDepartMsgResponse& from);
  addOfflineDepartMsgResponse(addOfflineDepartMsgResponse&& from) noexcept
    : addOfflineDepartMsgResponse() {
    *this = ::std::move(from);
  }

  inline addOfflineDepartMsgResponse& operator=(const addOfflineDepartMsgResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline addOfflineDepartMsgResponse& operator=(addOfflineDepartMsgResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const addOfflineDepartMsgResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const addOfflineDepartMsgResponse* internal_default_instance() {
    return reinterpret_cast<const addOfflineDepartMsgResponse*>(
               &_addOfflineDepartMsgResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(addOfflineDepartMsgResponse& a, addOfflineDepartMsgResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(addOfflineDepartMsgResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline addOfflineDepartMsgResponse* New() const final {
    return CreateMaybeMessage<addOfflineDepartMsgResponse>(nullptr);
  }

  addOfflineDepartMsgResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<addOfflineDepartMsgResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const addOfflineDepartMsgResponse& from);
  void MergeFrom(const addOfflineDepartMsgResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addOfflineDepartMsgResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OfflineMessageProto.addOfflineDepartMsgResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offlinemessage_2eproto);
    return ::descriptor_table_offlinemessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // .OfflineMessageProto.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::OfflineMessageProto::ResultCode& result() const;
  ::OfflineMessageProto::ResultCode* release_result();
  ::OfflineMessageProto::ResultCode* mutable_result();
  void set_allocated_result(::OfflineMessageProto::ResultCode* result);
  private:
  const ::OfflineMessageProto::ResultCode& _internal_result() const;
  ::OfflineMessageProto::ResultCode* _internal_mutable_result();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:OfflineMessageProto.addOfflineDepartMsgResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::OfflineMessageProto::ResultCode* result_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offlinemessage_2eproto;
};
// -------------------------------------------------------------------

class delOfflineDepartMsgRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OfflineMessageProto.delOfflineDepartMsgRequest) */ {
 public:
  delOfflineDepartMsgRequest();
  virtual ~delOfflineDepartMsgRequest();

  delOfflineDepartMsgRequest(const delOfflineDepartMsgRequest& from);
  delOfflineDepartMsgRequest(delOfflineDepartMsgRequest&& from) noexcept
    : delOfflineDepartMsgRequest() {
    *this = ::std::move(from);
  }

  inline delOfflineDepartMsgRequest& operator=(const delOfflineDepartMsgRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline delOfflineDepartMsgRequest& operator=(delOfflineDepartMsgRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const delOfflineDepartMsgRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const delOfflineDepartMsgRequest* internal_default_instance() {
    return reinterpret_cast<const delOfflineDepartMsgRequest*>(
               &_delOfflineDepartMsgRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(delOfflineDepartMsgRequest& a, delOfflineDepartMsgRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(delOfflineDepartMsgRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline delOfflineDepartMsgRequest* New() const final {
    return CreateMaybeMessage<delOfflineDepartMsgRequest>(nullptr);
  }

  delOfflineDepartMsgRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<delOfflineDepartMsgRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const delOfflineDepartMsgRequest& from);
  void MergeFrom(const delOfflineDepartMsgRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(delOfflineDepartMsgRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OfflineMessageProto.delOfflineDepartMsgRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offlinemessage_2eproto);
    return ::descriptor_table_offlinemessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOfflineDepartMsgFieldNumber = 1,
  };
  // .OfflineMessageProto.departMsg OfflineDepartMsg = 1;
  bool has_offlinedepartmsg() const;
  private:
  bool _internal_has_offlinedepartmsg() const;
  public:
  void clear_offlinedepartmsg();
  const ::OfflineMessageProto::departMsg& offlinedepartmsg() const;
  ::OfflineMessageProto::departMsg* release_offlinedepartmsg();
  ::OfflineMessageProto::departMsg* mutable_offlinedepartmsg();
  void set_allocated_offlinedepartmsg(::OfflineMessageProto::departMsg* offlinedepartmsg);
  private:
  const ::OfflineMessageProto::departMsg& _internal_offlinedepartmsg() const;
  ::OfflineMessageProto::departMsg* _internal_mutable_offlinedepartmsg();
  public:

  // @@protoc_insertion_point(class_scope:OfflineMessageProto.delOfflineDepartMsgRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::OfflineMessageProto::departMsg* offlinedepartmsg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offlinemessage_2eproto;
};
// -------------------------------------------------------------------

class delOfflineDepartMsgResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OfflineMessageProto.delOfflineDepartMsgResponse) */ {
 public:
  delOfflineDepartMsgResponse();
  virtual ~delOfflineDepartMsgResponse();

  delOfflineDepartMsgResponse(const delOfflineDepartMsgResponse& from);
  delOfflineDepartMsgResponse(delOfflineDepartMsgResponse&& from) noexcept
    : delOfflineDepartMsgResponse() {
    *this = ::std::move(from);
  }

  inline delOfflineDepartMsgResponse& operator=(const delOfflineDepartMsgResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline delOfflineDepartMsgResponse& operator=(delOfflineDepartMsgResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const delOfflineDepartMsgResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const delOfflineDepartMsgResponse* internal_default_instance() {
    return reinterpret_cast<const delOfflineDepartMsgResponse*>(
               &_delOfflineDepartMsgResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(delOfflineDepartMsgResponse& a, delOfflineDepartMsgResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(delOfflineDepartMsgResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline delOfflineDepartMsgResponse* New() const final {
    return CreateMaybeMessage<delOfflineDepartMsgResponse>(nullptr);
  }

  delOfflineDepartMsgResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<delOfflineDepartMsgResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const delOfflineDepartMsgResponse& from);
  void MergeFrom(const delOfflineDepartMsgResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(delOfflineDepartMsgResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OfflineMessageProto.delOfflineDepartMsgResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offlinemessage_2eproto);
    return ::descriptor_table_offlinemessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // .OfflineMessageProto.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::OfflineMessageProto::ResultCode& result() const;
  ::OfflineMessageProto::ResultCode* release_result();
  ::OfflineMessageProto::ResultCode* mutable_result();
  void set_allocated_result(::OfflineMessageProto::ResultCode* result);
  private:
  const ::OfflineMessageProto::ResultCode& _internal_result() const;
  ::OfflineMessageProto::ResultCode* _internal_mutable_result();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:OfflineMessageProto.delOfflineDepartMsgResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::OfflineMessageProto::ResultCode* result_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offlinemessage_2eproto;
};
// -------------------------------------------------------------------

class queryOfflineDepartMsgRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OfflineMessageProto.queryOfflineDepartMsgRequest) */ {
 public:
  queryOfflineDepartMsgRequest();
  virtual ~queryOfflineDepartMsgRequest();

  queryOfflineDepartMsgRequest(const queryOfflineDepartMsgRequest& from);
  queryOfflineDepartMsgRequest(queryOfflineDepartMsgRequest&& from) noexcept
    : queryOfflineDepartMsgRequest() {
    *this = ::std::move(from);
  }

  inline queryOfflineDepartMsgRequest& operator=(const queryOfflineDepartMsgRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline queryOfflineDepartMsgRequest& operator=(queryOfflineDepartMsgRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const queryOfflineDepartMsgRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const queryOfflineDepartMsgRequest* internal_default_instance() {
    return reinterpret_cast<const queryOfflineDepartMsgRequest*>(
               &_queryOfflineDepartMsgRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(queryOfflineDepartMsgRequest& a, queryOfflineDepartMsgRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(queryOfflineDepartMsgRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline queryOfflineDepartMsgRequest* New() const final {
    return CreateMaybeMessage<queryOfflineDepartMsgRequest>(nullptr);
  }

  queryOfflineDepartMsgRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<queryOfflineDepartMsgRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const queryOfflineDepartMsgRequest& from);
  void MergeFrom(const queryOfflineDepartMsgRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(queryOfflineDepartMsgRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OfflineMessageProto.queryOfflineDepartMsgRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offlinemessage_2eproto);
    return ::descriptor_table_offlinemessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
  };
  // bytes username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const void* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // @@protoc_insertion_point(class_scope:OfflineMessageProto.queryOfflineDepartMsgRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offlinemessage_2eproto;
};
// -------------------------------------------------------------------

class queryOfflineDepartMsgResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OfflineMessageProto.queryOfflineDepartMsgResponse) */ {
 public:
  queryOfflineDepartMsgResponse();
  virtual ~queryOfflineDepartMsgResponse();

  queryOfflineDepartMsgResponse(const queryOfflineDepartMsgResponse& from);
  queryOfflineDepartMsgResponse(queryOfflineDepartMsgResponse&& from) noexcept
    : queryOfflineDepartMsgResponse() {
    *this = ::std::move(from);
  }

  inline queryOfflineDepartMsgResponse& operator=(const queryOfflineDepartMsgResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline queryOfflineDepartMsgResponse& operator=(queryOfflineDepartMsgResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const queryOfflineDepartMsgResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const queryOfflineDepartMsgResponse* internal_default_instance() {
    return reinterpret_cast<const queryOfflineDepartMsgResponse*>(
               &_queryOfflineDepartMsgResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(queryOfflineDepartMsgResponse& a, queryOfflineDepartMsgResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(queryOfflineDepartMsgResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline queryOfflineDepartMsgResponse* New() const final {
    return CreateMaybeMessage<queryOfflineDepartMsgResponse>(nullptr);
  }

  queryOfflineDepartMsgResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<queryOfflineDepartMsgResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const queryOfflineDepartMsgResponse& from);
  void MergeFrom(const queryOfflineDepartMsgResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(queryOfflineDepartMsgResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OfflineMessageProto.queryOfflineDepartMsgResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_offlinemessage_2eproto);
    return ::descriptor_table_offlinemessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOfflineDepartMsgFieldNumber = 1,
    kResultFieldNumber = 2,
    kSuccessFieldNumber = 3,
  };
  // repeated .OfflineMessageProto.departMsg OfflineDepartMsg = 1;
  int offlinedepartmsg_size() const;
  private:
  int _internal_offlinedepartmsg_size() const;
  public:
  void clear_offlinedepartmsg();
  ::OfflineMessageProto::departMsg* mutable_offlinedepartmsg(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OfflineMessageProto::departMsg >*
      mutable_offlinedepartmsg();
  private:
  const ::OfflineMessageProto::departMsg& _internal_offlinedepartmsg(int index) const;
  ::OfflineMessageProto::departMsg* _internal_add_offlinedepartmsg();
  public:
  const ::OfflineMessageProto::departMsg& offlinedepartmsg(int index) const;
  ::OfflineMessageProto::departMsg* add_offlinedepartmsg();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OfflineMessageProto::departMsg >&
      offlinedepartmsg() const;

  // .OfflineMessageProto.ResultCode result = 2;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::OfflineMessageProto::ResultCode& result() const;
  ::OfflineMessageProto::ResultCode* release_result();
  ::OfflineMessageProto::ResultCode* mutable_result();
  void set_allocated_result(::OfflineMessageProto::ResultCode* result);
  private:
  const ::OfflineMessageProto::ResultCode& _internal_result() const;
  ::OfflineMessageProto::ResultCode* _internal_mutable_result();
  public:

  // bool success = 3;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:OfflineMessageProto.queryOfflineDepartMsgResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OfflineMessageProto::departMsg > offlinedepartmsg_;
  ::OfflineMessageProto::ResultCode* result_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_offlinemessage_2eproto;
};
// ===================================================================

class offlineMsgRpc_Stub;

class offlineMsgRpc : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline offlineMsgRpc() {};
 public:
  virtual ~offlineMsgRpc();

  typedef offlineMsgRpc_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void AddOfflineMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::OfflineMessageProto::addOfflineMsgRequest* request,
                       ::OfflineMessageProto::addOfflineMsgResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void DelOfflineMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::OfflineMessageProto::delOfflineMsgRequest* request,
                       ::OfflineMessageProto::delOfflineMsgResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void QueryOfflineMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::OfflineMessageProto::queryOfflineMsgRequest* request,
                       ::OfflineMessageProto::queryOfflineMsgResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void AddOfflineGroupMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::OfflineMessageProto::addOfflineGroupMsgRequest* request,
                       ::OfflineMessageProto::addOfflineGroupMsgResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void DelOfflineGroupMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::OfflineMessageProto::delOfflineGroupMsgRequest* request,
                       ::OfflineMessageProto::delOfflineGroupMsgResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void QueryOfflineGroupMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::OfflineMessageProto::queryOfflineGroupMsgRequest* request,
                       ::OfflineMessageProto::queryOfflineGroupMsgResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void AddOfflineDepartMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::OfflineMessageProto::addOfflineDepartMsgRequest* request,
                       ::OfflineMessageProto::addOfflineDepartMsgResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void DelOfflineDepartMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::OfflineMessageProto::delOfflineDepartMsgRequest* request,
                       ::OfflineMessageProto::delOfflineDepartMsgResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void QueryOfflineDepartMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::OfflineMessageProto::queryOfflineDepartMsgRequest* request,
                       ::OfflineMessageProto::queryOfflineDepartMsgResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(offlineMsgRpc);
};

class offlineMsgRpc_Stub : public offlineMsgRpc {
 public:
  offlineMsgRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  offlineMsgRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~offlineMsgRpc_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements offlineMsgRpc ------------------------------------------

  void AddOfflineMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::OfflineMessageProto::addOfflineMsgRequest* request,
                       ::OfflineMessageProto::addOfflineMsgResponse* response,
                       ::google::protobuf::Closure* done);
  void DelOfflineMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::OfflineMessageProto::delOfflineMsgRequest* request,
                       ::OfflineMessageProto::delOfflineMsgResponse* response,
                       ::google::protobuf::Closure* done);
  void QueryOfflineMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::OfflineMessageProto::queryOfflineMsgRequest* request,
                       ::OfflineMessageProto::queryOfflineMsgResponse* response,
                       ::google::protobuf::Closure* done);
  void AddOfflineGroupMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::OfflineMessageProto::addOfflineGroupMsgRequest* request,
                       ::OfflineMessageProto::addOfflineGroupMsgResponse* response,
                       ::google::protobuf::Closure* done);
  void DelOfflineGroupMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::OfflineMessageProto::delOfflineGroupMsgRequest* request,
                       ::OfflineMessageProto::delOfflineGroupMsgResponse* response,
                       ::google::protobuf::Closure* done);
  void QueryOfflineGroupMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::OfflineMessageProto::queryOfflineGroupMsgRequest* request,
                       ::OfflineMessageProto::queryOfflineGroupMsgResponse* response,
                       ::google::protobuf::Closure* done);
  void AddOfflineDepartMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::OfflineMessageProto::addOfflineDepartMsgRequest* request,
                       ::OfflineMessageProto::addOfflineDepartMsgResponse* response,
                       ::google::protobuf::Closure* done);
  void DelOfflineDepartMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::OfflineMessageProto::delOfflineDepartMsgRequest* request,
                       ::OfflineMessageProto::delOfflineDepartMsgResponse* response,
                       ::google::protobuf::Closure* done);
  void QueryOfflineDepartMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::OfflineMessageProto::queryOfflineDepartMsgRequest* request,
                       ::OfflineMessageProto::queryOfflineDepartMsgResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(offlineMsgRpc_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ResultCode

// int32 errcode = 1;
inline void ResultCode::clear_errcode() {
  errcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResultCode::_internal_errcode() const {
  return errcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResultCode::errcode() const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.ResultCode.errcode)
  return _internal_errcode();
}
inline void ResultCode::_internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errcode_ = value;
}
inline void ResultCode::set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:OfflineMessageProto.ResultCode.errcode)
}

// bytes errmsg = 2;
inline void ResultCode::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ResultCode::errmsg() const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.ResultCode.errmsg)
  return _internal_errmsg();
}
inline void ResultCode::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:OfflineMessageProto.ResultCode.errmsg)
}
inline std::string* ResultCode::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:OfflineMessageProto.ResultCode.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& ResultCode::_internal_errmsg() const {
  return errmsg_.GetNoArena();
}
inline void ResultCode::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ResultCode::set_errmsg(std::string&& value) {
  
  errmsg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OfflineMessageProto.ResultCode.errmsg)
}
inline void ResultCode::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OfflineMessageProto.ResultCode.errmsg)
}
inline void ResultCode::set_errmsg(const void* value, size_t size) {
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OfflineMessageProto.ResultCode.errmsg)
}
inline std::string* ResultCode::_internal_mutable_errmsg() {
  
  return errmsg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResultCode::release_errmsg() {
  // @@protoc_insertion_point(field_release:OfflineMessageProto.ResultCode.errmsg)
  
  return errmsg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResultCode::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:OfflineMessageProto.ResultCode.errmsg)
}

// -------------------------------------------------------------------

// msg

// int32 msgid = 1;
inline void msg::clear_msgid() {
  msgid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 msg::_internal_msgid() const {
  return msgid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 msg::msgid() const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.msg.msgid)
  return _internal_msgid();
}
inline void msg::_internal_set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msgid_ = value;
}
inline void msg::set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msgid(value);
  // @@protoc_insertion_point(field_set:OfflineMessageProto.msg.msgid)
}

// bytes recvname = 2;
inline void msg::clear_recvname() {
  recvname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& msg::recvname() const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.msg.recvname)
  return _internal_recvname();
}
inline void msg::set_recvname(const std::string& value) {
  _internal_set_recvname(value);
  // @@protoc_insertion_point(field_set:OfflineMessageProto.msg.recvname)
}
inline std::string* msg::mutable_recvname() {
  // @@protoc_insertion_point(field_mutable:OfflineMessageProto.msg.recvname)
  return _internal_mutable_recvname();
}
inline const std::string& msg::_internal_recvname() const {
  return recvname_.GetNoArena();
}
inline void msg::_internal_set_recvname(const std::string& value) {
  
  recvname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void msg::set_recvname(std::string&& value) {
  
  recvname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OfflineMessageProto.msg.recvname)
}
inline void msg::set_recvname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recvname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OfflineMessageProto.msg.recvname)
}
inline void msg::set_recvname(const void* value, size_t size) {
  
  recvname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OfflineMessageProto.msg.recvname)
}
inline std::string* msg::_internal_mutable_recvname() {
  
  return recvname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* msg::release_recvname() {
  // @@protoc_insertion_point(field_release:OfflineMessageProto.msg.recvname)
  
  return recvname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void msg::set_allocated_recvname(std::string* recvname) {
  if (recvname != nullptr) {
    
  } else {
    
  }
  recvname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recvname);
  // @@protoc_insertion_point(field_set_allocated:OfflineMessageProto.msg.recvname)
}

// bytes sendname = 3;
inline void msg::clear_sendname() {
  sendname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& msg::sendname() const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.msg.sendname)
  return _internal_sendname();
}
inline void msg::set_sendname(const std::string& value) {
  _internal_set_sendname(value);
  // @@protoc_insertion_point(field_set:OfflineMessageProto.msg.sendname)
}
inline std::string* msg::mutable_sendname() {
  // @@protoc_insertion_point(field_mutable:OfflineMessageProto.msg.sendname)
  return _internal_mutable_sendname();
}
inline const std::string& msg::_internal_sendname() const {
  return sendname_.GetNoArena();
}
inline void msg::_internal_set_sendname(const std::string& value) {
  
  sendname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void msg::set_sendname(std::string&& value) {
  
  sendname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OfflineMessageProto.msg.sendname)
}
inline void msg::set_sendname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sendname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OfflineMessageProto.msg.sendname)
}
inline void msg::set_sendname(const void* value, size_t size) {
  
  sendname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OfflineMessageProto.msg.sendname)
}
inline std::string* msg::_internal_mutable_sendname() {
  
  return sendname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* msg::release_sendname() {
  // @@protoc_insertion_point(field_release:OfflineMessageProto.msg.sendname)
  
  return sendname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void msg::set_allocated_sendname(std::string* sendname) {
  if (sendname != nullptr) {
    
  } else {
    
  }
  sendname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sendname);
  // @@protoc_insertion_point(field_set_allocated:OfflineMessageProto.msg.sendname)
}

// bytes message = 4;
inline void msg::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& msg::message() const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.msg.message)
  return _internal_message();
}
inline void msg::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:OfflineMessageProto.msg.message)
}
inline std::string* msg::mutable_message() {
  // @@protoc_insertion_point(field_mutable:OfflineMessageProto.msg.message)
  return _internal_mutable_message();
}
inline const std::string& msg::_internal_message() const {
  return message_.GetNoArena();
}
inline void msg::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void msg::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OfflineMessageProto.msg.message)
}
inline void msg::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OfflineMessageProto.msg.message)
}
inline void msg::set_message(const void* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OfflineMessageProto.msg.message)
}
inline std::string* msg::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* msg::release_message() {
  // @@protoc_insertion_point(field_release:OfflineMessageProto.msg.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void msg::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:OfflineMessageProto.msg.message)
}

// -------------------------------------------------------------------

// addOfflineMsgRequest

// .OfflineMessageProto.msg OfflineMsg = 1;
inline bool addOfflineMsgRequest::_internal_has_offlinemsg() const {
  return this != internal_default_instance() && offlinemsg_ != nullptr;
}
inline bool addOfflineMsgRequest::has_offlinemsg() const {
  return _internal_has_offlinemsg();
}
inline void addOfflineMsgRequest::clear_offlinemsg() {
  if (GetArenaNoVirtual() == nullptr && offlinemsg_ != nullptr) {
    delete offlinemsg_;
  }
  offlinemsg_ = nullptr;
}
inline const ::OfflineMessageProto::msg& addOfflineMsgRequest::_internal_offlinemsg() const {
  const ::OfflineMessageProto::msg* p = offlinemsg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OfflineMessageProto::msg*>(
      &::OfflineMessageProto::_msg_default_instance_);
}
inline const ::OfflineMessageProto::msg& addOfflineMsgRequest::offlinemsg() const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.addOfflineMsgRequest.OfflineMsg)
  return _internal_offlinemsg();
}
inline ::OfflineMessageProto::msg* addOfflineMsgRequest::release_offlinemsg() {
  // @@protoc_insertion_point(field_release:OfflineMessageProto.addOfflineMsgRequest.OfflineMsg)
  
  ::OfflineMessageProto::msg* temp = offlinemsg_;
  offlinemsg_ = nullptr;
  return temp;
}
inline ::OfflineMessageProto::msg* addOfflineMsgRequest::_internal_mutable_offlinemsg() {
  
  if (offlinemsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::OfflineMessageProto::msg>(GetArenaNoVirtual());
    offlinemsg_ = p;
  }
  return offlinemsg_;
}
inline ::OfflineMessageProto::msg* addOfflineMsgRequest::mutable_offlinemsg() {
  // @@protoc_insertion_point(field_mutable:OfflineMessageProto.addOfflineMsgRequest.OfflineMsg)
  return _internal_mutable_offlinemsg();
}
inline void addOfflineMsgRequest::set_allocated_offlinemsg(::OfflineMessageProto::msg* offlinemsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete offlinemsg_;
  }
  if (offlinemsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      offlinemsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offlinemsg, submessage_arena);
    }
    
  } else {
    
  }
  offlinemsg_ = offlinemsg;
  // @@protoc_insertion_point(field_set_allocated:OfflineMessageProto.addOfflineMsgRequest.OfflineMsg)
}

// -------------------------------------------------------------------

// addOfflineMsgResponse

// .OfflineMessageProto.ResultCode result = 1;
inline bool addOfflineMsgResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool addOfflineMsgResponse::has_result() const {
  return _internal_has_result();
}
inline void addOfflineMsgResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::OfflineMessageProto::ResultCode& addOfflineMsgResponse::_internal_result() const {
  const ::OfflineMessageProto::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OfflineMessageProto::ResultCode*>(
      &::OfflineMessageProto::_ResultCode_default_instance_);
}
inline const ::OfflineMessageProto::ResultCode& addOfflineMsgResponse::result() const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.addOfflineMsgResponse.result)
  return _internal_result();
}
inline ::OfflineMessageProto::ResultCode* addOfflineMsgResponse::release_result() {
  // @@protoc_insertion_point(field_release:OfflineMessageProto.addOfflineMsgResponse.result)
  
  ::OfflineMessageProto::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::OfflineMessageProto::ResultCode* addOfflineMsgResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::OfflineMessageProto::ResultCode>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::OfflineMessageProto::ResultCode* addOfflineMsgResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:OfflineMessageProto.addOfflineMsgResponse.result)
  return _internal_mutable_result();
}
inline void addOfflineMsgResponse::set_allocated_result(::OfflineMessageProto::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:OfflineMessageProto.addOfflineMsgResponse.result)
}

// bool success = 2;
inline void addOfflineMsgResponse::clear_success() {
  success_ = false;
}
inline bool addOfflineMsgResponse::_internal_success() const {
  return success_;
}
inline bool addOfflineMsgResponse::success() const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.addOfflineMsgResponse.success)
  return _internal_success();
}
inline void addOfflineMsgResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void addOfflineMsgResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:OfflineMessageProto.addOfflineMsgResponse.success)
}

// -------------------------------------------------------------------

// delOfflineMsgRequest

// .OfflineMessageProto.msg OfflineMsg = 1;
inline bool delOfflineMsgRequest::_internal_has_offlinemsg() const {
  return this != internal_default_instance() && offlinemsg_ != nullptr;
}
inline bool delOfflineMsgRequest::has_offlinemsg() const {
  return _internal_has_offlinemsg();
}
inline void delOfflineMsgRequest::clear_offlinemsg() {
  if (GetArenaNoVirtual() == nullptr && offlinemsg_ != nullptr) {
    delete offlinemsg_;
  }
  offlinemsg_ = nullptr;
}
inline const ::OfflineMessageProto::msg& delOfflineMsgRequest::_internal_offlinemsg() const {
  const ::OfflineMessageProto::msg* p = offlinemsg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OfflineMessageProto::msg*>(
      &::OfflineMessageProto::_msg_default_instance_);
}
inline const ::OfflineMessageProto::msg& delOfflineMsgRequest::offlinemsg() const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.delOfflineMsgRequest.OfflineMsg)
  return _internal_offlinemsg();
}
inline ::OfflineMessageProto::msg* delOfflineMsgRequest::release_offlinemsg() {
  // @@protoc_insertion_point(field_release:OfflineMessageProto.delOfflineMsgRequest.OfflineMsg)
  
  ::OfflineMessageProto::msg* temp = offlinemsg_;
  offlinemsg_ = nullptr;
  return temp;
}
inline ::OfflineMessageProto::msg* delOfflineMsgRequest::_internal_mutable_offlinemsg() {
  
  if (offlinemsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::OfflineMessageProto::msg>(GetArenaNoVirtual());
    offlinemsg_ = p;
  }
  return offlinemsg_;
}
inline ::OfflineMessageProto::msg* delOfflineMsgRequest::mutable_offlinemsg() {
  // @@protoc_insertion_point(field_mutable:OfflineMessageProto.delOfflineMsgRequest.OfflineMsg)
  return _internal_mutable_offlinemsg();
}
inline void delOfflineMsgRequest::set_allocated_offlinemsg(::OfflineMessageProto::msg* offlinemsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete offlinemsg_;
  }
  if (offlinemsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      offlinemsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offlinemsg, submessage_arena);
    }
    
  } else {
    
  }
  offlinemsg_ = offlinemsg;
  // @@protoc_insertion_point(field_set_allocated:OfflineMessageProto.delOfflineMsgRequest.OfflineMsg)
}

// -------------------------------------------------------------------

// delOfflineMsgResponse

// .OfflineMessageProto.ResultCode result = 1;
inline bool delOfflineMsgResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool delOfflineMsgResponse::has_result() const {
  return _internal_has_result();
}
inline void delOfflineMsgResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::OfflineMessageProto::ResultCode& delOfflineMsgResponse::_internal_result() const {
  const ::OfflineMessageProto::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OfflineMessageProto::ResultCode*>(
      &::OfflineMessageProto::_ResultCode_default_instance_);
}
inline const ::OfflineMessageProto::ResultCode& delOfflineMsgResponse::result() const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.delOfflineMsgResponse.result)
  return _internal_result();
}
inline ::OfflineMessageProto::ResultCode* delOfflineMsgResponse::release_result() {
  // @@protoc_insertion_point(field_release:OfflineMessageProto.delOfflineMsgResponse.result)
  
  ::OfflineMessageProto::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::OfflineMessageProto::ResultCode* delOfflineMsgResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::OfflineMessageProto::ResultCode>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::OfflineMessageProto::ResultCode* delOfflineMsgResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:OfflineMessageProto.delOfflineMsgResponse.result)
  return _internal_mutable_result();
}
inline void delOfflineMsgResponse::set_allocated_result(::OfflineMessageProto::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:OfflineMessageProto.delOfflineMsgResponse.result)
}

// bool success = 2;
inline void delOfflineMsgResponse::clear_success() {
  success_ = false;
}
inline bool delOfflineMsgResponse::_internal_success() const {
  return success_;
}
inline bool delOfflineMsgResponse::success() const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.delOfflineMsgResponse.success)
  return _internal_success();
}
inline void delOfflineMsgResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void delOfflineMsgResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:OfflineMessageProto.delOfflineMsgResponse.success)
}

// -------------------------------------------------------------------

// queryOfflineMsgRequest

// bytes recvname = 1;
inline void queryOfflineMsgRequest::clear_recvname() {
  recvname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& queryOfflineMsgRequest::recvname() const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.queryOfflineMsgRequest.recvname)
  return _internal_recvname();
}
inline void queryOfflineMsgRequest::set_recvname(const std::string& value) {
  _internal_set_recvname(value);
  // @@protoc_insertion_point(field_set:OfflineMessageProto.queryOfflineMsgRequest.recvname)
}
inline std::string* queryOfflineMsgRequest::mutable_recvname() {
  // @@protoc_insertion_point(field_mutable:OfflineMessageProto.queryOfflineMsgRequest.recvname)
  return _internal_mutable_recvname();
}
inline const std::string& queryOfflineMsgRequest::_internal_recvname() const {
  return recvname_.GetNoArena();
}
inline void queryOfflineMsgRequest::_internal_set_recvname(const std::string& value) {
  
  recvname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void queryOfflineMsgRequest::set_recvname(std::string&& value) {
  
  recvname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OfflineMessageProto.queryOfflineMsgRequest.recvname)
}
inline void queryOfflineMsgRequest::set_recvname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recvname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OfflineMessageProto.queryOfflineMsgRequest.recvname)
}
inline void queryOfflineMsgRequest::set_recvname(const void* value, size_t size) {
  
  recvname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OfflineMessageProto.queryOfflineMsgRequest.recvname)
}
inline std::string* queryOfflineMsgRequest::_internal_mutable_recvname() {
  
  return recvname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* queryOfflineMsgRequest::release_recvname() {
  // @@protoc_insertion_point(field_release:OfflineMessageProto.queryOfflineMsgRequest.recvname)
  
  return recvname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void queryOfflineMsgRequest::set_allocated_recvname(std::string* recvname) {
  if (recvname != nullptr) {
    
  } else {
    
  }
  recvname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recvname);
  // @@protoc_insertion_point(field_set_allocated:OfflineMessageProto.queryOfflineMsgRequest.recvname)
}

// -------------------------------------------------------------------

// queryOfflineMsgResponse

// repeated .OfflineMessageProto.msg OfflineMsg = 1;
inline int queryOfflineMsgResponse::_internal_offlinemsg_size() const {
  return offlinemsg_.size();
}
inline int queryOfflineMsgResponse::offlinemsg_size() const {
  return _internal_offlinemsg_size();
}
inline void queryOfflineMsgResponse::clear_offlinemsg() {
  offlinemsg_.Clear();
}
inline ::OfflineMessageProto::msg* queryOfflineMsgResponse::mutable_offlinemsg(int index) {
  // @@protoc_insertion_point(field_mutable:OfflineMessageProto.queryOfflineMsgResponse.OfflineMsg)
  return offlinemsg_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OfflineMessageProto::msg >*
queryOfflineMsgResponse::mutable_offlinemsg() {
  // @@protoc_insertion_point(field_mutable_list:OfflineMessageProto.queryOfflineMsgResponse.OfflineMsg)
  return &offlinemsg_;
}
inline const ::OfflineMessageProto::msg& queryOfflineMsgResponse::_internal_offlinemsg(int index) const {
  return offlinemsg_.Get(index);
}
inline const ::OfflineMessageProto::msg& queryOfflineMsgResponse::offlinemsg(int index) const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.queryOfflineMsgResponse.OfflineMsg)
  return _internal_offlinemsg(index);
}
inline ::OfflineMessageProto::msg* queryOfflineMsgResponse::_internal_add_offlinemsg() {
  return offlinemsg_.Add();
}
inline ::OfflineMessageProto::msg* queryOfflineMsgResponse::add_offlinemsg() {
  // @@protoc_insertion_point(field_add:OfflineMessageProto.queryOfflineMsgResponse.OfflineMsg)
  return _internal_add_offlinemsg();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OfflineMessageProto::msg >&
queryOfflineMsgResponse::offlinemsg() const {
  // @@protoc_insertion_point(field_list:OfflineMessageProto.queryOfflineMsgResponse.OfflineMsg)
  return offlinemsg_;
}

// .OfflineMessageProto.ResultCode result = 2;
inline bool queryOfflineMsgResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool queryOfflineMsgResponse::has_result() const {
  return _internal_has_result();
}
inline void queryOfflineMsgResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::OfflineMessageProto::ResultCode& queryOfflineMsgResponse::_internal_result() const {
  const ::OfflineMessageProto::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OfflineMessageProto::ResultCode*>(
      &::OfflineMessageProto::_ResultCode_default_instance_);
}
inline const ::OfflineMessageProto::ResultCode& queryOfflineMsgResponse::result() const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.queryOfflineMsgResponse.result)
  return _internal_result();
}
inline ::OfflineMessageProto::ResultCode* queryOfflineMsgResponse::release_result() {
  // @@protoc_insertion_point(field_release:OfflineMessageProto.queryOfflineMsgResponse.result)
  
  ::OfflineMessageProto::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::OfflineMessageProto::ResultCode* queryOfflineMsgResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::OfflineMessageProto::ResultCode>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::OfflineMessageProto::ResultCode* queryOfflineMsgResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:OfflineMessageProto.queryOfflineMsgResponse.result)
  return _internal_mutable_result();
}
inline void queryOfflineMsgResponse::set_allocated_result(::OfflineMessageProto::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:OfflineMessageProto.queryOfflineMsgResponse.result)
}

// bool success = 3;
inline void queryOfflineMsgResponse::clear_success() {
  success_ = false;
}
inline bool queryOfflineMsgResponse::_internal_success() const {
  return success_;
}
inline bool queryOfflineMsgResponse::success() const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.queryOfflineMsgResponse.success)
  return _internal_success();
}
inline void queryOfflineMsgResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void queryOfflineMsgResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:OfflineMessageProto.queryOfflineMsgResponse.success)
}

// -------------------------------------------------------------------

// groupMsg

// int32 msgid = 1;
inline void groupMsg::clear_msgid() {
  msgid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 groupMsg::_internal_msgid() const {
  return msgid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 groupMsg::msgid() const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.groupMsg.msgid)
  return _internal_msgid();
}
inline void groupMsg::_internal_set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msgid_ = value;
}
inline void groupMsg::set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msgid(value);
  // @@protoc_insertion_point(field_set:OfflineMessageProto.groupMsg.msgid)
}

// bytes groupname = 2;
inline void groupMsg::clear_groupname() {
  groupname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& groupMsg::groupname() const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.groupMsg.groupname)
  return _internal_groupname();
}
inline void groupMsg::set_groupname(const std::string& value) {
  _internal_set_groupname(value);
  // @@protoc_insertion_point(field_set:OfflineMessageProto.groupMsg.groupname)
}
inline std::string* groupMsg::mutable_groupname() {
  // @@protoc_insertion_point(field_mutable:OfflineMessageProto.groupMsg.groupname)
  return _internal_mutable_groupname();
}
inline const std::string& groupMsg::_internal_groupname() const {
  return groupname_.GetNoArena();
}
inline void groupMsg::_internal_set_groupname(const std::string& value) {
  
  groupname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void groupMsg::set_groupname(std::string&& value) {
  
  groupname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OfflineMessageProto.groupMsg.groupname)
}
inline void groupMsg::set_groupname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OfflineMessageProto.groupMsg.groupname)
}
inline void groupMsg::set_groupname(const void* value, size_t size) {
  
  groupname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OfflineMessageProto.groupMsg.groupname)
}
inline std::string* groupMsg::_internal_mutable_groupname() {
  
  return groupname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* groupMsg::release_groupname() {
  // @@protoc_insertion_point(field_release:OfflineMessageProto.groupMsg.groupname)
  
  return groupname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void groupMsg::set_allocated_groupname(std::string* groupname) {
  if (groupname != nullptr) {
    
  } else {
    
  }
  groupname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupname);
  // @@protoc_insertion_point(field_set_allocated:OfflineMessageProto.groupMsg.groupname)
}

// bytes sendname = 3;
inline void groupMsg::clear_sendname() {
  sendname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& groupMsg::sendname() const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.groupMsg.sendname)
  return _internal_sendname();
}
inline void groupMsg::set_sendname(const std::string& value) {
  _internal_set_sendname(value);
  // @@protoc_insertion_point(field_set:OfflineMessageProto.groupMsg.sendname)
}
inline std::string* groupMsg::mutable_sendname() {
  // @@protoc_insertion_point(field_mutable:OfflineMessageProto.groupMsg.sendname)
  return _internal_mutable_sendname();
}
inline const std::string& groupMsg::_internal_sendname() const {
  return sendname_.GetNoArena();
}
inline void groupMsg::_internal_set_sendname(const std::string& value) {
  
  sendname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void groupMsg::set_sendname(std::string&& value) {
  
  sendname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OfflineMessageProto.groupMsg.sendname)
}
inline void groupMsg::set_sendname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sendname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OfflineMessageProto.groupMsg.sendname)
}
inline void groupMsg::set_sendname(const void* value, size_t size) {
  
  sendname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OfflineMessageProto.groupMsg.sendname)
}
inline std::string* groupMsg::_internal_mutable_sendname() {
  
  return sendname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* groupMsg::release_sendname() {
  // @@protoc_insertion_point(field_release:OfflineMessageProto.groupMsg.sendname)
  
  return sendname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void groupMsg::set_allocated_sendname(std::string* sendname) {
  if (sendname != nullptr) {
    
  } else {
    
  }
  sendname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sendname);
  // @@protoc_insertion_point(field_set_allocated:OfflineMessageProto.groupMsg.sendname)
}

// bytes message = 4;
inline void groupMsg::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& groupMsg::message() const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.groupMsg.message)
  return _internal_message();
}
inline void groupMsg::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:OfflineMessageProto.groupMsg.message)
}
inline std::string* groupMsg::mutable_message() {
  // @@protoc_insertion_point(field_mutable:OfflineMessageProto.groupMsg.message)
  return _internal_mutable_message();
}
inline const std::string& groupMsg::_internal_message() const {
  return message_.GetNoArena();
}
inline void groupMsg::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void groupMsg::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OfflineMessageProto.groupMsg.message)
}
inline void groupMsg::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OfflineMessageProto.groupMsg.message)
}
inline void groupMsg::set_message(const void* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OfflineMessageProto.groupMsg.message)
}
inline std::string* groupMsg::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* groupMsg::release_message() {
  // @@protoc_insertion_point(field_release:OfflineMessageProto.groupMsg.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void groupMsg::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:OfflineMessageProto.groupMsg.message)
}

// -------------------------------------------------------------------

// addOfflineGroupMsgRequest

// .OfflineMessageProto.groupMsg OfflineGroupMsg = 1;
inline bool addOfflineGroupMsgRequest::_internal_has_offlinegroupmsg() const {
  return this != internal_default_instance() && offlinegroupmsg_ != nullptr;
}
inline bool addOfflineGroupMsgRequest::has_offlinegroupmsg() const {
  return _internal_has_offlinegroupmsg();
}
inline void addOfflineGroupMsgRequest::clear_offlinegroupmsg() {
  if (GetArenaNoVirtual() == nullptr && offlinegroupmsg_ != nullptr) {
    delete offlinegroupmsg_;
  }
  offlinegroupmsg_ = nullptr;
}
inline const ::OfflineMessageProto::groupMsg& addOfflineGroupMsgRequest::_internal_offlinegroupmsg() const {
  const ::OfflineMessageProto::groupMsg* p = offlinegroupmsg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OfflineMessageProto::groupMsg*>(
      &::OfflineMessageProto::_groupMsg_default_instance_);
}
inline const ::OfflineMessageProto::groupMsg& addOfflineGroupMsgRequest::offlinegroupmsg() const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.addOfflineGroupMsgRequest.OfflineGroupMsg)
  return _internal_offlinegroupmsg();
}
inline ::OfflineMessageProto::groupMsg* addOfflineGroupMsgRequest::release_offlinegroupmsg() {
  // @@protoc_insertion_point(field_release:OfflineMessageProto.addOfflineGroupMsgRequest.OfflineGroupMsg)
  
  ::OfflineMessageProto::groupMsg* temp = offlinegroupmsg_;
  offlinegroupmsg_ = nullptr;
  return temp;
}
inline ::OfflineMessageProto::groupMsg* addOfflineGroupMsgRequest::_internal_mutable_offlinegroupmsg() {
  
  if (offlinegroupmsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::OfflineMessageProto::groupMsg>(GetArenaNoVirtual());
    offlinegroupmsg_ = p;
  }
  return offlinegroupmsg_;
}
inline ::OfflineMessageProto::groupMsg* addOfflineGroupMsgRequest::mutable_offlinegroupmsg() {
  // @@protoc_insertion_point(field_mutable:OfflineMessageProto.addOfflineGroupMsgRequest.OfflineGroupMsg)
  return _internal_mutable_offlinegroupmsg();
}
inline void addOfflineGroupMsgRequest::set_allocated_offlinegroupmsg(::OfflineMessageProto::groupMsg* offlinegroupmsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete offlinegroupmsg_;
  }
  if (offlinegroupmsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      offlinegroupmsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offlinegroupmsg, submessage_arena);
    }
    
  } else {
    
  }
  offlinegroupmsg_ = offlinegroupmsg;
  // @@protoc_insertion_point(field_set_allocated:OfflineMessageProto.addOfflineGroupMsgRequest.OfflineGroupMsg)
}

// -------------------------------------------------------------------

// addOfflineGroupMsgResponse

// .OfflineMessageProto.ResultCode result = 1;
inline bool addOfflineGroupMsgResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool addOfflineGroupMsgResponse::has_result() const {
  return _internal_has_result();
}
inline void addOfflineGroupMsgResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::OfflineMessageProto::ResultCode& addOfflineGroupMsgResponse::_internal_result() const {
  const ::OfflineMessageProto::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OfflineMessageProto::ResultCode*>(
      &::OfflineMessageProto::_ResultCode_default_instance_);
}
inline const ::OfflineMessageProto::ResultCode& addOfflineGroupMsgResponse::result() const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.addOfflineGroupMsgResponse.result)
  return _internal_result();
}
inline ::OfflineMessageProto::ResultCode* addOfflineGroupMsgResponse::release_result() {
  // @@protoc_insertion_point(field_release:OfflineMessageProto.addOfflineGroupMsgResponse.result)
  
  ::OfflineMessageProto::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::OfflineMessageProto::ResultCode* addOfflineGroupMsgResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::OfflineMessageProto::ResultCode>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::OfflineMessageProto::ResultCode* addOfflineGroupMsgResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:OfflineMessageProto.addOfflineGroupMsgResponse.result)
  return _internal_mutable_result();
}
inline void addOfflineGroupMsgResponse::set_allocated_result(::OfflineMessageProto::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:OfflineMessageProto.addOfflineGroupMsgResponse.result)
}

// bool success = 2;
inline void addOfflineGroupMsgResponse::clear_success() {
  success_ = false;
}
inline bool addOfflineGroupMsgResponse::_internal_success() const {
  return success_;
}
inline bool addOfflineGroupMsgResponse::success() const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.addOfflineGroupMsgResponse.success)
  return _internal_success();
}
inline void addOfflineGroupMsgResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void addOfflineGroupMsgResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:OfflineMessageProto.addOfflineGroupMsgResponse.success)
}

// -------------------------------------------------------------------

// delOfflineGroupMsgRequest

// .OfflineMessageProto.groupMsg OfflineGroupMsg = 1;
inline bool delOfflineGroupMsgRequest::_internal_has_offlinegroupmsg() const {
  return this != internal_default_instance() && offlinegroupmsg_ != nullptr;
}
inline bool delOfflineGroupMsgRequest::has_offlinegroupmsg() const {
  return _internal_has_offlinegroupmsg();
}
inline void delOfflineGroupMsgRequest::clear_offlinegroupmsg() {
  if (GetArenaNoVirtual() == nullptr && offlinegroupmsg_ != nullptr) {
    delete offlinegroupmsg_;
  }
  offlinegroupmsg_ = nullptr;
}
inline const ::OfflineMessageProto::groupMsg& delOfflineGroupMsgRequest::_internal_offlinegroupmsg() const {
  const ::OfflineMessageProto::groupMsg* p = offlinegroupmsg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OfflineMessageProto::groupMsg*>(
      &::OfflineMessageProto::_groupMsg_default_instance_);
}
inline const ::OfflineMessageProto::groupMsg& delOfflineGroupMsgRequest::offlinegroupmsg() const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.delOfflineGroupMsgRequest.OfflineGroupMsg)
  return _internal_offlinegroupmsg();
}
inline ::OfflineMessageProto::groupMsg* delOfflineGroupMsgRequest::release_offlinegroupmsg() {
  // @@protoc_insertion_point(field_release:OfflineMessageProto.delOfflineGroupMsgRequest.OfflineGroupMsg)
  
  ::OfflineMessageProto::groupMsg* temp = offlinegroupmsg_;
  offlinegroupmsg_ = nullptr;
  return temp;
}
inline ::OfflineMessageProto::groupMsg* delOfflineGroupMsgRequest::_internal_mutable_offlinegroupmsg() {
  
  if (offlinegroupmsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::OfflineMessageProto::groupMsg>(GetArenaNoVirtual());
    offlinegroupmsg_ = p;
  }
  return offlinegroupmsg_;
}
inline ::OfflineMessageProto::groupMsg* delOfflineGroupMsgRequest::mutable_offlinegroupmsg() {
  // @@protoc_insertion_point(field_mutable:OfflineMessageProto.delOfflineGroupMsgRequest.OfflineGroupMsg)
  return _internal_mutable_offlinegroupmsg();
}
inline void delOfflineGroupMsgRequest::set_allocated_offlinegroupmsg(::OfflineMessageProto::groupMsg* offlinegroupmsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete offlinegroupmsg_;
  }
  if (offlinegroupmsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      offlinegroupmsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offlinegroupmsg, submessage_arena);
    }
    
  } else {
    
  }
  offlinegroupmsg_ = offlinegroupmsg;
  // @@protoc_insertion_point(field_set_allocated:OfflineMessageProto.delOfflineGroupMsgRequest.OfflineGroupMsg)
}

// -------------------------------------------------------------------

// delOfflineGroupMsgResponse

// .OfflineMessageProto.ResultCode result = 1;
inline bool delOfflineGroupMsgResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool delOfflineGroupMsgResponse::has_result() const {
  return _internal_has_result();
}
inline void delOfflineGroupMsgResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::OfflineMessageProto::ResultCode& delOfflineGroupMsgResponse::_internal_result() const {
  const ::OfflineMessageProto::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OfflineMessageProto::ResultCode*>(
      &::OfflineMessageProto::_ResultCode_default_instance_);
}
inline const ::OfflineMessageProto::ResultCode& delOfflineGroupMsgResponse::result() const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.delOfflineGroupMsgResponse.result)
  return _internal_result();
}
inline ::OfflineMessageProto::ResultCode* delOfflineGroupMsgResponse::release_result() {
  // @@protoc_insertion_point(field_release:OfflineMessageProto.delOfflineGroupMsgResponse.result)
  
  ::OfflineMessageProto::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::OfflineMessageProto::ResultCode* delOfflineGroupMsgResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::OfflineMessageProto::ResultCode>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::OfflineMessageProto::ResultCode* delOfflineGroupMsgResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:OfflineMessageProto.delOfflineGroupMsgResponse.result)
  return _internal_mutable_result();
}
inline void delOfflineGroupMsgResponse::set_allocated_result(::OfflineMessageProto::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:OfflineMessageProto.delOfflineGroupMsgResponse.result)
}

// bool success = 2;
inline void delOfflineGroupMsgResponse::clear_success() {
  success_ = false;
}
inline bool delOfflineGroupMsgResponse::_internal_success() const {
  return success_;
}
inline bool delOfflineGroupMsgResponse::success() const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.delOfflineGroupMsgResponse.success)
  return _internal_success();
}
inline void delOfflineGroupMsgResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void delOfflineGroupMsgResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:OfflineMessageProto.delOfflineGroupMsgResponse.success)
}

// -------------------------------------------------------------------

// queryOfflineGroupMsgRequest

// bytes username = 1;
inline void queryOfflineGroupMsgRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& queryOfflineGroupMsgRequest::username() const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.queryOfflineGroupMsgRequest.username)
  return _internal_username();
}
inline void queryOfflineGroupMsgRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:OfflineMessageProto.queryOfflineGroupMsgRequest.username)
}
inline std::string* queryOfflineGroupMsgRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:OfflineMessageProto.queryOfflineGroupMsgRequest.username)
  return _internal_mutable_username();
}
inline const std::string& queryOfflineGroupMsgRequest::_internal_username() const {
  return username_.GetNoArena();
}
inline void queryOfflineGroupMsgRequest::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void queryOfflineGroupMsgRequest::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OfflineMessageProto.queryOfflineGroupMsgRequest.username)
}
inline void queryOfflineGroupMsgRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OfflineMessageProto.queryOfflineGroupMsgRequest.username)
}
inline void queryOfflineGroupMsgRequest::set_username(const void* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OfflineMessageProto.queryOfflineGroupMsgRequest.username)
}
inline std::string* queryOfflineGroupMsgRequest::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* queryOfflineGroupMsgRequest::release_username() {
  // @@protoc_insertion_point(field_release:OfflineMessageProto.queryOfflineGroupMsgRequest.username)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void queryOfflineGroupMsgRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:OfflineMessageProto.queryOfflineGroupMsgRequest.username)
}

// -------------------------------------------------------------------

// queryOfflineGroupMsgResponse

// repeated .OfflineMessageProto.groupMsg OfflineGroupMsg = 1;
inline int queryOfflineGroupMsgResponse::_internal_offlinegroupmsg_size() const {
  return offlinegroupmsg_.size();
}
inline int queryOfflineGroupMsgResponse::offlinegroupmsg_size() const {
  return _internal_offlinegroupmsg_size();
}
inline void queryOfflineGroupMsgResponse::clear_offlinegroupmsg() {
  offlinegroupmsg_.Clear();
}
inline ::OfflineMessageProto::groupMsg* queryOfflineGroupMsgResponse::mutable_offlinegroupmsg(int index) {
  // @@protoc_insertion_point(field_mutable:OfflineMessageProto.queryOfflineGroupMsgResponse.OfflineGroupMsg)
  return offlinegroupmsg_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OfflineMessageProto::groupMsg >*
queryOfflineGroupMsgResponse::mutable_offlinegroupmsg() {
  // @@protoc_insertion_point(field_mutable_list:OfflineMessageProto.queryOfflineGroupMsgResponse.OfflineGroupMsg)
  return &offlinegroupmsg_;
}
inline const ::OfflineMessageProto::groupMsg& queryOfflineGroupMsgResponse::_internal_offlinegroupmsg(int index) const {
  return offlinegroupmsg_.Get(index);
}
inline const ::OfflineMessageProto::groupMsg& queryOfflineGroupMsgResponse::offlinegroupmsg(int index) const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.queryOfflineGroupMsgResponse.OfflineGroupMsg)
  return _internal_offlinegroupmsg(index);
}
inline ::OfflineMessageProto::groupMsg* queryOfflineGroupMsgResponse::_internal_add_offlinegroupmsg() {
  return offlinegroupmsg_.Add();
}
inline ::OfflineMessageProto::groupMsg* queryOfflineGroupMsgResponse::add_offlinegroupmsg() {
  // @@protoc_insertion_point(field_add:OfflineMessageProto.queryOfflineGroupMsgResponse.OfflineGroupMsg)
  return _internal_add_offlinegroupmsg();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OfflineMessageProto::groupMsg >&
queryOfflineGroupMsgResponse::offlinegroupmsg() const {
  // @@protoc_insertion_point(field_list:OfflineMessageProto.queryOfflineGroupMsgResponse.OfflineGroupMsg)
  return offlinegroupmsg_;
}

// .OfflineMessageProto.ResultCode result = 2;
inline bool queryOfflineGroupMsgResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool queryOfflineGroupMsgResponse::has_result() const {
  return _internal_has_result();
}
inline void queryOfflineGroupMsgResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::OfflineMessageProto::ResultCode& queryOfflineGroupMsgResponse::_internal_result() const {
  const ::OfflineMessageProto::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OfflineMessageProto::ResultCode*>(
      &::OfflineMessageProto::_ResultCode_default_instance_);
}
inline const ::OfflineMessageProto::ResultCode& queryOfflineGroupMsgResponse::result() const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.queryOfflineGroupMsgResponse.result)
  return _internal_result();
}
inline ::OfflineMessageProto::ResultCode* queryOfflineGroupMsgResponse::release_result() {
  // @@protoc_insertion_point(field_release:OfflineMessageProto.queryOfflineGroupMsgResponse.result)
  
  ::OfflineMessageProto::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::OfflineMessageProto::ResultCode* queryOfflineGroupMsgResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::OfflineMessageProto::ResultCode>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::OfflineMessageProto::ResultCode* queryOfflineGroupMsgResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:OfflineMessageProto.queryOfflineGroupMsgResponse.result)
  return _internal_mutable_result();
}
inline void queryOfflineGroupMsgResponse::set_allocated_result(::OfflineMessageProto::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:OfflineMessageProto.queryOfflineGroupMsgResponse.result)
}

// bool success = 3;
inline void queryOfflineGroupMsgResponse::clear_success() {
  success_ = false;
}
inline bool queryOfflineGroupMsgResponse::_internal_success() const {
  return success_;
}
inline bool queryOfflineGroupMsgResponse::success() const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.queryOfflineGroupMsgResponse.success)
  return _internal_success();
}
inline void queryOfflineGroupMsgResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void queryOfflineGroupMsgResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:OfflineMessageProto.queryOfflineGroupMsgResponse.success)
}

// -------------------------------------------------------------------

// departMsg

// int32 msgid = 1;
inline void departMsg::clear_msgid() {
  msgid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 departMsg::_internal_msgid() const {
  return msgid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 departMsg::msgid() const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.departMsg.msgid)
  return _internal_msgid();
}
inline void departMsg::_internal_set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msgid_ = value;
}
inline void departMsg::set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msgid(value);
  // @@protoc_insertion_point(field_set:OfflineMessageProto.departMsg.msgid)
}

// bytes departname = 2;
inline void departMsg::clear_departname() {
  departname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& departMsg::departname() const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.departMsg.departname)
  return _internal_departname();
}
inline void departMsg::set_departname(const std::string& value) {
  _internal_set_departname(value);
  // @@protoc_insertion_point(field_set:OfflineMessageProto.departMsg.departname)
}
inline std::string* departMsg::mutable_departname() {
  // @@protoc_insertion_point(field_mutable:OfflineMessageProto.departMsg.departname)
  return _internal_mutable_departname();
}
inline const std::string& departMsg::_internal_departname() const {
  return departname_.GetNoArena();
}
inline void departMsg::_internal_set_departname(const std::string& value) {
  
  departname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void departMsg::set_departname(std::string&& value) {
  
  departname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OfflineMessageProto.departMsg.departname)
}
inline void departMsg::set_departname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  departname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OfflineMessageProto.departMsg.departname)
}
inline void departMsg::set_departname(const void* value, size_t size) {
  
  departname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OfflineMessageProto.departMsg.departname)
}
inline std::string* departMsg::_internal_mutable_departname() {
  
  return departname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* departMsg::release_departname() {
  // @@protoc_insertion_point(field_release:OfflineMessageProto.departMsg.departname)
  
  return departname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void departMsg::set_allocated_departname(std::string* departname) {
  if (departname != nullptr) {
    
  } else {
    
  }
  departname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), departname);
  // @@protoc_insertion_point(field_set_allocated:OfflineMessageProto.departMsg.departname)
}

// bytes sendname = 3;
inline void departMsg::clear_sendname() {
  sendname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& departMsg::sendname() const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.departMsg.sendname)
  return _internal_sendname();
}
inline void departMsg::set_sendname(const std::string& value) {
  _internal_set_sendname(value);
  // @@protoc_insertion_point(field_set:OfflineMessageProto.departMsg.sendname)
}
inline std::string* departMsg::mutable_sendname() {
  // @@protoc_insertion_point(field_mutable:OfflineMessageProto.departMsg.sendname)
  return _internal_mutable_sendname();
}
inline const std::string& departMsg::_internal_sendname() const {
  return sendname_.GetNoArena();
}
inline void departMsg::_internal_set_sendname(const std::string& value) {
  
  sendname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void departMsg::set_sendname(std::string&& value) {
  
  sendname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OfflineMessageProto.departMsg.sendname)
}
inline void departMsg::set_sendname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sendname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OfflineMessageProto.departMsg.sendname)
}
inline void departMsg::set_sendname(const void* value, size_t size) {
  
  sendname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OfflineMessageProto.departMsg.sendname)
}
inline std::string* departMsg::_internal_mutable_sendname() {
  
  return sendname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* departMsg::release_sendname() {
  // @@protoc_insertion_point(field_release:OfflineMessageProto.departMsg.sendname)
  
  return sendname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void departMsg::set_allocated_sendname(std::string* sendname) {
  if (sendname != nullptr) {
    
  } else {
    
  }
  sendname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sendname);
  // @@protoc_insertion_point(field_set_allocated:OfflineMessageProto.departMsg.sendname)
}

// bytes message = 4;
inline void departMsg::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& departMsg::message() const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.departMsg.message)
  return _internal_message();
}
inline void departMsg::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:OfflineMessageProto.departMsg.message)
}
inline std::string* departMsg::mutable_message() {
  // @@protoc_insertion_point(field_mutable:OfflineMessageProto.departMsg.message)
  return _internal_mutable_message();
}
inline const std::string& departMsg::_internal_message() const {
  return message_.GetNoArena();
}
inline void departMsg::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void departMsg::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OfflineMessageProto.departMsg.message)
}
inline void departMsg::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OfflineMessageProto.departMsg.message)
}
inline void departMsg::set_message(const void* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OfflineMessageProto.departMsg.message)
}
inline std::string* departMsg::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* departMsg::release_message() {
  // @@protoc_insertion_point(field_release:OfflineMessageProto.departMsg.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void departMsg::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:OfflineMessageProto.departMsg.message)
}

// -------------------------------------------------------------------

// addOfflineDepartMsgRequest

// .OfflineMessageProto.departMsg OfflineDepartMsg = 1;
inline bool addOfflineDepartMsgRequest::_internal_has_offlinedepartmsg() const {
  return this != internal_default_instance() && offlinedepartmsg_ != nullptr;
}
inline bool addOfflineDepartMsgRequest::has_offlinedepartmsg() const {
  return _internal_has_offlinedepartmsg();
}
inline void addOfflineDepartMsgRequest::clear_offlinedepartmsg() {
  if (GetArenaNoVirtual() == nullptr && offlinedepartmsg_ != nullptr) {
    delete offlinedepartmsg_;
  }
  offlinedepartmsg_ = nullptr;
}
inline const ::OfflineMessageProto::departMsg& addOfflineDepartMsgRequest::_internal_offlinedepartmsg() const {
  const ::OfflineMessageProto::departMsg* p = offlinedepartmsg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OfflineMessageProto::departMsg*>(
      &::OfflineMessageProto::_departMsg_default_instance_);
}
inline const ::OfflineMessageProto::departMsg& addOfflineDepartMsgRequest::offlinedepartmsg() const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.addOfflineDepartMsgRequest.OfflineDepartMsg)
  return _internal_offlinedepartmsg();
}
inline ::OfflineMessageProto::departMsg* addOfflineDepartMsgRequest::release_offlinedepartmsg() {
  // @@protoc_insertion_point(field_release:OfflineMessageProto.addOfflineDepartMsgRequest.OfflineDepartMsg)
  
  ::OfflineMessageProto::departMsg* temp = offlinedepartmsg_;
  offlinedepartmsg_ = nullptr;
  return temp;
}
inline ::OfflineMessageProto::departMsg* addOfflineDepartMsgRequest::_internal_mutable_offlinedepartmsg() {
  
  if (offlinedepartmsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::OfflineMessageProto::departMsg>(GetArenaNoVirtual());
    offlinedepartmsg_ = p;
  }
  return offlinedepartmsg_;
}
inline ::OfflineMessageProto::departMsg* addOfflineDepartMsgRequest::mutable_offlinedepartmsg() {
  // @@protoc_insertion_point(field_mutable:OfflineMessageProto.addOfflineDepartMsgRequest.OfflineDepartMsg)
  return _internal_mutable_offlinedepartmsg();
}
inline void addOfflineDepartMsgRequest::set_allocated_offlinedepartmsg(::OfflineMessageProto::departMsg* offlinedepartmsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete offlinedepartmsg_;
  }
  if (offlinedepartmsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      offlinedepartmsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offlinedepartmsg, submessage_arena);
    }
    
  } else {
    
  }
  offlinedepartmsg_ = offlinedepartmsg;
  // @@protoc_insertion_point(field_set_allocated:OfflineMessageProto.addOfflineDepartMsgRequest.OfflineDepartMsg)
}

// -------------------------------------------------------------------

// addOfflineDepartMsgResponse

// .OfflineMessageProto.ResultCode result = 1;
inline bool addOfflineDepartMsgResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool addOfflineDepartMsgResponse::has_result() const {
  return _internal_has_result();
}
inline void addOfflineDepartMsgResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::OfflineMessageProto::ResultCode& addOfflineDepartMsgResponse::_internal_result() const {
  const ::OfflineMessageProto::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OfflineMessageProto::ResultCode*>(
      &::OfflineMessageProto::_ResultCode_default_instance_);
}
inline const ::OfflineMessageProto::ResultCode& addOfflineDepartMsgResponse::result() const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.addOfflineDepartMsgResponse.result)
  return _internal_result();
}
inline ::OfflineMessageProto::ResultCode* addOfflineDepartMsgResponse::release_result() {
  // @@protoc_insertion_point(field_release:OfflineMessageProto.addOfflineDepartMsgResponse.result)
  
  ::OfflineMessageProto::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::OfflineMessageProto::ResultCode* addOfflineDepartMsgResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::OfflineMessageProto::ResultCode>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::OfflineMessageProto::ResultCode* addOfflineDepartMsgResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:OfflineMessageProto.addOfflineDepartMsgResponse.result)
  return _internal_mutable_result();
}
inline void addOfflineDepartMsgResponse::set_allocated_result(::OfflineMessageProto::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:OfflineMessageProto.addOfflineDepartMsgResponse.result)
}

// bool success = 2;
inline void addOfflineDepartMsgResponse::clear_success() {
  success_ = false;
}
inline bool addOfflineDepartMsgResponse::_internal_success() const {
  return success_;
}
inline bool addOfflineDepartMsgResponse::success() const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.addOfflineDepartMsgResponse.success)
  return _internal_success();
}
inline void addOfflineDepartMsgResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void addOfflineDepartMsgResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:OfflineMessageProto.addOfflineDepartMsgResponse.success)
}

// -------------------------------------------------------------------

// delOfflineDepartMsgRequest

// .OfflineMessageProto.departMsg OfflineDepartMsg = 1;
inline bool delOfflineDepartMsgRequest::_internal_has_offlinedepartmsg() const {
  return this != internal_default_instance() && offlinedepartmsg_ != nullptr;
}
inline bool delOfflineDepartMsgRequest::has_offlinedepartmsg() const {
  return _internal_has_offlinedepartmsg();
}
inline void delOfflineDepartMsgRequest::clear_offlinedepartmsg() {
  if (GetArenaNoVirtual() == nullptr && offlinedepartmsg_ != nullptr) {
    delete offlinedepartmsg_;
  }
  offlinedepartmsg_ = nullptr;
}
inline const ::OfflineMessageProto::departMsg& delOfflineDepartMsgRequest::_internal_offlinedepartmsg() const {
  const ::OfflineMessageProto::departMsg* p = offlinedepartmsg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OfflineMessageProto::departMsg*>(
      &::OfflineMessageProto::_departMsg_default_instance_);
}
inline const ::OfflineMessageProto::departMsg& delOfflineDepartMsgRequest::offlinedepartmsg() const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.delOfflineDepartMsgRequest.OfflineDepartMsg)
  return _internal_offlinedepartmsg();
}
inline ::OfflineMessageProto::departMsg* delOfflineDepartMsgRequest::release_offlinedepartmsg() {
  // @@protoc_insertion_point(field_release:OfflineMessageProto.delOfflineDepartMsgRequest.OfflineDepartMsg)
  
  ::OfflineMessageProto::departMsg* temp = offlinedepartmsg_;
  offlinedepartmsg_ = nullptr;
  return temp;
}
inline ::OfflineMessageProto::departMsg* delOfflineDepartMsgRequest::_internal_mutable_offlinedepartmsg() {
  
  if (offlinedepartmsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::OfflineMessageProto::departMsg>(GetArenaNoVirtual());
    offlinedepartmsg_ = p;
  }
  return offlinedepartmsg_;
}
inline ::OfflineMessageProto::departMsg* delOfflineDepartMsgRequest::mutable_offlinedepartmsg() {
  // @@protoc_insertion_point(field_mutable:OfflineMessageProto.delOfflineDepartMsgRequest.OfflineDepartMsg)
  return _internal_mutable_offlinedepartmsg();
}
inline void delOfflineDepartMsgRequest::set_allocated_offlinedepartmsg(::OfflineMessageProto::departMsg* offlinedepartmsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete offlinedepartmsg_;
  }
  if (offlinedepartmsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      offlinedepartmsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offlinedepartmsg, submessage_arena);
    }
    
  } else {
    
  }
  offlinedepartmsg_ = offlinedepartmsg;
  // @@protoc_insertion_point(field_set_allocated:OfflineMessageProto.delOfflineDepartMsgRequest.OfflineDepartMsg)
}

// -------------------------------------------------------------------

// delOfflineDepartMsgResponse

// .OfflineMessageProto.ResultCode result = 1;
inline bool delOfflineDepartMsgResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool delOfflineDepartMsgResponse::has_result() const {
  return _internal_has_result();
}
inline void delOfflineDepartMsgResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::OfflineMessageProto::ResultCode& delOfflineDepartMsgResponse::_internal_result() const {
  const ::OfflineMessageProto::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OfflineMessageProto::ResultCode*>(
      &::OfflineMessageProto::_ResultCode_default_instance_);
}
inline const ::OfflineMessageProto::ResultCode& delOfflineDepartMsgResponse::result() const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.delOfflineDepartMsgResponse.result)
  return _internal_result();
}
inline ::OfflineMessageProto::ResultCode* delOfflineDepartMsgResponse::release_result() {
  // @@protoc_insertion_point(field_release:OfflineMessageProto.delOfflineDepartMsgResponse.result)
  
  ::OfflineMessageProto::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::OfflineMessageProto::ResultCode* delOfflineDepartMsgResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::OfflineMessageProto::ResultCode>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::OfflineMessageProto::ResultCode* delOfflineDepartMsgResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:OfflineMessageProto.delOfflineDepartMsgResponse.result)
  return _internal_mutable_result();
}
inline void delOfflineDepartMsgResponse::set_allocated_result(::OfflineMessageProto::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:OfflineMessageProto.delOfflineDepartMsgResponse.result)
}

// bool success = 2;
inline void delOfflineDepartMsgResponse::clear_success() {
  success_ = false;
}
inline bool delOfflineDepartMsgResponse::_internal_success() const {
  return success_;
}
inline bool delOfflineDepartMsgResponse::success() const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.delOfflineDepartMsgResponse.success)
  return _internal_success();
}
inline void delOfflineDepartMsgResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void delOfflineDepartMsgResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:OfflineMessageProto.delOfflineDepartMsgResponse.success)
}

// -------------------------------------------------------------------

// queryOfflineDepartMsgRequest

// bytes username = 1;
inline void queryOfflineDepartMsgRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& queryOfflineDepartMsgRequest::username() const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.queryOfflineDepartMsgRequest.username)
  return _internal_username();
}
inline void queryOfflineDepartMsgRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:OfflineMessageProto.queryOfflineDepartMsgRequest.username)
}
inline std::string* queryOfflineDepartMsgRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:OfflineMessageProto.queryOfflineDepartMsgRequest.username)
  return _internal_mutable_username();
}
inline const std::string& queryOfflineDepartMsgRequest::_internal_username() const {
  return username_.GetNoArena();
}
inline void queryOfflineDepartMsgRequest::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void queryOfflineDepartMsgRequest::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OfflineMessageProto.queryOfflineDepartMsgRequest.username)
}
inline void queryOfflineDepartMsgRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OfflineMessageProto.queryOfflineDepartMsgRequest.username)
}
inline void queryOfflineDepartMsgRequest::set_username(const void* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OfflineMessageProto.queryOfflineDepartMsgRequest.username)
}
inline std::string* queryOfflineDepartMsgRequest::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* queryOfflineDepartMsgRequest::release_username() {
  // @@protoc_insertion_point(field_release:OfflineMessageProto.queryOfflineDepartMsgRequest.username)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void queryOfflineDepartMsgRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:OfflineMessageProto.queryOfflineDepartMsgRequest.username)
}

// -------------------------------------------------------------------

// queryOfflineDepartMsgResponse

// repeated .OfflineMessageProto.departMsg OfflineDepartMsg = 1;
inline int queryOfflineDepartMsgResponse::_internal_offlinedepartmsg_size() const {
  return offlinedepartmsg_.size();
}
inline int queryOfflineDepartMsgResponse::offlinedepartmsg_size() const {
  return _internal_offlinedepartmsg_size();
}
inline void queryOfflineDepartMsgResponse::clear_offlinedepartmsg() {
  offlinedepartmsg_.Clear();
}
inline ::OfflineMessageProto::departMsg* queryOfflineDepartMsgResponse::mutable_offlinedepartmsg(int index) {
  // @@protoc_insertion_point(field_mutable:OfflineMessageProto.queryOfflineDepartMsgResponse.OfflineDepartMsg)
  return offlinedepartmsg_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OfflineMessageProto::departMsg >*
queryOfflineDepartMsgResponse::mutable_offlinedepartmsg() {
  // @@protoc_insertion_point(field_mutable_list:OfflineMessageProto.queryOfflineDepartMsgResponse.OfflineDepartMsg)
  return &offlinedepartmsg_;
}
inline const ::OfflineMessageProto::departMsg& queryOfflineDepartMsgResponse::_internal_offlinedepartmsg(int index) const {
  return offlinedepartmsg_.Get(index);
}
inline const ::OfflineMessageProto::departMsg& queryOfflineDepartMsgResponse::offlinedepartmsg(int index) const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.queryOfflineDepartMsgResponse.OfflineDepartMsg)
  return _internal_offlinedepartmsg(index);
}
inline ::OfflineMessageProto::departMsg* queryOfflineDepartMsgResponse::_internal_add_offlinedepartmsg() {
  return offlinedepartmsg_.Add();
}
inline ::OfflineMessageProto::departMsg* queryOfflineDepartMsgResponse::add_offlinedepartmsg() {
  // @@protoc_insertion_point(field_add:OfflineMessageProto.queryOfflineDepartMsgResponse.OfflineDepartMsg)
  return _internal_add_offlinedepartmsg();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OfflineMessageProto::departMsg >&
queryOfflineDepartMsgResponse::offlinedepartmsg() const {
  // @@protoc_insertion_point(field_list:OfflineMessageProto.queryOfflineDepartMsgResponse.OfflineDepartMsg)
  return offlinedepartmsg_;
}

// .OfflineMessageProto.ResultCode result = 2;
inline bool queryOfflineDepartMsgResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool queryOfflineDepartMsgResponse::has_result() const {
  return _internal_has_result();
}
inline void queryOfflineDepartMsgResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::OfflineMessageProto::ResultCode& queryOfflineDepartMsgResponse::_internal_result() const {
  const ::OfflineMessageProto::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::OfflineMessageProto::ResultCode*>(
      &::OfflineMessageProto::_ResultCode_default_instance_);
}
inline const ::OfflineMessageProto::ResultCode& queryOfflineDepartMsgResponse::result() const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.queryOfflineDepartMsgResponse.result)
  return _internal_result();
}
inline ::OfflineMessageProto::ResultCode* queryOfflineDepartMsgResponse::release_result() {
  // @@protoc_insertion_point(field_release:OfflineMessageProto.queryOfflineDepartMsgResponse.result)
  
  ::OfflineMessageProto::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::OfflineMessageProto::ResultCode* queryOfflineDepartMsgResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::OfflineMessageProto::ResultCode>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::OfflineMessageProto::ResultCode* queryOfflineDepartMsgResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:OfflineMessageProto.queryOfflineDepartMsgResponse.result)
  return _internal_mutable_result();
}
inline void queryOfflineDepartMsgResponse::set_allocated_result(::OfflineMessageProto::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:OfflineMessageProto.queryOfflineDepartMsgResponse.result)
}

// bool success = 3;
inline void queryOfflineDepartMsgResponse::clear_success() {
  success_ = false;
}
inline bool queryOfflineDepartMsgResponse::_internal_success() const {
  return success_;
}
inline bool queryOfflineDepartMsgResponse::success() const {
  // @@protoc_insertion_point(field_get:OfflineMessageProto.queryOfflineDepartMsgResponse.success)
  return _internal_success();
}
inline void queryOfflineDepartMsgResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void queryOfflineDepartMsgResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:OfflineMessageProto.queryOfflineDepartMsgResponse.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace OfflineMessageProto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_offlinemessage_2eproto
