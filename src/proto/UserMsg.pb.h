// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserMsg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_UserMsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_UserMsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_UserMsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_UserMsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_UserMsg_2eproto;
namespace UserMsgProto {
class QueryUserMsgRequest;
struct QueryUserMsgRequestDefaultTypeInternal;
extern QueryUserMsgRequestDefaultTypeInternal _QueryUserMsgRequest_default_instance_;
class QueryUserMsgResponse;
struct QueryUserMsgResponseDefaultTypeInternal;
extern QueryUserMsgResponseDefaultTypeInternal _QueryUserMsgResponse_default_instance_;
class ResultCode;
struct ResultCodeDefaultTypeInternal;
extern ResultCodeDefaultTypeInternal _ResultCode_default_instance_;
class UpdateUserMsgRequest;
struct UpdateUserMsgRequestDefaultTypeInternal;
extern UpdateUserMsgRequestDefaultTypeInternal _UpdateUserMsgRequest_default_instance_;
class UpdateUserMsgResponse;
struct UpdateUserMsgResponseDefaultTypeInternal;
extern UpdateUserMsgResponseDefaultTypeInternal _UpdateUserMsgResponse_default_instance_;
class UserInfo;
struct UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
}  // namespace UserMsgProto
PROTOBUF_NAMESPACE_OPEN
template<> ::UserMsgProto::QueryUserMsgRequest* Arena::CreateMaybeMessage<::UserMsgProto::QueryUserMsgRequest>(Arena*);
template<> ::UserMsgProto::QueryUserMsgResponse* Arena::CreateMaybeMessage<::UserMsgProto::QueryUserMsgResponse>(Arena*);
template<> ::UserMsgProto::ResultCode* Arena::CreateMaybeMessage<::UserMsgProto::ResultCode>(Arena*);
template<> ::UserMsgProto::UpdateUserMsgRequest* Arena::CreateMaybeMessage<::UserMsgProto::UpdateUserMsgRequest>(Arena*);
template<> ::UserMsgProto::UpdateUserMsgResponse* Arena::CreateMaybeMessage<::UserMsgProto::UpdateUserMsgResponse>(Arena*);
template<> ::UserMsgProto::UserInfo* Arena::CreateMaybeMessage<::UserMsgProto::UserInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace UserMsgProto {

// ===================================================================

class UserInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserMsgProto.UserInfo) */ {
 public:
  inline UserInfo() : UserInfo(nullptr) {}
  ~UserInfo() override;
  explicit constexpr UserInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInfo(const UserInfo& from);
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserMsgProto.UserInfo";
  }
  protected:
  explicit UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kPwdFieldNumber = 3,
    kEmailFieldNumber = 4,
    kPhoneFieldNumber = 5,
    kDescFieldNumber = 6,
    kDepartNameFieldNumber = 7,
    kIdFieldNumber = 1,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes pwd = 3;
  void clear_pwd();
  const std::string& pwd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pwd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pwd();
  PROTOBUF_NODISCARD std::string* release_pwd();
  void set_allocated_pwd(std::string* pwd);
  private:
  const std::string& _internal_pwd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pwd(const std::string& value);
  std::string* _internal_mutable_pwd();
  public:

  // bytes email = 4;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // bytes phone = 5;
  void clear_phone();
  const std::string& phone() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_phone(ArgT0&& arg0, ArgT... args);
  std::string* mutable_phone();
  PROTOBUF_NODISCARD std::string* release_phone();
  void set_allocated_phone(std::string* phone);
  private:
  const std::string& _internal_phone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phone(const std::string& value);
  std::string* _internal_mutable_phone();
  public:

  // bytes desc = 6;
  void clear_desc();
  const std::string& desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc();
  PROTOBUF_NODISCARD std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // bytes departName = 7;
  void clear_departname();
  const std::string& departname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_departname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_departname();
  PROTOBUF_NODISCARD std::string* release_departname();
  void set_allocated_departname(std::string* departname);
  private:
  const std::string& _internal_departname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_departname(const std::string& value);
  std::string* _internal_mutable_departname();
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:UserMsgProto.UserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pwd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr departname_;
  int32_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UserMsg_2eproto;
};
// -------------------------------------------------------------------

class ResultCode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserMsgProto.ResultCode) */ {
 public:
  inline ResultCode() : ResultCode(nullptr) {}
  ~ResultCode() override;
  explicit constexpr ResultCode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResultCode(const ResultCode& from);
  ResultCode(ResultCode&& from) noexcept
    : ResultCode() {
    *this = ::std::move(from);
  }

  inline ResultCode& operator=(const ResultCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultCode& operator=(ResultCode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResultCode& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResultCode* internal_default_instance() {
    return reinterpret_cast<const ResultCode*>(
               &_ResultCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ResultCode& a, ResultCode& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultCode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResultCode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResultCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResultCode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResultCode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResultCode& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultCode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserMsgProto.ResultCode";
  }
  protected:
  explicit ResultCode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 2,
    kErrcodeFieldNumber = 1,
  };
  // bytes errmsg = 2;
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // int32 errcode = 1;
  void clear_errcode();
  int32_t errcode() const;
  void set_errcode(int32_t value);
  private:
  int32_t _internal_errcode() const;
  void _internal_set_errcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:UserMsgProto.ResultCode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  int32_t errcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UserMsg_2eproto;
};
// -------------------------------------------------------------------

class QueryUserMsgRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserMsgProto.QueryUserMsgRequest) */ {
 public:
  inline QueryUserMsgRequest() : QueryUserMsgRequest(nullptr) {}
  ~QueryUserMsgRequest() override;
  explicit constexpr QueryUserMsgRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryUserMsgRequest(const QueryUserMsgRequest& from);
  QueryUserMsgRequest(QueryUserMsgRequest&& from) noexcept
    : QueryUserMsgRequest() {
    *this = ::std::move(from);
  }

  inline QueryUserMsgRequest& operator=(const QueryUserMsgRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryUserMsgRequest& operator=(QueryUserMsgRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryUserMsgRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryUserMsgRequest* internal_default_instance() {
    return reinterpret_cast<const QueryUserMsgRequest*>(
               &_QueryUserMsgRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QueryUserMsgRequest& a, QueryUserMsgRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryUserMsgRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryUserMsgRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryUserMsgRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryUserMsgRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryUserMsgRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const QueryUserMsgRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryUserMsgRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserMsgProto.QueryUserMsgRequest";
  }
  protected:
  explicit QueryUserMsgRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:UserMsgProto.QueryUserMsgRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UserMsg_2eproto;
};
// -------------------------------------------------------------------

class QueryUserMsgResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserMsgProto.QueryUserMsgResponse) */ {
 public:
  inline QueryUserMsgResponse() : QueryUserMsgResponse(nullptr) {}
  ~QueryUserMsgResponse() override;
  explicit constexpr QueryUserMsgResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryUserMsgResponse(const QueryUserMsgResponse& from);
  QueryUserMsgResponse(QueryUserMsgResponse&& from) noexcept
    : QueryUserMsgResponse() {
    *this = ::std::move(from);
  }

  inline QueryUserMsgResponse& operator=(const QueryUserMsgResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryUserMsgResponse& operator=(QueryUserMsgResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryUserMsgResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryUserMsgResponse* internal_default_instance() {
    return reinterpret_cast<const QueryUserMsgResponse*>(
               &_QueryUserMsgResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QueryUserMsgResponse& a, QueryUserMsgResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryUserMsgResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryUserMsgResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryUserMsgResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryUserMsgResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryUserMsgResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const QueryUserMsgResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryUserMsgResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserMsgProto.QueryUserMsgResponse";
  }
  protected:
  explicit QueryUserMsgResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kUserMsgFieldNumber = 2,
  };
  // .UserMsgProto.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::UserMsgProto::ResultCode& result() const;
  PROTOBUF_NODISCARD ::UserMsgProto::ResultCode* release_result();
  ::UserMsgProto::ResultCode* mutable_result();
  void set_allocated_result(::UserMsgProto::ResultCode* result);
  private:
  const ::UserMsgProto::ResultCode& _internal_result() const;
  ::UserMsgProto::ResultCode* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::UserMsgProto::ResultCode* result);
  ::UserMsgProto::ResultCode* unsafe_arena_release_result();

  // .UserMsgProto.UserInfo userMsg = 2;
  bool has_usermsg() const;
  private:
  bool _internal_has_usermsg() const;
  public:
  void clear_usermsg();
  const ::UserMsgProto::UserInfo& usermsg() const;
  PROTOBUF_NODISCARD ::UserMsgProto::UserInfo* release_usermsg();
  ::UserMsgProto::UserInfo* mutable_usermsg();
  void set_allocated_usermsg(::UserMsgProto::UserInfo* usermsg);
  private:
  const ::UserMsgProto::UserInfo& _internal_usermsg() const;
  ::UserMsgProto::UserInfo* _internal_mutable_usermsg();
  public:
  void unsafe_arena_set_allocated_usermsg(
      ::UserMsgProto::UserInfo* usermsg);
  ::UserMsgProto::UserInfo* unsafe_arena_release_usermsg();

  // @@protoc_insertion_point(class_scope:UserMsgProto.QueryUserMsgResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::UserMsgProto::ResultCode* result_;
  ::UserMsgProto::UserInfo* usermsg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UserMsg_2eproto;
};
// -------------------------------------------------------------------

class UpdateUserMsgRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserMsgProto.UpdateUserMsgRequest) */ {
 public:
  inline UpdateUserMsgRequest() : UpdateUserMsgRequest(nullptr) {}
  ~UpdateUserMsgRequest() override;
  explicit constexpr UpdateUserMsgRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateUserMsgRequest(const UpdateUserMsgRequest& from);
  UpdateUserMsgRequest(UpdateUserMsgRequest&& from) noexcept
    : UpdateUserMsgRequest() {
    *this = ::std::move(from);
  }

  inline UpdateUserMsgRequest& operator=(const UpdateUserMsgRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateUserMsgRequest& operator=(UpdateUserMsgRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateUserMsgRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateUserMsgRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateUserMsgRequest*>(
               &_UpdateUserMsgRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UpdateUserMsgRequest& a, UpdateUserMsgRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateUserMsgRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateUserMsgRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateUserMsgRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateUserMsgRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateUserMsgRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateUserMsgRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateUserMsgRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserMsgProto.UpdateUserMsgRequest";
  }
  protected:
  explicit UpdateUserMsgRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserMsgFieldNumber = 1,
  };
  // .UserMsgProto.UserInfo userMsg = 1;
  bool has_usermsg() const;
  private:
  bool _internal_has_usermsg() const;
  public:
  void clear_usermsg();
  const ::UserMsgProto::UserInfo& usermsg() const;
  PROTOBUF_NODISCARD ::UserMsgProto::UserInfo* release_usermsg();
  ::UserMsgProto::UserInfo* mutable_usermsg();
  void set_allocated_usermsg(::UserMsgProto::UserInfo* usermsg);
  private:
  const ::UserMsgProto::UserInfo& _internal_usermsg() const;
  ::UserMsgProto::UserInfo* _internal_mutable_usermsg();
  public:
  void unsafe_arena_set_allocated_usermsg(
      ::UserMsgProto::UserInfo* usermsg);
  ::UserMsgProto::UserInfo* unsafe_arena_release_usermsg();

  // @@protoc_insertion_point(class_scope:UserMsgProto.UpdateUserMsgRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::UserMsgProto::UserInfo* usermsg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UserMsg_2eproto;
};
// -------------------------------------------------------------------

class UpdateUserMsgResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserMsgProto.UpdateUserMsgResponse) */ {
 public:
  inline UpdateUserMsgResponse() : UpdateUserMsgResponse(nullptr) {}
  ~UpdateUserMsgResponse() override;
  explicit constexpr UpdateUserMsgResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateUserMsgResponse(const UpdateUserMsgResponse& from);
  UpdateUserMsgResponse(UpdateUserMsgResponse&& from) noexcept
    : UpdateUserMsgResponse() {
    *this = ::std::move(from);
  }

  inline UpdateUserMsgResponse& operator=(const UpdateUserMsgResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateUserMsgResponse& operator=(UpdateUserMsgResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateUserMsgResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateUserMsgResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateUserMsgResponse*>(
               &_UpdateUserMsgResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpdateUserMsgResponse& a, UpdateUserMsgResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateUserMsgResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateUserMsgResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateUserMsgResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateUserMsgResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateUserMsgResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateUserMsgResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateUserMsgResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserMsgProto.UpdateUserMsgResponse";
  }
  protected:
  explicit UpdateUserMsgResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .UserMsgProto.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::UserMsgProto::ResultCode& result() const;
  PROTOBUF_NODISCARD ::UserMsgProto::ResultCode* release_result();
  ::UserMsgProto::ResultCode* mutable_result();
  void set_allocated_result(::UserMsgProto::ResultCode* result);
  private:
  const ::UserMsgProto::ResultCode& _internal_result() const;
  ::UserMsgProto::ResultCode* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::UserMsgProto::ResultCode* result);
  ::UserMsgProto::ResultCode* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:UserMsgProto.UpdateUserMsgResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::UserMsgProto::ResultCode* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UserMsg_2eproto;
};
// ===================================================================

class UserMsgServiceRpc_Stub;

class UserMsgServiceRpc : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline UserMsgServiceRpc() {};
 public:
  virtual ~UserMsgServiceRpc();

  typedef UserMsgServiceRpc_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void QueryUserMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::UserMsgProto::QueryUserMsgRequest* request,
                       ::UserMsgProto::QueryUserMsgResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void UpdateUserMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::UserMsgProto::UpdateUserMsgRequest* request,
                       ::UserMsgProto::UpdateUserMsgResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserMsgServiceRpc);
};

class UserMsgServiceRpc_Stub : public UserMsgServiceRpc {
 public:
  UserMsgServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  UserMsgServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~UserMsgServiceRpc_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements UserMsgServiceRpc ------------------------------------------

  void QueryUserMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::UserMsgProto::QueryUserMsgRequest* request,
                       ::UserMsgProto::QueryUserMsgResponse* response,
                       ::google::protobuf::Closure* done);
  void UpdateUserMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::UserMsgProto::UpdateUserMsgRequest* request,
                       ::UserMsgProto::UpdateUserMsgResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserMsgServiceRpc_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserInfo

// int32 id = 1;
inline void UserInfo::clear_id() {
  id_ = 0;
}
inline int32_t UserInfo::_internal_id() const {
  return id_;
}
inline int32_t UserInfo::id() const {
  // @@protoc_insertion_point(field_get:UserMsgProto.UserInfo.id)
  return _internal_id();
}
inline void UserInfo::_internal_set_id(int32_t value) {
  
  id_ = value;
}
inline void UserInfo::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:UserMsgProto.UserInfo.id)
}

// bytes name = 2;
inline void UserInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& UserInfo::name() const {
  // @@protoc_insertion_point(field_get:UserMsgProto.UserInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserMsgProto.UserInfo.name)
}
inline std::string* UserInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:UserMsgProto.UserInfo.name)
  return _s;
}
inline const std::string& UserInfo::_internal_name() const {
  return name_.Get();
}
inline void UserInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserInfo::release_name() {
  // @@protoc_insertion_point(field_release:UserMsgProto.UserInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UserMsgProto.UserInfo.name)
}

// bytes pwd = 3;
inline void UserInfo::clear_pwd() {
  pwd_.ClearToEmpty();
}
inline const std::string& UserInfo::pwd() const {
  // @@protoc_insertion_point(field_get:UserMsgProto.UserInfo.pwd)
  return _internal_pwd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfo::set_pwd(ArgT0&& arg0, ArgT... args) {
 
 pwd_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserMsgProto.UserInfo.pwd)
}
inline std::string* UserInfo::mutable_pwd() {
  std::string* _s = _internal_mutable_pwd();
  // @@protoc_insertion_point(field_mutable:UserMsgProto.UserInfo.pwd)
  return _s;
}
inline const std::string& UserInfo::_internal_pwd() const {
  return pwd_.Get();
}
inline void UserInfo::_internal_set_pwd(const std::string& value) {
  
  pwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_pwd() {
  
  return pwd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserInfo::release_pwd() {
  // @@protoc_insertion_point(field_release:UserMsgProto.UserInfo.pwd)
  return pwd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserInfo::set_allocated_pwd(std::string* pwd) {
  if (pwd != nullptr) {
    
  } else {
    
  }
  pwd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pwd,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pwd_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    pwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UserMsgProto.UserInfo.pwd)
}

// bytes email = 4;
inline void UserInfo::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& UserInfo::email() const {
  // @@protoc_insertion_point(field_get:UserMsgProto.UserInfo.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfo::set_email(ArgT0&& arg0, ArgT... args) {
 
 email_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserMsgProto.UserInfo.email)
}
inline std::string* UserInfo::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:UserMsgProto.UserInfo.email)
  return _s;
}
inline const std::string& UserInfo::_internal_email() const {
  return email_.Get();
}
inline void UserInfo::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserInfo::release_email() {
  // @@protoc_insertion_point(field_release:UserMsgProto.UserInfo.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserInfo::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (email_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UserMsgProto.UserInfo.email)
}

// bytes phone = 5;
inline void UserInfo::clear_phone() {
  phone_.ClearToEmpty();
}
inline const std::string& UserInfo::phone() const {
  // @@protoc_insertion_point(field_get:UserMsgProto.UserInfo.phone)
  return _internal_phone();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfo::set_phone(ArgT0&& arg0, ArgT... args) {
 
 phone_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserMsgProto.UserInfo.phone)
}
inline std::string* UserInfo::mutable_phone() {
  std::string* _s = _internal_mutable_phone();
  // @@protoc_insertion_point(field_mutable:UserMsgProto.UserInfo.phone)
  return _s;
}
inline const std::string& UserInfo::_internal_phone() const {
  return phone_.Get();
}
inline void UserInfo::_internal_set_phone(const std::string& value) {
  
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_phone() {
  
  return phone_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserInfo::release_phone() {
  // @@protoc_insertion_point(field_release:UserMsgProto.UserInfo.phone)
  return phone_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserInfo::set_allocated_phone(std::string* phone) {
  if (phone != nullptr) {
    
  } else {
    
  }
  phone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (phone_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    phone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UserMsgProto.UserInfo.phone)
}

// bytes desc = 6;
inline void UserInfo::clear_desc() {
  desc_.ClearToEmpty();
}
inline const std::string& UserInfo::desc() const {
  // @@protoc_insertion_point(field_get:UserMsgProto.UserInfo.desc)
  return _internal_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfo::set_desc(ArgT0&& arg0, ArgT... args) {
 
 desc_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserMsgProto.UserInfo.desc)
}
inline std::string* UserInfo::mutable_desc() {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:UserMsgProto.UserInfo.desc)
  return _s;
}
inline const std::string& UserInfo::_internal_desc() const {
  return desc_.Get();
}
inline void UserInfo::_internal_set_desc(const std::string& value) {
  
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_desc() {
  
  return desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserInfo::release_desc() {
  // @@protoc_insertion_point(field_release:UserMsgProto.UserInfo.desc)
  return desc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserInfo::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (desc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UserMsgProto.UserInfo.desc)
}

// bytes departName = 7;
inline void UserInfo::clear_departname() {
  departname_.ClearToEmpty();
}
inline const std::string& UserInfo::departname() const {
  // @@protoc_insertion_point(field_get:UserMsgProto.UserInfo.departName)
  return _internal_departname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfo::set_departname(ArgT0&& arg0, ArgT... args) {
 
 departname_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserMsgProto.UserInfo.departName)
}
inline std::string* UserInfo::mutable_departname() {
  std::string* _s = _internal_mutable_departname();
  // @@protoc_insertion_point(field_mutable:UserMsgProto.UserInfo.departName)
  return _s;
}
inline const std::string& UserInfo::_internal_departname() const {
  return departname_.Get();
}
inline void UserInfo::_internal_set_departname(const std::string& value) {
  
  departname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_departname() {
  
  return departname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserInfo::release_departname() {
  // @@protoc_insertion_point(field_release:UserMsgProto.UserInfo.departName)
  return departname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserInfo::set_allocated_departname(std::string* departname) {
  if (departname != nullptr) {
    
  } else {
    
  }
  departname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), departname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (departname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    departname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UserMsgProto.UserInfo.departName)
}

// -------------------------------------------------------------------

// ResultCode

// int32 errcode = 1;
inline void ResultCode::clear_errcode() {
  errcode_ = 0;
}
inline int32_t ResultCode::_internal_errcode() const {
  return errcode_;
}
inline int32_t ResultCode::errcode() const {
  // @@protoc_insertion_point(field_get:UserMsgProto.ResultCode.errcode)
  return _internal_errcode();
}
inline void ResultCode::_internal_set_errcode(int32_t value) {
  
  errcode_ = value;
}
inline void ResultCode::set_errcode(int32_t value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:UserMsgProto.ResultCode.errcode)
}

// bytes errmsg = 2;
inline void ResultCode::clear_errmsg() {
  errmsg_.ClearToEmpty();
}
inline const std::string& ResultCode::errmsg() const {
  // @@protoc_insertion_point(field_get:UserMsgProto.ResultCode.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResultCode::set_errmsg(ArgT0&& arg0, ArgT... args) {
 
 errmsg_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserMsgProto.ResultCode.errmsg)
}
inline std::string* ResultCode::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:UserMsgProto.ResultCode.errmsg)
  return _s;
}
inline const std::string& ResultCode::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void ResultCode::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResultCode::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResultCode::release_errmsg() {
  // @@protoc_insertion_point(field_release:UserMsgProto.ResultCode.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResultCode::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (errmsg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UserMsgProto.ResultCode.errmsg)
}

// -------------------------------------------------------------------

// QueryUserMsgRequest

// bytes name = 1;
inline void QueryUserMsgRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& QueryUserMsgRequest::name() const {
  // @@protoc_insertion_point(field_get:UserMsgProto.QueryUserMsgRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryUserMsgRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserMsgProto.QueryUserMsgRequest.name)
}
inline std::string* QueryUserMsgRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:UserMsgProto.QueryUserMsgRequest.name)
  return _s;
}
inline const std::string& QueryUserMsgRequest::_internal_name() const {
  return name_.Get();
}
inline void QueryUserMsgRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* QueryUserMsgRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* QueryUserMsgRequest::release_name() {
  // @@protoc_insertion_point(field_release:UserMsgProto.QueryUserMsgRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void QueryUserMsgRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UserMsgProto.QueryUserMsgRequest.name)
}

// -------------------------------------------------------------------

// QueryUserMsgResponse

// .UserMsgProto.ResultCode result = 1;
inline bool QueryUserMsgResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool QueryUserMsgResponse::has_result() const {
  return _internal_has_result();
}
inline void QueryUserMsgResponse::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::UserMsgProto::ResultCode& QueryUserMsgResponse::_internal_result() const {
  const ::UserMsgProto::ResultCode* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::UserMsgProto::ResultCode&>(
      ::UserMsgProto::_ResultCode_default_instance_);
}
inline const ::UserMsgProto::ResultCode& QueryUserMsgResponse::result() const {
  // @@protoc_insertion_point(field_get:UserMsgProto.QueryUserMsgResponse.result)
  return _internal_result();
}
inline void QueryUserMsgResponse::unsafe_arena_set_allocated_result(
    ::UserMsgProto::ResultCode* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserMsgProto.QueryUserMsgResponse.result)
}
inline ::UserMsgProto::ResultCode* QueryUserMsgResponse::release_result() {
  
  ::UserMsgProto::ResultCode* temp = result_;
  result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::UserMsgProto::ResultCode* QueryUserMsgResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:UserMsgProto.QueryUserMsgResponse.result)
  
  ::UserMsgProto::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::UserMsgProto::ResultCode* QueryUserMsgResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::UserMsgProto::ResultCode>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::UserMsgProto::ResultCode* QueryUserMsgResponse::mutable_result() {
  ::UserMsgProto::ResultCode* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:UserMsgProto.QueryUserMsgResponse.result)
  return _msg;
}
inline void QueryUserMsgResponse::set_allocated_result(::UserMsgProto::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::UserMsgProto::ResultCode>::GetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:UserMsgProto.QueryUserMsgResponse.result)
}

// .UserMsgProto.UserInfo userMsg = 2;
inline bool QueryUserMsgResponse::_internal_has_usermsg() const {
  return this != internal_default_instance() && usermsg_ != nullptr;
}
inline bool QueryUserMsgResponse::has_usermsg() const {
  return _internal_has_usermsg();
}
inline void QueryUserMsgResponse::clear_usermsg() {
  if (GetArenaForAllocation() == nullptr && usermsg_ != nullptr) {
    delete usermsg_;
  }
  usermsg_ = nullptr;
}
inline const ::UserMsgProto::UserInfo& QueryUserMsgResponse::_internal_usermsg() const {
  const ::UserMsgProto::UserInfo* p = usermsg_;
  return p != nullptr ? *p : reinterpret_cast<const ::UserMsgProto::UserInfo&>(
      ::UserMsgProto::_UserInfo_default_instance_);
}
inline const ::UserMsgProto::UserInfo& QueryUserMsgResponse::usermsg() const {
  // @@protoc_insertion_point(field_get:UserMsgProto.QueryUserMsgResponse.userMsg)
  return _internal_usermsg();
}
inline void QueryUserMsgResponse::unsafe_arena_set_allocated_usermsg(
    ::UserMsgProto::UserInfo* usermsg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(usermsg_);
  }
  usermsg_ = usermsg;
  if (usermsg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserMsgProto.QueryUserMsgResponse.userMsg)
}
inline ::UserMsgProto::UserInfo* QueryUserMsgResponse::release_usermsg() {
  
  ::UserMsgProto::UserInfo* temp = usermsg_;
  usermsg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::UserMsgProto::UserInfo* QueryUserMsgResponse::unsafe_arena_release_usermsg() {
  // @@protoc_insertion_point(field_release:UserMsgProto.QueryUserMsgResponse.userMsg)
  
  ::UserMsgProto::UserInfo* temp = usermsg_;
  usermsg_ = nullptr;
  return temp;
}
inline ::UserMsgProto::UserInfo* QueryUserMsgResponse::_internal_mutable_usermsg() {
  
  if (usermsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::UserMsgProto::UserInfo>(GetArenaForAllocation());
    usermsg_ = p;
  }
  return usermsg_;
}
inline ::UserMsgProto::UserInfo* QueryUserMsgResponse::mutable_usermsg() {
  ::UserMsgProto::UserInfo* _msg = _internal_mutable_usermsg();
  // @@protoc_insertion_point(field_mutable:UserMsgProto.QueryUserMsgResponse.userMsg)
  return _msg;
}
inline void QueryUserMsgResponse::set_allocated_usermsg(::UserMsgProto::UserInfo* usermsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete usermsg_;
  }
  if (usermsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::UserMsgProto::UserInfo>::GetOwningArena(usermsg);
    if (message_arena != submessage_arena) {
      usermsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, usermsg, submessage_arena);
    }
    
  } else {
    
  }
  usermsg_ = usermsg;
  // @@protoc_insertion_point(field_set_allocated:UserMsgProto.QueryUserMsgResponse.userMsg)
}

// -------------------------------------------------------------------

// UpdateUserMsgRequest

// .UserMsgProto.UserInfo userMsg = 1;
inline bool UpdateUserMsgRequest::_internal_has_usermsg() const {
  return this != internal_default_instance() && usermsg_ != nullptr;
}
inline bool UpdateUserMsgRequest::has_usermsg() const {
  return _internal_has_usermsg();
}
inline void UpdateUserMsgRequest::clear_usermsg() {
  if (GetArenaForAllocation() == nullptr && usermsg_ != nullptr) {
    delete usermsg_;
  }
  usermsg_ = nullptr;
}
inline const ::UserMsgProto::UserInfo& UpdateUserMsgRequest::_internal_usermsg() const {
  const ::UserMsgProto::UserInfo* p = usermsg_;
  return p != nullptr ? *p : reinterpret_cast<const ::UserMsgProto::UserInfo&>(
      ::UserMsgProto::_UserInfo_default_instance_);
}
inline const ::UserMsgProto::UserInfo& UpdateUserMsgRequest::usermsg() const {
  // @@protoc_insertion_point(field_get:UserMsgProto.UpdateUserMsgRequest.userMsg)
  return _internal_usermsg();
}
inline void UpdateUserMsgRequest::unsafe_arena_set_allocated_usermsg(
    ::UserMsgProto::UserInfo* usermsg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(usermsg_);
  }
  usermsg_ = usermsg;
  if (usermsg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserMsgProto.UpdateUserMsgRequest.userMsg)
}
inline ::UserMsgProto::UserInfo* UpdateUserMsgRequest::release_usermsg() {
  
  ::UserMsgProto::UserInfo* temp = usermsg_;
  usermsg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::UserMsgProto::UserInfo* UpdateUserMsgRequest::unsafe_arena_release_usermsg() {
  // @@protoc_insertion_point(field_release:UserMsgProto.UpdateUserMsgRequest.userMsg)
  
  ::UserMsgProto::UserInfo* temp = usermsg_;
  usermsg_ = nullptr;
  return temp;
}
inline ::UserMsgProto::UserInfo* UpdateUserMsgRequest::_internal_mutable_usermsg() {
  
  if (usermsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::UserMsgProto::UserInfo>(GetArenaForAllocation());
    usermsg_ = p;
  }
  return usermsg_;
}
inline ::UserMsgProto::UserInfo* UpdateUserMsgRequest::mutable_usermsg() {
  ::UserMsgProto::UserInfo* _msg = _internal_mutable_usermsg();
  // @@protoc_insertion_point(field_mutable:UserMsgProto.UpdateUserMsgRequest.userMsg)
  return _msg;
}
inline void UpdateUserMsgRequest::set_allocated_usermsg(::UserMsgProto::UserInfo* usermsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete usermsg_;
  }
  if (usermsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::UserMsgProto::UserInfo>::GetOwningArena(usermsg);
    if (message_arena != submessage_arena) {
      usermsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, usermsg, submessage_arena);
    }
    
  } else {
    
  }
  usermsg_ = usermsg;
  // @@protoc_insertion_point(field_set_allocated:UserMsgProto.UpdateUserMsgRequest.userMsg)
}

// -------------------------------------------------------------------

// UpdateUserMsgResponse

// .UserMsgProto.ResultCode result = 1;
inline bool UpdateUserMsgResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool UpdateUserMsgResponse::has_result() const {
  return _internal_has_result();
}
inline void UpdateUserMsgResponse::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::UserMsgProto::ResultCode& UpdateUserMsgResponse::_internal_result() const {
  const ::UserMsgProto::ResultCode* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::UserMsgProto::ResultCode&>(
      ::UserMsgProto::_ResultCode_default_instance_);
}
inline const ::UserMsgProto::ResultCode& UpdateUserMsgResponse::result() const {
  // @@protoc_insertion_point(field_get:UserMsgProto.UpdateUserMsgResponse.result)
  return _internal_result();
}
inline void UpdateUserMsgResponse::unsafe_arena_set_allocated_result(
    ::UserMsgProto::ResultCode* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:UserMsgProto.UpdateUserMsgResponse.result)
}
inline ::UserMsgProto::ResultCode* UpdateUserMsgResponse::release_result() {
  
  ::UserMsgProto::ResultCode* temp = result_;
  result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::UserMsgProto::ResultCode* UpdateUserMsgResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:UserMsgProto.UpdateUserMsgResponse.result)
  
  ::UserMsgProto::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::UserMsgProto::ResultCode* UpdateUserMsgResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::UserMsgProto::ResultCode>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::UserMsgProto::ResultCode* UpdateUserMsgResponse::mutable_result() {
  ::UserMsgProto::ResultCode* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:UserMsgProto.UpdateUserMsgResponse.result)
  return _msg;
}
inline void UpdateUserMsgResponse::set_allocated_result(::UserMsgProto::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::UserMsgProto::ResultCode>::GetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:UserMsgProto.UpdateUserMsgResponse.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace UserMsgProto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_UserMsg_2eproto
