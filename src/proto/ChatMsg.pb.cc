// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChatMsg.proto

#include "ChatMsg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ChatMsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResultCode_ChatMsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ChatMsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_chatMsg_ChatMsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ChatMsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_departChatMsg_ChatMsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ChatMsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_groupChatMsg_ChatMsg_2eproto;
namespace ChatMessageProto {
class ResultCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResultCode> _instance;
} _ResultCode_default_instance_;
class chatMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<chatMsg> _instance;
} _chatMsg_default_instance_;
class addMsgRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<addMsgRequest> _instance;
} _addMsgRequest_default_instance_;
class addMsgResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<addMsgResponse> _instance;
} _addMsgResponse_default_instance_;
class delMsgRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<delMsgRequest> _instance;
} _delMsgRequest_default_instance_;
class delMsgResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<delMsgResponse> _instance;
} _delMsgResponse_default_instance_;
class queryMsgRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<queryMsgRequest> _instance;
} _queryMsgRequest_default_instance_;
class queryMsgResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<queryMsgResponse> _instance;
} _queryMsgResponse_default_instance_;
class groupChatMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<groupChatMsg> _instance;
} _groupChatMsg_default_instance_;
class addGroupMsgRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<addGroupMsgRequest> _instance;
} _addGroupMsgRequest_default_instance_;
class addGroupMsgResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<addGroupMsgResponse> _instance;
} _addGroupMsgResponse_default_instance_;
class delGroupMsgRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<delGroupMsgRequest> _instance;
} _delGroupMsgRequest_default_instance_;
class delGroupMsgResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<delGroupMsgResponse> _instance;
} _delGroupMsgResponse_default_instance_;
class queryGroupMsgRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<queryGroupMsgRequest> _instance;
} _queryGroupMsgRequest_default_instance_;
class queryGroupMsgResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<queryGroupMsgResponse> _instance;
} _queryGroupMsgResponse_default_instance_;
class departChatMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<departChatMsg> _instance;
} _departChatMsg_default_instance_;
class addDepartMsgRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<addDepartMsgRequest> _instance;
} _addDepartMsgRequest_default_instance_;
class addDepartMsgResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<addDepartMsgResponse> _instance;
} _addDepartMsgResponse_default_instance_;
class delDepartMsgRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<delDepartMsgRequest> _instance;
} _delDepartMsgRequest_default_instance_;
class delDepartMsgResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<delDepartMsgResponse> _instance;
} _delDepartMsgResponse_default_instance_;
class queryDepartMsgRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<queryDepartMsgRequest> _instance;
} _queryDepartMsgRequest_default_instance_;
class queryDepartMsgResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<queryDepartMsgResponse> _instance;
} _queryDepartMsgResponse_default_instance_;
class queryOfflineMsgRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<queryOfflineMsgRequest> _instance;
} _queryOfflineMsgRequest_default_instance_;
class queryOfflineMsgResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<queryOfflineMsgResponse> _instance;
} _queryOfflineMsgResponse_default_instance_;
}  // namespace ChatMessageProto
static void InitDefaultsscc_info_ResultCode_ChatMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChatMessageProto::_ResultCode_default_instance_;
    new (ptr) ::ChatMessageProto::ResultCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatMessageProto::ResultCode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResultCode_ChatMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResultCode_ChatMsg_2eproto}, {}};

static void InitDefaultsscc_info_addDepartMsgRequest_ChatMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChatMessageProto::_addDepartMsgRequest_default_instance_;
    new (ptr) ::ChatMessageProto::addDepartMsgRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatMessageProto::addDepartMsgRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_addDepartMsgRequest_ChatMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_addDepartMsgRequest_ChatMsg_2eproto}, {
      &scc_info_departChatMsg_ChatMsg_2eproto.base,}};

static void InitDefaultsscc_info_addDepartMsgResponse_ChatMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChatMessageProto::_addDepartMsgResponse_default_instance_;
    new (ptr) ::ChatMessageProto::addDepartMsgResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatMessageProto::addDepartMsgResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_addDepartMsgResponse_ChatMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_addDepartMsgResponse_ChatMsg_2eproto}, {
      &scc_info_ResultCode_ChatMsg_2eproto.base,}};

static void InitDefaultsscc_info_addGroupMsgRequest_ChatMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChatMessageProto::_addGroupMsgRequest_default_instance_;
    new (ptr) ::ChatMessageProto::addGroupMsgRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatMessageProto::addGroupMsgRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_addGroupMsgRequest_ChatMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_addGroupMsgRequest_ChatMsg_2eproto}, {
      &scc_info_groupChatMsg_ChatMsg_2eproto.base,}};

static void InitDefaultsscc_info_addGroupMsgResponse_ChatMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChatMessageProto::_addGroupMsgResponse_default_instance_;
    new (ptr) ::ChatMessageProto::addGroupMsgResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatMessageProto::addGroupMsgResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_addGroupMsgResponse_ChatMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_addGroupMsgResponse_ChatMsg_2eproto}, {
      &scc_info_ResultCode_ChatMsg_2eproto.base,}};

static void InitDefaultsscc_info_addMsgRequest_ChatMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChatMessageProto::_addMsgRequest_default_instance_;
    new (ptr) ::ChatMessageProto::addMsgRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatMessageProto::addMsgRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_addMsgRequest_ChatMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_addMsgRequest_ChatMsg_2eproto}, {
      &scc_info_chatMsg_ChatMsg_2eproto.base,}};

static void InitDefaultsscc_info_addMsgResponse_ChatMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChatMessageProto::_addMsgResponse_default_instance_;
    new (ptr) ::ChatMessageProto::addMsgResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatMessageProto::addMsgResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_addMsgResponse_ChatMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_addMsgResponse_ChatMsg_2eproto}, {
      &scc_info_ResultCode_ChatMsg_2eproto.base,}};

static void InitDefaultsscc_info_chatMsg_ChatMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChatMessageProto::_chatMsg_default_instance_;
    new (ptr) ::ChatMessageProto::chatMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatMessageProto::chatMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_chatMsg_ChatMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_chatMsg_ChatMsg_2eproto}, {}};

static void InitDefaultsscc_info_delDepartMsgRequest_ChatMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChatMessageProto::_delDepartMsgRequest_default_instance_;
    new (ptr) ::ChatMessageProto::delDepartMsgRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatMessageProto::delDepartMsgRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_delDepartMsgRequest_ChatMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_delDepartMsgRequest_ChatMsg_2eproto}, {
      &scc_info_departChatMsg_ChatMsg_2eproto.base,}};

static void InitDefaultsscc_info_delDepartMsgResponse_ChatMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChatMessageProto::_delDepartMsgResponse_default_instance_;
    new (ptr) ::ChatMessageProto::delDepartMsgResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatMessageProto::delDepartMsgResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_delDepartMsgResponse_ChatMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_delDepartMsgResponse_ChatMsg_2eproto}, {
      &scc_info_ResultCode_ChatMsg_2eproto.base,}};

static void InitDefaultsscc_info_delGroupMsgRequest_ChatMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChatMessageProto::_delGroupMsgRequest_default_instance_;
    new (ptr) ::ChatMessageProto::delGroupMsgRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatMessageProto::delGroupMsgRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_delGroupMsgRequest_ChatMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_delGroupMsgRequest_ChatMsg_2eproto}, {
      &scc_info_groupChatMsg_ChatMsg_2eproto.base,}};

static void InitDefaultsscc_info_delGroupMsgResponse_ChatMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChatMessageProto::_delGroupMsgResponse_default_instance_;
    new (ptr) ::ChatMessageProto::delGroupMsgResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatMessageProto::delGroupMsgResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_delGroupMsgResponse_ChatMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_delGroupMsgResponse_ChatMsg_2eproto}, {
      &scc_info_ResultCode_ChatMsg_2eproto.base,}};

static void InitDefaultsscc_info_delMsgRequest_ChatMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChatMessageProto::_delMsgRequest_default_instance_;
    new (ptr) ::ChatMessageProto::delMsgRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatMessageProto::delMsgRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_delMsgRequest_ChatMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_delMsgRequest_ChatMsg_2eproto}, {
      &scc_info_chatMsg_ChatMsg_2eproto.base,}};

static void InitDefaultsscc_info_delMsgResponse_ChatMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChatMessageProto::_delMsgResponse_default_instance_;
    new (ptr) ::ChatMessageProto::delMsgResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatMessageProto::delMsgResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_delMsgResponse_ChatMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_delMsgResponse_ChatMsg_2eproto}, {
      &scc_info_ResultCode_ChatMsg_2eproto.base,}};

static void InitDefaultsscc_info_departChatMsg_ChatMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChatMessageProto::_departChatMsg_default_instance_;
    new (ptr) ::ChatMessageProto::departChatMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatMessageProto::departChatMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_departChatMsg_ChatMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_departChatMsg_ChatMsg_2eproto}, {}};

static void InitDefaultsscc_info_groupChatMsg_ChatMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChatMessageProto::_groupChatMsg_default_instance_;
    new (ptr) ::ChatMessageProto::groupChatMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatMessageProto::groupChatMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_groupChatMsg_ChatMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_groupChatMsg_ChatMsg_2eproto}, {}};

static void InitDefaultsscc_info_queryDepartMsgRequest_ChatMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChatMessageProto::_queryDepartMsgRequest_default_instance_;
    new (ptr) ::ChatMessageProto::queryDepartMsgRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatMessageProto::queryDepartMsgRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_queryDepartMsgRequest_ChatMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_queryDepartMsgRequest_ChatMsg_2eproto}, {}};

static void InitDefaultsscc_info_queryDepartMsgResponse_ChatMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChatMessageProto::_queryDepartMsgResponse_default_instance_;
    new (ptr) ::ChatMessageProto::queryDepartMsgResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatMessageProto::queryDepartMsgResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_queryDepartMsgResponse_ChatMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_queryDepartMsgResponse_ChatMsg_2eproto}, {
      &scc_info_departChatMsg_ChatMsg_2eproto.base,
      &scc_info_ResultCode_ChatMsg_2eproto.base,}};

static void InitDefaultsscc_info_queryGroupMsgRequest_ChatMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChatMessageProto::_queryGroupMsgRequest_default_instance_;
    new (ptr) ::ChatMessageProto::queryGroupMsgRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatMessageProto::queryGroupMsgRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_queryGroupMsgRequest_ChatMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_queryGroupMsgRequest_ChatMsg_2eproto}, {}};

static void InitDefaultsscc_info_queryGroupMsgResponse_ChatMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChatMessageProto::_queryGroupMsgResponse_default_instance_;
    new (ptr) ::ChatMessageProto::queryGroupMsgResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatMessageProto::queryGroupMsgResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_queryGroupMsgResponse_ChatMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_queryGroupMsgResponse_ChatMsg_2eproto}, {
      &scc_info_groupChatMsg_ChatMsg_2eproto.base,
      &scc_info_ResultCode_ChatMsg_2eproto.base,}};

static void InitDefaultsscc_info_queryMsgRequest_ChatMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChatMessageProto::_queryMsgRequest_default_instance_;
    new (ptr) ::ChatMessageProto::queryMsgRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatMessageProto::queryMsgRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_queryMsgRequest_ChatMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_queryMsgRequest_ChatMsg_2eproto}, {}};

static void InitDefaultsscc_info_queryMsgResponse_ChatMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChatMessageProto::_queryMsgResponse_default_instance_;
    new (ptr) ::ChatMessageProto::queryMsgResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatMessageProto::queryMsgResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_queryMsgResponse_ChatMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_queryMsgResponse_ChatMsg_2eproto}, {
      &scc_info_chatMsg_ChatMsg_2eproto.base,
      &scc_info_ResultCode_ChatMsg_2eproto.base,}};

static void InitDefaultsscc_info_queryOfflineMsgRequest_ChatMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChatMessageProto::_queryOfflineMsgRequest_default_instance_;
    new (ptr) ::ChatMessageProto::queryOfflineMsgRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatMessageProto::queryOfflineMsgRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_queryOfflineMsgRequest_ChatMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_queryOfflineMsgRequest_ChatMsg_2eproto}, {}};

static void InitDefaultsscc_info_queryOfflineMsgResponse_ChatMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ChatMessageProto::_queryOfflineMsgResponse_default_instance_;
    new (ptr) ::ChatMessageProto::queryOfflineMsgResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChatMessageProto::queryOfflineMsgResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_queryOfflineMsgResponse_ChatMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_queryOfflineMsgResponse_ChatMsg_2eproto}, {
      &scc_info_chatMsg_ChatMsg_2eproto.base,
      &scc_info_ResultCode_ChatMsg_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ChatMsg_2eproto[24];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ChatMsg_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_ChatMsg_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ChatMsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::ResultCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::ResultCode, errcode_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::ResultCode, errmsg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::chatMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::chatMsg, msgid_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::chatMsg, recvname_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::chatMsg, sendname_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::chatMsg, message_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::chatMsg, isread_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::addMsgRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::addMsgRequest, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::addMsgResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::addMsgResponse, result_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::addMsgResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::delMsgRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::delMsgRequest, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::delMsgResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::delMsgResponse, result_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::delMsgResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryMsgRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryMsgRequest, recvname_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryMsgRequest, sendname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryMsgResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryMsgResponse, msg_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryMsgResponse, result_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryMsgResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::groupChatMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::groupChatMsg, msgid_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::groupChatMsg, groupname_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::groupChatMsg, sendname_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::groupChatMsg, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::addGroupMsgRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::addGroupMsgRequest, groupmsg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::addGroupMsgResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::addGroupMsgResponse, result_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::addGroupMsgResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::delGroupMsgRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::delGroupMsgRequest, groupmsg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::delGroupMsgResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::delGroupMsgResponse, result_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::delGroupMsgResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryGroupMsgRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryGroupMsgRequest, username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryGroupMsgResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryGroupMsgResponse, groupmsg_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryGroupMsgResponse, result_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryGroupMsgResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::departChatMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::departChatMsg, msgid_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::departChatMsg, departname_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::departChatMsg, sendname_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::departChatMsg, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::addDepartMsgRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::addDepartMsgRequest, departmsg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::addDepartMsgResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::addDepartMsgResponse, result_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::addDepartMsgResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::delDepartMsgRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::delDepartMsgRequest, departmsg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::delDepartMsgResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::delDepartMsgResponse, result_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::delDepartMsgResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryDepartMsgRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryDepartMsgRequest, username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryDepartMsgResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryDepartMsgResponse, departmsg_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryDepartMsgResponse, result_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryDepartMsgResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryOfflineMsgRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryOfflineMsgRequest, recvname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryOfflineMsgResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryOfflineMsgResponse, msg_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryOfflineMsgResponse, result_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryOfflineMsgResponse, success_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ChatMessageProto::ResultCode)},
  { 7, -1, sizeof(::ChatMessageProto::chatMsg)},
  { 17, -1, sizeof(::ChatMessageProto::addMsgRequest)},
  { 23, -1, sizeof(::ChatMessageProto::addMsgResponse)},
  { 30, -1, sizeof(::ChatMessageProto::delMsgRequest)},
  { 36, -1, sizeof(::ChatMessageProto::delMsgResponse)},
  { 43, -1, sizeof(::ChatMessageProto::queryMsgRequest)},
  { 50, -1, sizeof(::ChatMessageProto::queryMsgResponse)},
  { 58, -1, sizeof(::ChatMessageProto::groupChatMsg)},
  { 67, -1, sizeof(::ChatMessageProto::addGroupMsgRequest)},
  { 73, -1, sizeof(::ChatMessageProto::addGroupMsgResponse)},
  { 80, -1, sizeof(::ChatMessageProto::delGroupMsgRequest)},
  { 86, -1, sizeof(::ChatMessageProto::delGroupMsgResponse)},
  { 93, -1, sizeof(::ChatMessageProto::queryGroupMsgRequest)},
  { 99, -1, sizeof(::ChatMessageProto::queryGroupMsgResponse)},
  { 107, -1, sizeof(::ChatMessageProto::departChatMsg)},
  { 116, -1, sizeof(::ChatMessageProto::addDepartMsgRequest)},
  { 122, -1, sizeof(::ChatMessageProto::addDepartMsgResponse)},
  { 129, -1, sizeof(::ChatMessageProto::delDepartMsgRequest)},
  { 135, -1, sizeof(::ChatMessageProto::delDepartMsgResponse)},
  { 142, -1, sizeof(::ChatMessageProto::queryDepartMsgRequest)},
  { 148, -1, sizeof(::ChatMessageProto::queryDepartMsgResponse)},
  { 156, -1, sizeof(::ChatMessageProto::queryOfflineMsgRequest)},
  { 162, -1, sizeof(::ChatMessageProto::queryOfflineMsgResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_ResultCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_chatMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_addMsgRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_addMsgResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_delMsgRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_delMsgResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_queryMsgRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_queryMsgResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_groupChatMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_addGroupMsgRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_addGroupMsgResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_delGroupMsgRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_delGroupMsgResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_queryGroupMsgRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_queryGroupMsgResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_departChatMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_addDepartMsgRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_addDepartMsgResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_delDepartMsgRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_delDepartMsgResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_queryDepartMsgRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_queryDepartMsgResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_queryOfflineMsgRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_queryOfflineMsgResponse_default_instance_),
};

const char descriptor_table_protodef_ChatMsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rChatMsg.proto\022\020ChatMessageProto\"-\n\nRes"
  "ultCode\022\017\n\007errcode\030\001 \001(\005\022\016\n\006errmsg\030\002 \001(\014"
  "\"]\n\007chatMsg\022\r\n\005msgid\030\001 \001(\005\022\020\n\010recvname\030\002"
  " \001(\014\022\020\n\010sendname\030\003 \001(\014\022\017\n\007message\030\004 \001(\014\022"
  "\016\n\006isRead\030\005 \001(\014\"7\n\raddMsgRequest\022&\n\003Msg\030"
  "\001 \001(\0132\031.ChatMessageProto.chatMsg\"O\n\016addM"
  "sgResponse\022,\n\006result\030\001 \001(\0132\034.ChatMessage"
  "Proto.ResultCode\022\017\n\007success\030\002 \001(\010\"7\n\rdel"
  "MsgRequest\022&\n\003Msg\030\001 \001(\0132\031.ChatMessagePro"
  "to.chatMsg\"O\n\016delMsgResponse\022,\n\006result\030\001"
  " \001(\0132\034.ChatMessageProto.ResultCode\022\017\n\007su"
  "ccess\030\002 \001(\010\"5\n\017queryMsgRequest\022\020\n\010recvna"
  "me\030\001 \001(\014\022\020\n\010sendname\030\002 \001(\014\"y\n\020queryMsgRe"
  "sponse\022&\n\003Msg\030\001 \003(\0132\031.ChatMessageProto.c"
  "hatMsg\022,\n\006result\030\002 \001(\0132\034.ChatMessageProt"
  "o.ResultCode\022\017\n\007success\030\003 \001(\010\"S\n\014groupCh"
  "atMsg\022\r\n\005msgid\030\001 \001(\005\022\021\n\tgroupname\030\002 \001(\014\022"
  "\020\n\010sendname\030\003 \001(\014\022\017\n\007message\030\004 \001(\014\"F\n\022ad"
  "dGroupMsgRequest\0220\n\010GroupMsg\030\001 \001(\0132\036.Cha"
  "tMessageProto.groupChatMsg\"T\n\023addGroupMs"
  "gResponse\022,\n\006result\030\001 \001(\0132\034.ChatMessageP"
  "roto.ResultCode\022\017\n\007success\030\002 \001(\010\"F\n\022delG"
  "roupMsgRequest\0220\n\010GroupMsg\030\001 \001(\0132\036.ChatM"
  "essageProto.groupChatMsg\"T\n\023delGroupMsgR"
  "esponse\022,\n\006result\030\001 \001(\0132\034.ChatMessagePro"
  "to.ResultCode\022\017\n\007success\030\002 \001(\010\"(\n\024queryG"
  "roupMsgRequest\022\020\n\010username\030\001 \001(\014\"\210\001\n\025que"
  "ryGroupMsgResponse\0220\n\010GroupMsg\030\001 \003(\0132\036.C"
  "hatMessageProto.groupChatMsg\022,\n\006result\030\002"
  " \001(\0132\034.ChatMessageProto.ResultCode\022\017\n\007su"
  "ccess\030\003 \001(\010\"U\n\rdepartChatMsg\022\r\n\005msgid\030\001 "
  "\001(\005\022\022\n\ndepartname\030\002 \001(\014\022\020\n\010sendname\030\003 \001("
  "\014\022\017\n\007message\030\004 \001(\014\"I\n\023addDepartMsgReques"
  "t\0222\n\tDepartMsg\030\001 \001(\0132\037.ChatMessageProto."
  "departChatMsg\"U\n\024addDepartMsgResponse\022,\n"
  "\006result\030\001 \001(\0132\034.ChatMessageProto.ResultC"
  "ode\022\017\n\007success\030\002 \001(\010\"I\n\023delDepartMsgRequ"
  "est\0222\n\tDepartMsg\030\001 \001(\0132\037.ChatMessageProt"
  "o.departChatMsg\"U\n\024delDepartMsgResponse\022"
  ",\n\006result\030\001 \001(\0132\034.ChatMessageProto.Resul"
  "tCode\022\017\n\007success\030\002 \001(\010\")\n\025queryDepartMsg"
  "Request\022\020\n\010username\030\001 \001(\014\"\213\001\n\026queryDepar"
  "tMsgResponse\0222\n\tDepartMsg\030\001 \003(\0132\037.ChatMe"
  "ssageProto.departChatMsg\022,\n\006result\030\002 \001(\013"
  "2\034.ChatMessageProto.ResultCode\022\017\n\007succes"
  "s\030\003 \001(\010\"*\n\026queryOfflineMsgRequest\022\020\n\010rec"
  "vname\030\001 \001(\014\"\200\001\n\027queryOfflineMsgResponse\022"
  "&\n\003Msg\030\001 \003(\0132\031.ChatMessageProto.chatMsg\022"
  ",\n\006result\030\002 \001(\0132\034.ChatMessageProto.Resul"
  "tCode\022\017\n\007success\030\003 \001(\0102\302\007\n\nchatMsgRpc\022O\n"
  "\nAddChatMsg\022\037.ChatMessageProto.addMsgReq"
  "uest\032 .ChatMessageProto.addMsgResponse\022O"
  "\n\nDelChatMsg\022\037.ChatMessageProto.delMsgRe"
  "quest\032 .ChatMessageProto.delMsgResponse\022"
  "U\n\014QueryChatMsg\022!.ChatMessageProto.query"
  "MsgRequest\032\".ChatMessageProto.queryMsgRe"
  "sponse\022f\n\017QueryOfflineMsg\022(.ChatMessageP"
  "roto.queryOfflineMsgRequest\032).ChatMessag"
  "eProto.queryOfflineMsgResponse\022^\n\017AddGro"
  "upChatMsg\022$.ChatMessageProto.addGroupMsg"
  "Request\032%.ChatMessageProto.addGroupMsgRe"
  "sponse\022^\n\017DelGroupChatMsg\022$.ChatMessageP"
  "roto.delGroupMsgRequest\032%.ChatMessagePro"
  "to.delGroupMsgResponse\022d\n\021QueryGroupChat"
  "Msg\022&.ChatMessageProto.queryGroupMsgRequ"
  "est\032\'.ChatMessageProto.queryGroupMsgResp"
  "onse\022a\n\020AddDepartChatMsg\022%.ChatMessagePr"
  "oto.addDepartMsgRequest\032&.ChatMessagePro"
  "to.addDepartMsgResponse\022a\n\020DelDepartChat"
  "Msg\022%.ChatMessageProto.delDepartMsgReque"
  "st\032&.ChatMessageProto.delDepartMsgRespon"
  "se\022g\n\022QueryDepartChatMsg\022\'.ChatMessagePr"
  "oto.queryDepartMsgRequest\032(.ChatMessageP"
  "roto.queryDepartMsgResponseB\003\200\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ChatMsg_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ChatMsg_2eproto_sccs[24] = {
  &scc_info_ResultCode_ChatMsg_2eproto.base,
  &scc_info_addDepartMsgRequest_ChatMsg_2eproto.base,
  &scc_info_addDepartMsgResponse_ChatMsg_2eproto.base,
  &scc_info_addGroupMsgRequest_ChatMsg_2eproto.base,
  &scc_info_addGroupMsgResponse_ChatMsg_2eproto.base,
  &scc_info_addMsgRequest_ChatMsg_2eproto.base,
  &scc_info_addMsgResponse_ChatMsg_2eproto.base,
  &scc_info_chatMsg_ChatMsg_2eproto.base,
  &scc_info_delDepartMsgRequest_ChatMsg_2eproto.base,
  &scc_info_delDepartMsgResponse_ChatMsg_2eproto.base,
  &scc_info_delGroupMsgRequest_ChatMsg_2eproto.base,
  &scc_info_delGroupMsgResponse_ChatMsg_2eproto.base,
  &scc_info_delMsgRequest_ChatMsg_2eproto.base,
  &scc_info_delMsgResponse_ChatMsg_2eproto.base,
  &scc_info_departChatMsg_ChatMsg_2eproto.base,
  &scc_info_groupChatMsg_ChatMsg_2eproto.base,
  &scc_info_queryDepartMsgRequest_ChatMsg_2eproto.base,
  &scc_info_queryDepartMsgResponse_ChatMsg_2eproto.base,
  &scc_info_queryGroupMsgRequest_ChatMsg_2eproto.base,
  &scc_info_queryGroupMsgResponse_ChatMsg_2eproto.base,
  &scc_info_queryMsgRequest_ChatMsg_2eproto.base,
  &scc_info_queryMsgResponse_ChatMsg_2eproto.base,
  &scc_info_queryOfflineMsgRequest_ChatMsg_2eproto.base,
  &scc_info_queryOfflineMsgResponse_ChatMsg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ChatMsg_2eproto_once;
static bool descriptor_table_ChatMsg_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ChatMsg_2eproto = {
  &descriptor_table_ChatMsg_2eproto_initialized, descriptor_table_protodef_ChatMsg_2eproto, "ChatMsg.proto", 2960,
  &descriptor_table_ChatMsg_2eproto_once, descriptor_table_ChatMsg_2eproto_sccs, descriptor_table_ChatMsg_2eproto_deps, 24, 0,
  schemas, file_default_instances, TableStruct_ChatMsg_2eproto::offsets,
  file_level_metadata_ChatMsg_2eproto, 24, file_level_enum_descriptors_ChatMsg_2eproto, file_level_service_descriptors_ChatMsg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ChatMsg_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ChatMsg_2eproto), true);
namespace ChatMessageProto {

// ===================================================================

void ResultCode::InitAsDefaultInstance() {
}
class ResultCode::_Internal {
 public:
};

ResultCode::ResultCode()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatMessageProto.ResultCode)
}
ResultCode::ResultCode(const ResultCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_errmsg().empty()) {
    errmsg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  errcode_ = from.errcode_;
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.ResultCode)
}

void ResultCode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResultCode_ChatMsg_2eproto.base);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  errcode_ = 0;
}

ResultCode::~ResultCode() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.ResultCode)
  SharedDtor();
}

void ResultCode::SharedDtor() {
  errmsg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResultCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResultCode& ResultCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResultCode_ChatMsg_2eproto.base);
  return *internal_default_instance();
}


void ResultCode::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.ResultCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errmsg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  errcode_ = 0;
  _internal_metadata_.Clear();
}

const char* ResultCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 errcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          errcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes errmsg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResultCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.ResultCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 errcode = 1;
  if (this->errcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_errcode(), target);
  }

  // bytes errmsg = 2;
  if (this->errmsg().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_errmsg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.ResultCode)
  return target;
}

size_t ResultCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.ResultCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes errmsg = 2;
  if (this->errmsg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_errmsg());
  }

  // int32 errcode = 1;
  if (this->errcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_errcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResultCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatMessageProto.ResultCode)
  GOOGLE_DCHECK_NE(&from, this);
  const ResultCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResultCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatMessageProto.ResultCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatMessageProto.ResultCode)
    MergeFrom(*source);
  }
}

void ResultCode::MergeFrom(const ResultCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.ResultCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errmsg().size() > 0) {

    errmsg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  if (from.errcode() != 0) {
    _internal_set_errcode(from._internal_errcode());
  }
}

void ResultCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatMessageProto.ResultCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultCode::CopyFrom(const ResultCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.ResultCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultCode::IsInitialized() const {
  return true;
}

void ResultCode::InternalSwap(ResultCode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  errmsg_.Swap(&other->errmsg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(errcode_, other->errcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResultCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void chatMsg::InitAsDefaultInstance() {
}
class chatMsg::_Internal {
 public:
};

chatMsg::chatMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatMessageProto.chatMsg)
}
chatMsg::chatMsg(const chatMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  recvname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recvname().empty()) {
    recvname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.recvname_);
  }
  sendname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sendname().empty()) {
    sendname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sendname_);
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  isread_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_isread().empty()) {
    isread_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.isread_);
  }
  msgid_ = from.msgid_;
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.chatMsg)
}

void chatMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_chatMsg_ChatMsg_2eproto.base);
  recvname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sendname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  isread_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msgid_ = 0;
}

chatMsg::~chatMsg() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.chatMsg)
  SharedDtor();
}

void chatMsg::SharedDtor() {
  recvname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sendname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  isread_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void chatMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const chatMsg& chatMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_chatMsg_ChatMsg_2eproto.base);
  return *internal_default_instance();
}


void chatMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.chatMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recvname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sendname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  isread_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msgid_ = 0;
  _internal_metadata_.Clear();
}

const char* chatMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 msgid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          msgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes recvname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_recvname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sendname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sendname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes isRead = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_isread();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* chatMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.chatMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msgid = 1;
  if (this->msgid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_msgid(), target);
  }

  // bytes recvname = 2;
  if (this->recvname().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_recvname(), target);
  }

  // bytes sendname = 3;
  if (this->sendname().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_sendname(), target);
  }

  // bytes message = 4;
  if (this->message().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_message(), target);
  }

  // bytes isRead = 5;
  if (this->isread().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_isread(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.chatMsg)
  return target;
}

size_t chatMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.chatMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes recvname = 2;
  if (this->recvname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_recvname());
  }

  // bytes sendname = 3;
  if (this->sendname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sendname());
  }

  // bytes message = 4;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());
  }

  // bytes isRead = 5;
  if (this->isread().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_isread());
  }

  // int32 msgid = 1;
  if (this->msgid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_msgid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void chatMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatMessageProto.chatMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const chatMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<chatMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatMessageProto.chatMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatMessageProto.chatMsg)
    MergeFrom(*source);
  }
}

void chatMsg::MergeFrom(const chatMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.chatMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.recvname().size() > 0) {

    recvname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.recvname_);
  }
  if (from.sendname().size() > 0) {

    sendname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sendname_);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.isread().size() > 0) {

    isread_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.isread_);
  }
  if (from.msgid() != 0) {
    _internal_set_msgid(from._internal_msgid());
  }
}

void chatMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatMessageProto.chatMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chatMsg::CopyFrom(const chatMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.chatMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chatMsg::IsInitialized() const {
  return true;
}

void chatMsg::InternalSwap(chatMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  recvname_.Swap(&other->recvname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sendname_.Swap(&other->sendname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  isread_.Swap(&other->isread_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(msgid_, other->msgid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata chatMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void addMsgRequest::InitAsDefaultInstance() {
  ::ChatMessageProto::_addMsgRequest_default_instance_._instance.get_mutable()->msg_ = const_cast< ::ChatMessageProto::chatMsg*>(
      ::ChatMessageProto::chatMsg::internal_default_instance());
}
class addMsgRequest::_Internal {
 public:
  static const ::ChatMessageProto::chatMsg& msg(const addMsgRequest* msg);
};

const ::ChatMessageProto::chatMsg&
addMsgRequest::_Internal::msg(const addMsgRequest* msg) {
  return *msg->msg_;
}
addMsgRequest::addMsgRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatMessageProto.addMsgRequest)
}
addMsgRequest::addMsgRequest(const addMsgRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_msg()) {
    msg_ = new ::ChatMessageProto::chatMsg(*from.msg_);
  } else {
    msg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.addMsgRequest)
}

void addMsgRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_addMsgRequest_ChatMsg_2eproto.base);
  msg_ = nullptr;
}

addMsgRequest::~addMsgRequest() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.addMsgRequest)
  SharedDtor();
}

void addMsgRequest::SharedDtor() {
  if (this != internal_default_instance()) delete msg_;
}

void addMsgRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const addMsgRequest& addMsgRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_addMsgRequest_ChatMsg_2eproto.base);
  return *internal_default_instance();
}


void addMsgRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.addMsgRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && msg_ != nullptr) {
    delete msg_;
  }
  msg_ = nullptr;
  _internal_metadata_.Clear();
}

const char* addMsgRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ChatMessageProto.chatMsg Msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* addMsgRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.addMsgRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ChatMessageProto.chatMsg Msg = 1;
  if (this->has_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::msg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.addMsgRequest)
  return target;
}

size_t addMsgRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.addMsgRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ChatMessageProto.chatMsg Msg = 1;
  if (this->has_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void addMsgRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatMessageProto.addMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const addMsgRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<addMsgRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatMessageProto.addMsgRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatMessageProto.addMsgRequest)
    MergeFrom(*source);
  }
}

void addMsgRequest::MergeFrom(const addMsgRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.addMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_msg()) {
    _internal_mutable_msg()->::ChatMessageProto::chatMsg::MergeFrom(from._internal_msg());
  }
}

void addMsgRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatMessageProto.addMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void addMsgRequest::CopyFrom(const addMsgRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.addMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool addMsgRequest::IsInitialized() const {
  return true;
}

void addMsgRequest::InternalSwap(addMsgRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(msg_, other->msg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata addMsgRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void addMsgResponse::InitAsDefaultInstance() {
  ::ChatMessageProto::_addMsgResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::ChatMessageProto::ResultCode*>(
      ::ChatMessageProto::ResultCode::internal_default_instance());
}
class addMsgResponse::_Internal {
 public:
  static const ::ChatMessageProto::ResultCode& result(const addMsgResponse* msg);
};

const ::ChatMessageProto::ResultCode&
addMsgResponse::_Internal::result(const addMsgResponse* msg) {
  return *msg->result_;
}
addMsgResponse::addMsgResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatMessageProto.addMsgResponse)
}
addMsgResponse::addMsgResponse(const addMsgResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::ChatMessageProto::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.addMsgResponse)
}

void addMsgResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_addMsgResponse_ChatMsg_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&result_)) + sizeof(success_));
}

addMsgResponse::~addMsgResponse() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.addMsgResponse)
  SharedDtor();
}

void addMsgResponse::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void addMsgResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const addMsgResponse& addMsgResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_addMsgResponse_ChatMsg_2eproto.base);
  return *internal_default_instance();
}


void addMsgResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.addMsgResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear();
}

const char* addMsgResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ChatMessageProto.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* addMsgResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.addMsgResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ChatMessageProto.ResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.addMsgResponse)
  return target;
}

size_t addMsgResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.addMsgResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ChatMessageProto.ResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void addMsgResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatMessageProto.addMsgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const addMsgResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<addMsgResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatMessageProto.addMsgResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatMessageProto.addMsgResponse)
    MergeFrom(*source);
  }
}

void addMsgResponse::MergeFrom(const addMsgResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.addMsgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::ChatMessageProto::ResultCode::MergeFrom(from._internal_result());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void addMsgResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatMessageProto.addMsgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void addMsgResponse::CopyFrom(const addMsgResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.addMsgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool addMsgResponse::IsInitialized() const {
  return true;
}

void addMsgResponse::InternalSwap(addMsgResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata addMsgResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void delMsgRequest::InitAsDefaultInstance() {
  ::ChatMessageProto::_delMsgRequest_default_instance_._instance.get_mutable()->msg_ = const_cast< ::ChatMessageProto::chatMsg*>(
      ::ChatMessageProto::chatMsg::internal_default_instance());
}
class delMsgRequest::_Internal {
 public:
  static const ::ChatMessageProto::chatMsg& msg(const delMsgRequest* msg);
};

const ::ChatMessageProto::chatMsg&
delMsgRequest::_Internal::msg(const delMsgRequest* msg) {
  return *msg->msg_;
}
delMsgRequest::delMsgRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatMessageProto.delMsgRequest)
}
delMsgRequest::delMsgRequest(const delMsgRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_msg()) {
    msg_ = new ::ChatMessageProto::chatMsg(*from.msg_);
  } else {
    msg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.delMsgRequest)
}

void delMsgRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_delMsgRequest_ChatMsg_2eproto.base);
  msg_ = nullptr;
}

delMsgRequest::~delMsgRequest() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.delMsgRequest)
  SharedDtor();
}

void delMsgRequest::SharedDtor() {
  if (this != internal_default_instance()) delete msg_;
}

void delMsgRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const delMsgRequest& delMsgRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_delMsgRequest_ChatMsg_2eproto.base);
  return *internal_default_instance();
}


void delMsgRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.delMsgRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && msg_ != nullptr) {
    delete msg_;
  }
  msg_ = nullptr;
  _internal_metadata_.Clear();
}

const char* delMsgRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ChatMessageProto.chatMsg Msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* delMsgRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.delMsgRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ChatMessageProto.chatMsg Msg = 1;
  if (this->has_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::msg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.delMsgRequest)
  return target;
}

size_t delMsgRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.delMsgRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ChatMessageProto.chatMsg Msg = 1;
  if (this->has_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void delMsgRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatMessageProto.delMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const delMsgRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<delMsgRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatMessageProto.delMsgRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatMessageProto.delMsgRequest)
    MergeFrom(*source);
  }
}

void delMsgRequest::MergeFrom(const delMsgRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.delMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_msg()) {
    _internal_mutable_msg()->::ChatMessageProto::chatMsg::MergeFrom(from._internal_msg());
  }
}

void delMsgRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatMessageProto.delMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void delMsgRequest::CopyFrom(const delMsgRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.delMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool delMsgRequest::IsInitialized() const {
  return true;
}

void delMsgRequest::InternalSwap(delMsgRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(msg_, other->msg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata delMsgRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void delMsgResponse::InitAsDefaultInstance() {
  ::ChatMessageProto::_delMsgResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::ChatMessageProto::ResultCode*>(
      ::ChatMessageProto::ResultCode::internal_default_instance());
}
class delMsgResponse::_Internal {
 public:
  static const ::ChatMessageProto::ResultCode& result(const delMsgResponse* msg);
};

const ::ChatMessageProto::ResultCode&
delMsgResponse::_Internal::result(const delMsgResponse* msg) {
  return *msg->result_;
}
delMsgResponse::delMsgResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatMessageProto.delMsgResponse)
}
delMsgResponse::delMsgResponse(const delMsgResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::ChatMessageProto::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.delMsgResponse)
}

void delMsgResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_delMsgResponse_ChatMsg_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&result_)) + sizeof(success_));
}

delMsgResponse::~delMsgResponse() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.delMsgResponse)
  SharedDtor();
}

void delMsgResponse::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void delMsgResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const delMsgResponse& delMsgResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_delMsgResponse_ChatMsg_2eproto.base);
  return *internal_default_instance();
}


void delMsgResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.delMsgResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear();
}

const char* delMsgResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ChatMessageProto.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* delMsgResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.delMsgResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ChatMessageProto.ResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.delMsgResponse)
  return target;
}

size_t delMsgResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.delMsgResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ChatMessageProto.ResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void delMsgResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatMessageProto.delMsgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const delMsgResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<delMsgResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatMessageProto.delMsgResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatMessageProto.delMsgResponse)
    MergeFrom(*source);
  }
}

void delMsgResponse::MergeFrom(const delMsgResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.delMsgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::ChatMessageProto::ResultCode::MergeFrom(from._internal_result());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void delMsgResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatMessageProto.delMsgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void delMsgResponse::CopyFrom(const delMsgResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.delMsgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool delMsgResponse::IsInitialized() const {
  return true;
}

void delMsgResponse::InternalSwap(delMsgResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata delMsgResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void queryMsgRequest::InitAsDefaultInstance() {
}
class queryMsgRequest::_Internal {
 public:
};

queryMsgRequest::queryMsgRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatMessageProto.queryMsgRequest)
}
queryMsgRequest::queryMsgRequest(const queryMsgRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  recvname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recvname().empty()) {
    recvname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.recvname_);
  }
  sendname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sendname().empty()) {
    sendname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sendname_);
  }
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.queryMsgRequest)
}

void queryMsgRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_queryMsgRequest_ChatMsg_2eproto.base);
  recvname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sendname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

queryMsgRequest::~queryMsgRequest() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.queryMsgRequest)
  SharedDtor();
}

void queryMsgRequest::SharedDtor() {
  recvname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sendname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void queryMsgRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const queryMsgRequest& queryMsgRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_queryMsgRequest_ChatMsg_2eproto.base);
  return *internal_default_instance();
}


void queryMsgRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.queryMsgRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recvname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sendname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* queryMsgRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes recvname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_recvname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sendname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sendname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* queryMsgRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.queryMsgRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes recvname = 1;
  if (this->recvname().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_recvname(), target);
  }

  // bytes sendname = 2;
  if (this->sendname().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_sendname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.queryMsgRequest)
  return target;
}

size_t queryMsgRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.queryMsgRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes recvname = 1;
  if (this->recvname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_recvname());
  }

  // bytes sendname = 2;
  if (this->sendname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sendname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void queryMsgRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatMessageProto.queryMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const queryMsgRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<queryMsgRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatMessageProto.queryMsgRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatMessageProto.queryMsgRequest)
    MergeFrom(*source);
  }
}

void queryMsgRequest::MergeFrom(const queryMsgRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.queryMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.recvname().size() > 0) {

    recvname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.recvname_);
  }
  if (from.sendname().size() > 0) {

    sendname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sendname_);
  }
}

void queryMsgRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatMessageProto.queryMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryMsgRequest::CopyFrom(const queryMsgRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.queryMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryMsgRequest::IsInitialized() const {
  return true;
}

void queryMsgRequest::InternalSwap(queryMsgRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  recvname_.Swap(&other->recvname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sendname_.Swap(&other->sendname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata queryMsgRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void queryMsgResponse::InitAsDefaultInstance() {
  ::ChatMessageProto::_queryMsgResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::ChatMessageProto::ResultCode*>(
      ::ChatMessageProto::ResultCode::internal_default_instance());
}
class queryMsgResponse::_Internal {
 public:
  static const ::ChatMessageProto::ResultCode& result(const queryMsgResponse* msg);
};

const ::ChatMessageProto::ResultCode&
queryMsgResponse::_Internal::result(const queryMsgResponse* msg) {
  return *msg->result_;
}
queryMsgResponse::queryMsgResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatMessageProto.queryMsgResponse)
}
queryMsgResponse::queryMsgResponse(const queryMsgResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      msg_(from.msg_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::ChatMessageProto::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.queryMsgResponse)
}

void queryMsgResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_queryMsgResponse_ChatMsg_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&result_)) + sizeof(success_));
}

queryMsgResponse::~queryMsgResponse() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.queryMsgResponse)
  SharedDtor();
}

void queryMsgResponse::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void queryMsgResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const queryMsgResponse& queryMsgResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_queryMsgResponse_ChatMsg_2eproto.base);
  return *internal_default_instance();
}


void queryMsgResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.queryMsgResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.Clear();
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear();
}

const char* queryMsgResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ChatMessageProto.chatMsg Msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_msg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .ChatMessageProto.ResultCode result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* queryMsgResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.queryMsgResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ChatMessageProto.chatMsg Msg = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_msg_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_msg(i), target, stream);
  }

  // .ChatMessageProto.ResultCode result = 2;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::result(this), target, stream);
  }

  // bool success = 3;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.queryMsgResponse)
  return target;
}

size_t queryMsgResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.queryMsgResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ChatMessageProto.chatMsg Msg = 1;
  total_size += 1UL * this->_internal_msg_size();
  for (const auto& msg : this->msg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ChatMessageProto.ResultCode result = 2;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // bool success = 3;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void queryMsgResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatMessageProto.queryMsgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const queryMsgResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<queryMsgResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatMessageProto.queryMsgResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatMessageProto.queryMsgResponse)
    MergeFrom(*source);
  }
}

void queryMsgResponse::MergeFrom(const queryMsgResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.queryMsgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msg_.MergeFrom(from.msg_);
  if (from.has_result()) {
    _internal_mutable_result()->::ChatMessageProto::ResultCode::MergeFrom(from._internal_result());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void queryMsgResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatMessageProto.queryMsgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryMsgResponse::CopyFrom(const queryMsgResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.queryMsgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryMsgResponse::IsInitialized() const {
  return true;
}

void queryMsgResponse::InternalSwap(queryMsgResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.InternalSwap(&other->msg_);
  swap(result_, other->result_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata queryMsgResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void groupChatMsg::InitAsDefaultInstance() {
}
class groupChatMsg::_Internal {
 public:
};

groupChatMsg::groupChatMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatMessageProto.groupChatMsg)
}
groupChatMsg::groupChatMsg(const groupChatMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  groupname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_groupname().empty()) {
    groupname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.groupname_);
  }
  sendname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sendname().empty()) {
    sendname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sendname_);
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  msgid_ = from.msgid_;
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.groupChatMsg)
}

void groupChatMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_groupChatMsg_ChatMsg_2eproto.base);
  groupname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sendname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msgid_ = 0;
}

groupChatMsg::~groupChatMsg() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.groupChatMsg)
  SharedDtor();
}

void groupChatMsg::SharedDtor() {
  groupname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sendname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void groupChatMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const groupChatMsg& groupChatMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_groupChatMsg_ChatMsg_2eproto.base);
  return *internal_default_instance();
}


void groupChatMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.groupChatMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groupname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sendname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msgid_ = 0;
  _internal_metadata_.Clear();
}

const char* groupChatMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 msgid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          msgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes groupname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_groupname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sendname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sendname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* groupChatMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.groupChatMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msgid = 1;
  if (this->msgid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_msgid(), target);
  }

  // bytes groupname = 2;
  if (this->groupname().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_groupname(), target);
  }

  // bytes sendname = 3;
  if (this->sendname().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_sendname(), target);
  }

  // bytes message = 4;
  if (this->message().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.groupChatMsg)
  return target;
}

size_t groupChatMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.groupChatMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes groupname = 2;
  if (this->groupname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_groupname());
  }

  // bytes sendname = 3;
  if (this->sendname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sendname());
  }

  // bytes message = 4;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());
  }

  // int32 msgid = 1;
  if (this->msgid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_msgid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void groupChatMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatMessageProto.groupChatMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const groupChatMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<groupChatMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatMessageProto.groupChatMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatMessageProto.groupChatMsg)
    MergeFrom(*source);
  }
}

void groupChatMsg::MergeFrom(const groupChatMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.groupChatMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.groupname().size() > 0) {

    groupname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.groupname_);
  }
  if (from.sendname().size() > 0) {

    sendname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sendname_);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.msgid() != 0) {
    _internal_set_msgid(from._internal_msgid());
  }
}

void groupChatMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatMessageProto.groupChatMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void groupChatMsg::CopyFrom(const groupChatMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.groupChatMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool groupChatMsg::IsInitialized() const {
  return true;
}

void groupChatMsg::InternalSwap(groupChatMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  groupname_.Swap(&other->groupname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sendname_.Swap(&other->sendname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(msgid_, other->msgid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata groupChatMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void addGroupMsgRequest::InitAsDefaultInstance() {
  ::ChatMessageProto::_addGroupMsgRequest_default_instance_._instance.get_mutable()->groupmsg_ = const_cast< ::ChatMessageProto::groupChatMsg*>(
      ::ChatMessageProto::groupChatMsg::internal_default_instance());
}
class addGroupMsgRequest::_Internal {
 public:
  static const ::ChatMessageProto::groupChatMsg& groupmsg(const addGroupMsgRequest* msg);
};

const ::ChatMessageProto::groupChatMsg&
addGroupMsgRequest::_Internal::groupmsg(const addGroupMsgRequest* msg) {
  return *msg->groupmsg_;
}
addGroupMsgRequest::addGroupMsgRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatMessageProto.addGroupMsgRequest)
}
addGroupMsgRequest::addGroupMsgRequest(const addGroupMsgRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_groupmsg()) {
    groupmsg_ = new ::ChatMessageProto::groupChatMsg(*from.groupmsg_);
  } else {
    groupmsg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.addGroupMsgRequest)
}

void addGroupMsgRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_addGroupMsgRequest_ChatMsg_2eproto.base);
  groupmsg_ = nullptr;
}

addGroupMsgRequest::~addGroupMsgRequest() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.addGroupMsgRequest)
  SharedDtor();
}

void addGroupMsgRequest::SharedDtor() {
  if (this != internal_default_instance()) delete groupmsg_;
}

void addGroupMsgRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const addGroupMsgRequest& addGroupMsgRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_addGroupMsgRequest_ChatMsg_2eproto.base);
  return *internal_default_instance();
}


void addGroupMsgRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.addGroupMsgRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && groupmsg_ != nullptr) {
    delete groupmsg_;
  }
  groupmsg_ = nullptr;
  _internal_metadata_.Clear();
}

const char* addGroupMsgRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ChatMessageProto.groupChatMsg GroupMsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_groupmsg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* addGroupMsgRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.addGroupMsgRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ChatMessageProto.groupChatMsg GroupMsg = 1;
  if (this->has_groupmsg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::groupmsg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.addGroupMsgRequest)
  return target;
}

size_t addGroupMsgRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.addGroupMsgRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ChatMessageProto.groupChatMsg GroupMsg = 1;
  if (this->has_groupmsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *groupmsg_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void addGroupMsgRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatMessageProto.addGroupMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const addGroupMsgRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<addGroupMsgRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatMessageProto.addGroupMsgRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatMessageProto.addGroupMsgRequest)
    MergeFrom(*source);
  }
}

void addGroupMsgRequest::MergeFrom(const addGroupMsgRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.addGroupMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_groupmsg()) {
    _internal_mutable_groupmsg()->::ChatMessageProto::groupChatMsg::MergeFrom(from._internal_groupmsg());
  }
}

void addGroupMsgRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatMessageProto.addGroupMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void addGroupMsgRequest::CopyFrom(const addGroupMsgRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.addGroupMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool addGroupMsgRequest::IsInitialized() const {
  return true;
}

void addGroupMsgRequest::InternalSwap(addGroupMsgRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(groupmsg_, other->groupmsg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata addGroupMsgRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void addGroupMsgResponse::InitAsDefaultInstance() {
  ::ChatMessageProto::_addGroupMsgResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::ChatMessageProto::ResultCode*>(
      ::ChatMessageProto::ResultCode::internal_default_instance());
}
class addGroupMsgResponse::_Internal {
 public:
  static const ::ChatMessageProto::ResultCode& result(const addGroupMsgResponse* msg);
};

const ::ChatMessageProto::ResultCode&
addGroupMsgResponse::_Internal::result(const addGroupMsgResponse* msg) {
  return *msg->result_;
}
addGroupMsgResponse::addGroupMsgResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatMessageProto.addGroupMsgResponse)
}
addGroupMsgResponse::addGroupMsgResponse(const addGroupMsgResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::ChatMessageProto::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.addGroupMsgResponse)
}

void addGroupMsgResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_addGroupMsgResponse_ChatMsg_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&result_)) + sizeof(success_));
}

addGroupMsgResponse::~addGroupMsgResponse() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.addGroupMsgResponse)
  SharedDtor();
}

void addGroupMsgResponse::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void addGroupMsgResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const addGroupMsgResponse& addGroupMsgResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_addGroupMsgResponse_ChatMsg_2eproto.base);
  return *internal_default_instance();
}


void addGroupMsgResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.addGroupMsgResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear();
}

const char* addGroupMsgResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ChatMessageProto.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* addGroupMsgResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.addGroupMsgResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ChatMessageProto.ResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.addGroupMsgResponse)
  return target;
}

size_t addGroupMsgResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.addGroupMsgResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ChatMessageProto.ResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void addGroupMsgResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatMessageProto.addGroupMsgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const addGroupMsgResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<addGroupMsgResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatMessageProto.addGroupMsgResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatMessageProto.addGroupMsgResponse)
    MergeFrom(*source);
  }
}

void addGroupMsgResponse::MergeFrom(const addGroupMsgResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.addGroupMsgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::ChatMessageProto::ResultCode::MergeFrom(from._internal_result());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void addGroupMsgResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatMessageProto.addGroupMsgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void addGroupMsgResponse::CopyFrom(const addGroupMsgResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.addGroupMsgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool addGroupMsgResponse::IsInitialized() const {
  return true;
}

void addGroupMsgResponse::InternalSwap(addGroupMsgResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata addGroupMsgResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void delGroupMsgRequest::InitAsDefaultInstance() {
  ::ChatMessageProto::_delGroupMsgRequest_default_instance_._instance.get_mutable()->groupmsg_ = const_cast< ::ChatMessageProto::groupChatMsg*>(
      ::ChatMessageProto::groupChatMsg::internal_default_instance());
}
class delGroupMsgRequest::_Internal {
 public:
  static const ::ChatMessageProto::groupChatMsg& groupmsg(const delGroupMsgRequest* msg);
};

const ::ChatMessageProto::groupChatMsg&
delGroupMsgRequest::_Internal::groupmsg(const delGroupMsgRequest* msg) {
  return *msg->groupmsg_;
}
delGroupMsgRequest::delGroupMsgRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatMessageProto.delGroupMsgRequest)
}
delGroupMsgRequest::delGroupMsgRequest(const delGroupMsgRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_groupmsg()) {
    groupmsg_ = new ::ChatMessageProto::groupChatMsg(*from.groupmsg_);
  } else {
    groupmsg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.delGroupMsgRequest)
}

void delGroupMsgRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_delGroupMsgRequest_ChatMsg_2eproto.base);
  groupmsg_ = nullptr;
}

delGroupMsgRequest::~delGroupMsgRequest() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.delGroupMsgRequest)
  SharedDtor();
}

void delGroupMsgRequest::SharedDtor() {
  if (this != internal_default_instance()) delete groupmsg_;
}

void delGroupMsgRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const delGroupMsgRequest& delGroupMsgRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_delGroupMsgRequest_ChatMsg_2eproto.base);
  return *internal_default_instance();
}


void delGroupMsgRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.delGroupMsgRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && groupmsg_ != nullptr) {
    delete groupmsg_;
  }
  groupmsg_ = nullptr;
  _internal_metadata_.Clear();
}

const char* delGroupMsgRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ChatMessageProto.groupChatMsg GroupMsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_groupmsg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* delGroupMsgRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.delGroupMsgRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ChatMessageProto.groupChatMsg GroupMsg = 1;
  if (this->has_groupmsg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::groupmsg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.delGroupMsgRequest)
  return target;
}

size_t delGroupMsgRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.delGroupMsgRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ChatMessageProto.groupChatMsg GroupMsg = 1;
  if (this->has_groupmsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *groupmsg_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void delGroupMsgRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatMessageProto.delGroupMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const delGroupMsgRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<delGroupMsgRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatMessageProto.delGroupMsgRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatMessageProto.delGroupMsgRequest)
    MergeFrom(*source);
  }
}

void delGroupMsgRequest::MergeFrom(const delGroupMsgRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.delGroupMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_groupmsg()) {
    _internal_mutable_groupmsg()->::ChatMessageProto::groupChatMsg::MergeFrom(from._internal_groupmsg());
  }
}

void delGroupMsgRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatMessageProto.delGroupMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void delGroupMsgRequest::CopyFrom(const delGroupMsgRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.delGroupMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool delGroupMsgRequest::IsInitialized() const {
  return true;
}

void delGroupMsgRequest::InternalSwap(delGroupMsgRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(groupmsg_, other->groupmsg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata delGroupMsgRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void delGroupMsgResponse::InitAsDefaultInstance() {
  ::ChatMessageProto::_delGroupMsgResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::ChatMessageProto::ResultCode*>(
      ::ChatMessageProto::ResultCode::internal_default_instance());
}
class delGroupMsgResponse::_Internal {
 public:
  static const ::ChatMessageProto::ResultCode& result(const delGroupMsgResponse* msg);
};

const ::ChatMessageProto::ResultCode&
delGroupMsgResponse::_Internal::result(const delGroupMsgResponse* msg) {
  return *msg->result_;
}
delGroupMsgResponse::delGroupMsgResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatMessageProto.delGroupMsgResponse)
}
delGroupMsgResponse::delGroupMsgResponse(const delGroupMsgResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::ChatMessageProto::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.delGroupMsgResponse)
}

void delGroupMsgResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_delGroupMsgResponse_ChatMsg_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&result_)) + sizeof(success_));
}

delGroupMsgResponse::~delGroupMsgResponse() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.delGroupMsgResponse)
  SharedDtor();
}

void delGroupMsgResponse::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void delGroupMsgResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const delGroupMsgResponse& delGroupMsgResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_delGroupMsgResponse_ChatMsg_2eproto.base);
  return *internal_default_instance();
}


void delGroupMsgResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.delGroupMsgResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear();
}

const char* delGroupMsgResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ChatMessageProto.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* delGroupMsgResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.delGroupMsgResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ChatMessageProto.ResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.delGroupMsgResponse)
  return target;
}

size_t delGroupMsgResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.delGroupMsgResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ChatMessageProto.ResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void delGroupMsgResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatMessageProto.delGroupMsgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const delGroupMsgResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<delGroupMsgResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatMessageProto.delGroupMsgResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatMessageProto.delGroupMsgResponse)
    MergeFrom(*source);
  }
}

void delGroupMsgResponse::MergeFrom(const delGroupMsgResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.delGroupMsgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::ChatMessageProto::ResultCode::MergeFrom(from._internal_result());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void delGroupMsgResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatMessageProto.delGroupMsgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void delGroupMsgResponse::CopyFrom(const delGroupMsgResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.delGroupMsgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool delGroupMsgResponse::IsInitialized() const {
  return true;
}

void delGroupMsgResponse::InternalSwap(delGroupMsgResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata delGroupMsgResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void queryGroupMsgRequest::InitAsDefaultInstance() {
}
class queryGroupMsgRequest::_Internal {
 public:
};

queryGroupMsgRequest::queryGroupMsgRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatMessageProto.queryGroupMsgRequest)
}
queryGroupMsgRequest::queryGroupMsgRequest(const queryGroupMsgRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.queryGroupMsgRequest)
}

void queryGroupMsgRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_queryGroupMsgRequest_ChatMsg_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

queryGroupMsgRequest::~queryGroupMsgRequest() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.queryGroupMsgRequest)
  SharedDtor();
}

void queryGroupMsgRequest::SharedDtor() {
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void queryGroupMsgRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const queryGroupMsgRequest& queryGroupMsgRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_queryGroupMsgRequest_ChatMsg_2eproto.base);
  return *internal_default_instance();
}


void queryGroupMsgRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.queryGroupMsgRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* queryGroupMsgRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* queryGroupMsgRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.queryGroupMsgRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes username = 1;
  if (this->username().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.queryGroupMsgRequest)
  return target;
}

size_t queryGroupMsgRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.queryGroupMsgRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_username());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void queryGroupMsgRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatMessageProto.queryGroupMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const queryGroupMsgRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<queryGroupMsgRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatMessageProto.queryGroupMsgRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatMessageProto.queryGroupMsgRequest)
    MergeFrom(*source);
  }
}

void queryGroupMsgRequest::MergeFrom(const queryGroupMsgRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.queryGroupMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
}

void queryGroupMsgRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatMessageProto.queryGroupMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryGroupMsgRequest::CopyFrom(const queryGroupMsgRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.queryGroupMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryGroupMsgRequest::IsInitialized() const {
  return true;
}

void queryGroupMsgRequest::InternalSwap(queryGroupMsgRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata queryGroupMsgRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void queryGroupMsgResponse::InitAsDefaultInstance() {
  ::ChatMessageProto::_queryGroupMsgResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::ChatMessageProto::ResultCode*>(
      ::ChatMessageProto::ResultCode::internal_default_instance());
}
class queryGroupMsgResponse::_Internal {
 public:
  static const ::ChatMessageProto::ResultCode& result(const queryGroupMsgResponse* msg);
};

const ::ChatMessageProto::ResultCode&
queryGroupMsgResponse::_Internal::result(const queryGroupMsgResponse* msg) {
  return *msg->result_;
}
queryGroupMsgResponse::queryGroupMsgResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatMessageProto.queryGroupMsgResponse)
}
queryGroupMsgResponse::queryGroupMsgResponse(const queryGroupMsgResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      groupmsg_(from.groupmsg_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::ChatMessageProto::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.queryGroupMsgResponse)
}

void queryGroupMsgResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_queryGroupMsgResponse_ChatMsg_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&result_)) + sizeof(success_));
}

queryGroupMsgResponse::~queryGroupMsgResponse() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.queryGroupMsgResponse)
  SharedDtor();
}

void queryGroupMsgResponse::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void queryGroupMsgResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const queryGroupMsgResponse& queryGroupMsgResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_queryGroupMsgResponse_ChatMsg_2eproto.base);
  return *internal_default_instance();
}


void queryGroupMsgResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.queryGroupMsgResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groupmsg_.Clear();
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear();
}

const char* queryGroupMsgResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ChatMessageProto.groupChatMsg GroupMsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_groupmsg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .ChatMessageProto.ResultCode result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* queryGroupMsgResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.queryGroupMsgResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ChatMessageProto.groupChatMsg GroupMsg = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_groupmsg_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_groupmsg(i), target, stream);
  }

  // .ChatMessageProto.ResultCode result = 2;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::result(this), target, stream);
  }

  // bool success = 3;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.queryGroupMsgResponse)
  return target;
}

size_t queryGroupMsgResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.queryGroupMsgResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ChatMessageProto.groupChatMsg GroupMsg = 1;
  total_size += 1UL * this->_internal_groupmsg_size();
  for (const auto& msg : this->groupmsg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ChatMessageProto.ResultCode result = 2;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // bool success = 3;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void queryGroupMsgResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatMessageProto.queryGroupMsgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const queryGroupMsgResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<queryGroupMsgResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatMessageProto.queryGroupMsgResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatMessageProto.queryGroupMsgResponse)
    MergeFrom(*source);
  }
}

void queryGroupMsgResponse::MergeFrom(const queryGroupMsgResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.queryGroupMsgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  groupmsg_.MergeFrom(from.groupmsg_);
  if (from.has_result()) {
    _internal_mutable_result()->::ChatMessageProto::ResultCode::MergeFrom(from._internal_result());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void queryGroupMsgResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatMessageProto.queryGroupMsgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryGroupMsgResponse::CopyFrom(const queryGroupMsgResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.queryGroupMsgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryGroupMsgResponse::IsInitialized() const {
  return true;
}

void queryGroupMsgResponse::InternalSwap(queryGroupMsgResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  groupmsg_.InternalSwap(&other->groupmsg_);
  swap(result_, other->result_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata queryGroupMsgResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void departChatMsg::InitAsDefaultInstance() {
}
class departChatMsg::_Internal {
 public:
};

departChatMsg::departChatMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatMessageProto.departChatMsg)
}
departChatMsg::departChatMsg(const departChatMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  departname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_departname().empty()) {
    departname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.departname_);
  }
  sendname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sendname().empty()) {
    sendname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sendname_);
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  msgid_ = from.msgid_;
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.departChatMsg)
}

void departChatMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_departChatMsg_ChatMsg_2eproto.base);
  departname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sendname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msgid_ = 0;
}

departChatMsg::~departChatMsg() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.departChatMsg)
  SharedDtor();
}

void departChatMsg::SharedDtor() {
  departname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sendname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void departChatMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const departChatMsg& departChatMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_departChatMsg_ChatMsg_2eproto.base);
  return *internal_default_instance();
}


void departChatMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.departChatMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  departname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sendname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msgid_ = 0;
  _internal_metadata_.Clear();
}

const char* departChatMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 msgid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          msgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes departname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_departname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sendname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sendname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* departChatMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.departChatMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msgid = 1;
  if (this->msgid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_msgid(), target);
  }

  // bytes departname = 2;
  if (this->departname().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_departname(), target);
  }

  // bytes sendname = 3;
  if (this->sendname().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_sendname(), target);
  }

  // bytes message = 4;
  if (this->message().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.departChatMsg)
  return target;
}

size_t departChatMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.departChatMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes departname = 2;
  if (this->departname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_departname());
  }

  // bytes sendname = 3;
  if (this->sendname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sendname());
  }

  // bytes message = 4;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());
  }

  // int32 msgid = 1;
  if (this->msgid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_msgid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void departChatMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatMessageProto.departChatMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const departChatMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<departChatMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatMessageProto.departChatMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatMessageProto.departChatMsg)
    MergeFrom(*source);
  }
}

void departChatMsg::MergeFrom(const departChatMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.departChatMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.departname().size() > 0) {

    departname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.departname_);
  }
  if (from.sendname().size() > 0) {

    sendname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sendname_);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.msgid() != 0) {
    _internal_set_msgid(from._internal_msgid());
  }
}

void departChatMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatMessageProto.departChatMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void departChatMsg::CopyFrom(const departChatMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.departChatMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool departChatMsg::IsInitialized() const {
  return true;
}

void departChatMsg::InternalSwap(departChatMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  departname_.Swap(&other->departname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sendname_.Swap(&other->sendname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(msgid_, other->msgid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata departChatMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void addDepartMsgRequest::InitAsDefaultInstance() {
  ::ChatMessageProto::_addDepartMsgRequest_default_instance_._instance.get_mutable()->departmsg_ = const_cast< ::ChatMessageProto::departChatMsg*>(
      ::ChatMessageProto::departChatMsg::internal_default_instance());
}
class addDepartMsgRequest::_Internal {
 public:
  static const ::ChatMessageProto::departChatMsg& departmsg(const addDepartMsgRequest* msg);
};

const ::ChatMessageProto::departChatMsg&
addDepartMsgRequest::_Internal::departmsg(const addDepartMsgRequest* msg) {
  return *msg->departmsg_;
}
addDepartMsgRequest::addDepartMsgRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatMessageProto.addDepartMsgRequest)
}
addDepartMsgRequest::addDepartMsgRequest(const addDepartMsgRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_departmsg()) {
    departmsg_ = new ::ChatMessageProto::departChatMsg(*from.departmsg_);
  } else {
    departmsg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.addDepartMsgRequest)
}

void addDepartMsgRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_addDepartMsgRequest_ChatMsg_2eproto.base);
  departmsg_ = nullptr;
}

addDepartMsgRequest::~addDepartMsgRequest() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.addDepartMsgRequest)
  SharedDtor();
}

void addDepartMsgRequest::SharedDtor() {
  if (this != internal_default_instance()) delete departmsg_;
}

void addDepartMsgRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const addDepartMsgRequest& addDepartMsgRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_addDepartMsgRequest_ChatMsg_2eproto.base);
  return *internal_default_instance();
}


void addDepartMsgRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.addDepartMsgRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && departmsg_ != nullptr) {
    delete departmsg_;
  }
  departmsg_ = nullptr;
  _internal_metadata_.Clear();
}

const char* addDepartMsgRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ChatMessageProto.departChatMsg DepartMsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_departmsg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* addDepartMsgRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.addDepartMsgRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ChatMessageProto.departChatMsg DepartMsg = 1;
  if (this->has_departmsg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::departmsg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.addDepartMsgRequest)
  return target;
}

size_t addDepartMsgRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.addDepartMsgRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ChatMessageProto.departChatMsg DepartMsg = 1;
  if (this->has_departmsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *departmsg_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void addDepartMsgRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatMessageProto.addDepartMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const addDepartMsgRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<addDepartMsgRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatMessageProto.addDepartMsgRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatMessageProto.addDepartMsgRequest)
    MergeFrom(*source);
  }
}

void addDepartMsgRequest::MergeFrom(const addDepartMsgRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.addDepartMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_departmsg()) {
    _internal_mutable_departmsg()->::ChatMessageProto::departChatMsg::MergeFrom(from._internal_departmsg());
  }
}

void addDepartMsgRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatMessageProto.addDepartMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void addDepartMsgRequest::CopyFrom(const addDepartMsgRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.addDepartMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool addDepartMsgRequest::IsInitialized() const {
  return true;
}

void addDepartMsgRequest::InternalSwap(addDepartMsgRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(departmsg_, other->departmsg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata addDepartMsgRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void addDepartMsgResponse::InitAsDefaultInstance() {
  ::ChatMessageProto::_addDepartMsgResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::ChatMessageProto::ResultCode*>(
      ::ChatMessageProto::ResultCode::internal_default_instance());
}
class addDepartMsgResponse::_Internal {
 public:
  static const ::ChatMessageProto::ResultCode& result(const addDepartMsgResponse* msg);
};

const ::ChatMessageProto::ResultCode&
addDepartMsgResponse::_Internal::result(const addDepartMsgResponse* msg) {
  return *msg->result_;
}
addDepartMsgResponse::addDepartMsgResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatMessageProto.addDepartMsgResponse)
}
addDepartMsgResponse::addDepartMsgResponse(const addDepartMsgResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::ChatMessageProto::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.addDepartMsgResponse)
}

void addDepartMsgResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_addDepartMsgResponse_ChatMsg_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&result_)) + sizeof(success_));
}

addDepartMsgResponse::~addDepartMsgResponse() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.addDepartMsgResponse)
  SharedDtor();
}

void addDepartMsgResponse::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void addDepartMsgResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const addDepartMsgResponse& addDepartMsgResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_addDepartMsgResponse_ChatMsg_2eproto.base);
  return *internal_default_instance();
}


void addDepartMsgResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.addDepartMsgResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear();
}

const char* addDepartMsgResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ChatMessageProto.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* addDepartMsgResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.addDepartMsgResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ChatMessageProto.ResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.addDepartMsgResponse)
  return target;
}

size_t addDepartMsgResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.addDepartMsgResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ChatMessageProto.ResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void addDepartMsgResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatMessageProto.addDepartMsgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const addDepartMsgResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<addDepartMsgResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatMessageProto.addDepartMsgResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatMessageProto.addDepartMsgResponse)
    MergeFrom(*source);
  }
}

void addDepartMsgResponse::MergeFrom(const addDepartMsgResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.addDepartMsgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::ChatMessageProto::ResultCode::MergeFrom(from._internal_result());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void addDepartMsgResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatMessageProto.addDepartMsgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void addDepartMsgResponse::CopyFrom(const addDepartMsgResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.addDepartMsgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool addDepartMsgResponse::IsInitialized() const {
  return true;
}

void addDepartMsgResponse::InternalSwap(addDepartMsgResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata addDepartMsgResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void delDepartMsgRequest::InitAsDefaultInstance() {
  ::ChatMessageProto::_delDepartMsgRequest_default_instance_._instance.get_mutable()->departmsg_ = const_cast< ::ChatMessageProto::departChatMsg*>(
      ::ChatMessageProto::departChatMsg::internal_default_instance());
}
class delDepartMsgRequest::_Internal {
 public:
  static const ::ChatMessageProto::departChatMsg& departmsg(const delDepartMsgRequest* msg);
};

const ::ChatMessageProto::departChatMsg&
delDepartMsgRequest::_Internal::departmsg(const delDepartMsgRequest* msg) {
  return *msg->departmsg_;
}
delDepartMsgRequest::delDepartMsgRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatMessageProto.delDepartMsgRequest)
}
delDepartMsgRequest::delDepartMsgRequest(const delDepartMsgRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_departmsg()) {
    departmsg_ = new ::ChatMessageProto::departChatMsg(*from.departmsg_);
  } else {
    departmsg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.delDepartMsgRequest)
}

void delDepartMsgRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_delDepartMsgRequest_ChatMsg_2eproto.base);
  departmsg_ = nullptr;
}

delDepartMsgRequest::~delDepartMsgRequest() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.delDepartMsgRequest)
  SharedDtor();
}

void delDepartMsgRequest::SharedDtor() {
  if (this != internal_default_instance()) delete departmsg_;
}

void delDepartMsgRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const delDepartMsgRequest& delDepartMsgRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_delDepartMsgRequest_ChatMsg_2eproto.base);
  return *internal_default_instance();
}


void delDepartMsgRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.delDepartMsgRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && departmsg_ != nullptr) {
    delete departmsg_;
  }
  departmsg_ = nullptr;
  _internal_metadata_.Clear();
}

const char* delDepartMsgRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ChatMessageProto.departChatMsg DepartMsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_departmsg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* delDepartMsgRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.delDepartMsgRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ChatMessageProto.departChatMsg DepartMsg = 1;
  if (this->has_departmsg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::departmsg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.delDepartMsgRequest)
  return target;
}

size_t delDepartMsgRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.delDepartMsgRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ChatMessageProto.departChatMsg DepartMsg = 1;
  if (this->has_departmsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *departmsg_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void delDepartMsgRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatMessageProto.delDepartMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const delDepartMsgRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<delDepartMsgRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatMessageProto.delDepartMsgRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatMessageProto.delDepartMsgRequest)
    MergeFrom(*source);
  }
}

void delDepartMsgRequest::MergeFrom(const delDepartMsgRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.delDepartMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_departmsg()) {
    _internal_mutable_departmsg()->::ChatMessageProto::departChatMsg::MergeFrom(from._internal_departmsg());
  }
}

void delDepartMsgRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatMessageProto.delDepartMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void delDepartMsgRequest::CopyFrom(const delDepartMsgRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.delDepartMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool delDepartMsgRequest::IsInitialized() const {
  return true;
}

void delDepartMsgRequest::InternalSwap(delDepartMsgRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(departmsg_, other->departmsg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata delDepartMsgRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void delDepartMsgResponse::InitAsDefaultInstance() {
  ::ChatMessageProto::_delDepartMsgResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::ChatMessageProto::ResultCode*>(
      ::ChatMessageProto::ResultCode::internal_default_instance());
}
class delDepartMsgResponse::_Internal {
 public:
  static const ::ChatMessageProto::ResultCode& result(const delDepartMsgResponse* msg);
};

const ::ChatMessageProto::ResultCode&
delDepartMsgResponse::_Internal::result(const delDepartMsgResponse* msg) {
  return *msg->result_;
}
delDepartMsgResponse::delDepartMsgResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatMessageProto.delDepartMsgResponse)
}
delDepartMsgResponse::delDepartMsgResponse(const delDepartMsgResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::ChatMessageProto::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.delDepartMsgResponse)
}

void delDepartMsgResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_delDepartMsgResponse_ChatMsg_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&result_)) + sizeof(success_));
}

delDepartMsgResponse::~delDepartMsgResponse() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.delDepartMsgResponse)
  SharedDtor();
}

void delDepartMsgResponse::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void delDepartMsgResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const delDepartMsgResponse& delDepartMsgResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_delDepartMsgResponse_ChatMsg_2eproto.base);
  return *internal_default_instance();
}


void delDepartMsgResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.delDepartMsgResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear();
}

const char* delDepartMsgResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ChatMessageProto.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* delDepartMsgResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.delDepartMsgResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ChatMessageProto.ResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.delDepartMsgResponse)
  return target;
}

size_t delDepartMsgResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.delDepartMsgResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ChatMessageProto.ResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void delDepartMsgResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatMessageProto.delDepartMsgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const delDepartMsgResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<delDepartMsgResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatMessageProto.delDepartMsgResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatMessageProto.delDepartMsgResponse)
    MergeFrom(*source);
  }
}

void delDepartMsgResponse::MergeFrom(const delDepartMsgResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.delDepartMsgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::ChatMessageProto::ResultCode::MergeFrom(from._internal_result());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void delDepartMsgResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatMessageProto.delDepartMsgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void delDepartMsgResponse::CopyFrom(const delDepartMsgResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.delDepartMsgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool delDepartMsgResponse::IsInitialized() const {
  return true;
}

void delDepartMsgResponse::InternalSwap(delDepartMsgResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata delDepartMsgResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void queryDepartMsgRequest::InitAsDefaultInstance() {
}
class queryDepartMsgRequest::_Internal {
 public:
};

queryDepartMsgRequest::queryDepartMsgRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatMessageProto.queryDepartMsgRequest)
}
queryDepartMsgRequest::queryDepartMsgRequest(const queryDepartMsgRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.queryDepartMsgRequest)
}

void queryDepartMsgRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_queryDepartMsgRequest_ChatMsg_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

queryDepartMsgRequest::~queryDepartMsgRequest() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.queryDepartMsgRequest)
  SharedDtor();
}

void queryDepartMsgRequest::SharedDtor() {
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void queryDepartMsgRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const queryDepartMsgRequest& queryDepartMsgRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_queryDepartMsgRequest_ChatMsg_2eproto.base);
  return *internal_default_instance();
}


void queryDepartMsgRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.queryDepartMsgRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* queryDepartMsgRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* queryDepartMsgRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.queryDepartMsgRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes username = 1;
  if (this->username().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.queryDepartMsgRequest)
  return target;
}

size_t queryDepartMsgRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.queryDepartMsgRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_username());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void queryDepartMsgRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatMessageProto.queryDepartMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const queryDepartMsgRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<queryDepartMsgRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatMessageProto.queryDepartMsgRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatMessageProto.queryDepartMsgRequest)
    MergeFrom(*source);
  }
}

void queryDepartMsgRequest::MergeFrom(const queryDepartMsgRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.queryDepartMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
}

void queryDepartMsgRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatMessageProto.queryDepartMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryDepartMsgRequest::CopyFrom(const queryDepartMsgRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.queryDepartMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryDepartMsgRequest::IsInitialized() const {
  return true;
}

void queryDepartMsgRequest::InternalSwap(queryDepartMsgRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata queryDepartMsgRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void queryDepartMsgResponse::InitAsDefaultInstance() {
  ::ChatMessageProto::_queryDepartMsgResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::ChatMessageProto::ResultCode*>(
      ::ChatMessageProto::ResultCode::internal_default_instance());
}
class queryDepartMsgResponse::_Internal {
 public:
  static const ::ChatMessageProto::ResultCode& result(const queryDepartMsgResponse* msg);
};

const ::ChatMessageProto::ResultCode&
queryDepartMsgResponse::_Internal::result(const queryDepartMsgResponse* msg) {
  return *msg->result_;
}
queryDepartMsgResponse::queryDepartMsgResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatMessageProto.queryDepartMsgResponse)
}
queryDepartMsgResponse::queryDepartMsgResponse(const queryDepartMsgResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      departmsg_(from.departmsg_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::ChatMessageProto::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.queryDepartMsgResponse)
}

void queryDepartMsgResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_queryDepartMsgResponse_ChatMsg_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&result_)) + sizeof(success_));
}

queryDepartMsgResponse::~queryDepartMsgResponse() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.queryDepartMsgResponse)
  SharedDtor();
}

void queryDepartMsgResponse::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void queryDepartMsgResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const queryDepartMsgResponse& queryDepartMsgResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_queryDepartMsgResponse_ChatMsg_2eproto.base);
  return *internal_default_instance();
}


void queryDepartMsgResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.queryDepartMsgResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  departmsg_.Clear();
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear();
}

const char* queryDepartMsgResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ChatMessageProto.departChatMsg DepartMsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_departmsg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .ChatMessageProto.ResultCode result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* queryDepartMsgResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.queryDepartMsgResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ChatMessageProto.departChatMsg DepartMsg = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_departmsg_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_departmsg(i), target, stream);
  }

  // .ChatMessageProto.ResultCode result = 2;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::result(this), target, stream);
  }

  // bool success = 3;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.queryDepartMsgResponse)
  return target;
}

size_t queryDepartMsgResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.queryDepartMsgResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ChatMessageProto.departChatMsg DepartMsg = 1;
  total_size += 1UL * this->_internal_departmsg_size();
  for (const auto& msg : this->departmsg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ChatMessageProto.ResultCode result = 2;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // bool success = 3;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void queryDepartMsgResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatMessageProto.queryDepartMsgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const queryDepartMsgResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<queryDepartMsgResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatMessageProto.queryDepartMsgResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatMessageProto.queryDepartMsgResponse)
    MergeFrom(*source);
  }
}

void queryDepartMsgResponse::MergeFrom(const queryDepartMsgResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.queryDepartMsgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  departmsg_.MergeFrom(from.departmsg_);
  if (from.has_result()) {
    _internal_mutable_result()->::ChatMessageProto::ResultCode::MergeFrom(from._internal_result());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void queryDepartMsgResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatMessageProto.queryDepartMsgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryDepartMsgResponse::CopyFrom(const queryDepartMsgResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.queryDepartMsgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryDepartMsgResponse::IsInitialized() const {
  return true;
}

void queryDepartMsgResponse::InternalSwap(queryDepartMsgResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  departmsg_.InternalSwap(&other->departmsg_);
  swap(result_, other->result_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata queryDepartMsgResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void queryOfflineMsgRequest::InitAsDefaultInstance() {
}
class queryOfflineMsgRequest::_Internal {
 public:
};

queryOfflineMsgRequest::queryOfflineMsgRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatMessageProto.queryOfflineMsgRequest)
}
queryOfflineMsgRequest::queryOfflineMsgRequest(const queryOfflineMsgRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  recvname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recvname().empty()) {
    recvname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.recvname_);
  }
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.queryOfflineMsgRequest)
}

void queryOfflineMsgRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_queryOfflineMsgRequest_ChatMsg_2eproto.base);
  recvname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

queryOfflineMsgRequest::~queryOfflineMsgRequest() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.queryOfflineMsgRequest)
  SharedDtor();
}

void queryOfflineMsgRequest::SharedDtor() {
  recvname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void queryOfflineMsgRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const queryOfflineMsgRequest& queryOfflineMsgRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_queryOfflineMsgRequest_ChatMsg_2eproto.base);
  return *internal_default_instance();
}


void queryOfflineMsgRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.queryOfflineMsgRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recvname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* queryOfflineMsgRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes recvname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_recvname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* queryOfflineMsgRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.queryOfflineMsgRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes recvname = 1;
  if (this->recvname().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_recvname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.queryOfflineMsgRequest)
  return target;
}

size_t queryOfflineMsgRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.queryOfflineMsgRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes recvname = 1;
  if (this->recvname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_recvname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void queryOfflineMsgRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatMessageProto.queryOfflineMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const queryOfflineMsgRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<queryOfflineMsgRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatMessageProto.queryOfflineMsgRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatMessageProto.queryOfflineMsgRequest)
    MergeFrom(*source);
  }
}

void queryOfflineMsgRequest::MergeFrom(const queryOfflineMsgRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.queryOfflineMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.recvname().size() > 0) {

    recvname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.recvname_);
  }
}

void queryOfflineMsgRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatMessageProto.queryOfflineMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryOfflineMsgRequest::CopyFrom(const queryOfflineMsgRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.queryOfflineMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryOfflineMsgRequest::IsInitialized() const {
  return true;
}

void queryOfflineMsgRequest::InternalSwap(queryOfflineMsgRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  recvname_.Swap(&other->recvname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata queryOfflineMsgRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void queryOfflineMsgResponse::InitAsDefaultInstance() {
  ::ChatMessageProto::_queryOfflineMsgResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::ChatMessageProto::ResultCode*>(
      ::ChatMessageProto::ResultCode::internal_default_instance());
}
class queryOfflineMsgResponse::_Internal {
 public:
  static const ::ChatMessageProto::ResultCode& result(const queryOfflineMsgResponse* msg);
};

const ::ChatMessageProto::ResultCode&
queryOfflineMsgResponse::_Internal::result(const queryOfflineMsgResponse* msg) {
  return *msg->result_;
}
queryOfflineMsgResponse::queryOfflineMsgResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatMessageProto.queryOfflineMsgResponse)
}
queryOfflineMsgResponse::queryOfflineMsgResponse(const queryOfflineMsgResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      msg_(from.msg_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::ChatMessageProto::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.queryOfflineMsgResponse)
}

void queryOfflineMsgResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_queryOfflineMsgResponse_ChatMsg_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&result_)) + sizeof(success_));
}

queryOfflineMsgResponse::~queryOfflineMsgResponse() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.queryOfflineMsgResponse)
  SharedDtor();
}

void queryOfflineMsgResponse::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void queryOfflineMsgResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const queryOfflineMsgResponse& queryOfflineMsgResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_queryOfflineMsgResponse_ChatMsg_2eproto.base);
  return *internal_default_instance();
}


void queryOfflineMsgResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.queryOfflineMsgResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.Clear();
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear();
}

const char* queryOfflineMsgResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ChatMessageProto.chatMsg Msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_msg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .ChatMessageProto.ResultCode result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* queryOfflineMsgResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.queryOfflineMsgResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ChatMessageProto.chatMsg Msg = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_msg_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_msg(i), target, stream);
  }

  // .ChatMessageProto.ResultCode result = 2;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::result(this), target, stream);
  }

  // bool success = 3;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.queryOfflineMsgResponse)
  return target;
}

size_t queryOfflineMsgResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.queryOfflineMsgResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ChatMessageProto.chatMsg Msg = 1;
  total_size += 1UL * this->_internal_msg_size();
  for (const auto& msg : this->msg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ChatMessageProto.ResultCode result = 2;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // bool success = 3;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void queryOfflineMsgResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatMessageProto.queryOfflineMsgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const queryOfflineMsgResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<queryOfflineMsgResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatMessageProto.queryOfflineMsgResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatMessageProto.queryOfflineMsgResponse)
    MergeFrom(*source);
  }
}

void queryOfflineMsgResponse::MergeFrom(const queryOfflineMsgResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.queryOfflineMsgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msg_.MergeFrom(from.msg_);
  if (from.has_result()) {
    _internal_mutable_result()->::ChatMessageProto::ResultCode::MergeFrom(from._internal_result());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void queryOfflineMsgResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatMessageProto.queryOfflineMsgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryOfflineMsgResponse::CopyFrom(const queryOfflineMsgResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.queryOfflineMsgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryOfflineMsgResponse::IsInitialized() const {
  return true;
}

void queryOfflineMsgResponse::InternalSwap(queryOfflineMsgResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.InternalSwap(&other->msg_);
  swap(result_, other->result_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata queryOfflineMsgResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

chatMsgRpc::~chatMsgRpc() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* chatMsgRpc::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ChatMsg_2eproto);
  return file_level_service_descriptors_ChatMsg_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* chatMsgRpc::GetDescriptor() {
  return descriptor();
}

void chatMsgRpc::AddChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::ChatMessageProto::addMsgRequest*,
                         ::ChatMessageProto::addMsgResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddChatMsg() not implemented.");
  done->Run();
}

void chatMsgRpc::DelChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::ChatMessageProto::delMsgRequest*,
                         ::ChatMessageProto::delMsgResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DelChatMsg() not implemented.");
  done->Run();
}

void chatMsgRpc::QueryChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::ChatMessageProto::queryMsgRequest*,
                         ::ChatMessageProto::queryMsgResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QueryChatMsg() not implemented.");
  done->Run();
}

void chatMsgRpc::QueryOfflineMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::ChatMessageProto::queryOfflineMsgRequest*,
                         ::ChatMessageProto::queryOfflineMsgResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QueryOfflineMsg() not implemented.");
  done->Run();
}

void chatMsgRpc::AddGroupChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::ChatMessageProto::addGroupMsgRequest*,
                         ::ChatMessageProto::addGroupMsgResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddGroupChatMsg() not implemented.");
  done->Run();
}

void chatMsgRpc::DelGroupChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::ChatMessageProto::delGroupMsgRequest*,
                         ::ChatMessageProto::delGroupMsgResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DelGroupChatMsg() not implemented.");
  done->Run();
}

void chatMsgRpc::QueryGroupChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::ChatMessageProto::queryGroupMsgRequest*,
                         ::ChatMessageProto::queryGroupMsgResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QueryGroupChatMsg() not implemented.");
  done->Run();
}

void chatMsgRpc::AddDepartChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::ChatMessageProto::addDepartMsgRequest*,
                         ::ChatMessageProto::addDepartMsgResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddDepartChatMsg() not implemented.");
  done->Run();
}

void chatMsgRpc::DelDepartChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::ChatMessageProto::delDepartMsgRequest*,
                         ::ChatMessageProto::delDepartMsgResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DelDepartChatMsg() not implemented.");
  done->Run();
}

void chatMsgRpc::QueryDepartChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::ChatMessageProto::queryDepartMsgRequest*,
                         ::ChatMessageProto::queryDepartMsgResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QueryDepartChatMsg() not implemented.");
  done->Run();
}

void chatMsgRpc::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_ChatMsg_2eproto[0]);
  switch(method->index()) {
    case 0:
      AddChatMsg(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::ChatMessageProto::addMsgRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::ChatMessageProto::addMsgResponse*>(
                 response),
             done);
      break;
    case 1:
      DelChatMsg(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::ChatMessageProto::delMsgRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::ChatMessageProto::delMsgResponse*>(
                 response),
             done);
      break;
    case 2:
      QueryChatMsg(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::ChatMessageProto::queryMsgRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::ChatMessageProto::queryMsgResponse*>(
                 response),
             done);
      break;
    case 3:
      QueryOfflineMsg(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::ChatMessageProto::queryOfflineMsgRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::ChatMessageProto::queryOfflineMsgResponse*>(
                 response),
             done);
      break;
    case 4:
      AddGroupChatMsg(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::ChatMessageProto::addGroupMsgRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::ChatMessageProto::addGroupMsgResponse*>(
                 response),
             done);
      break;
    case 5:
      DelGroupChatMsg(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::ChatMessageProto::delGroupMsgRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::ChatMessageProto::delGroupMsgResponse*>(
                 response),
             done);
      break;
    case 6:
      QueryGroupChatMsg(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::ChatMessageProto::queryGroupMsgRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::ChatMessageProto::queryGroupMsgResponse*>(
                 response),
             done);
      break;
    case 7:
      AddDepartChatMsg(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::ChatMessageProto::addDepartMsgRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::ChatMessageProto::addDepartMsgResponse*>(
                 response),
             done);
      break;
    case 8:
      DelDepartChatMsg(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::ChatMessageProto::delDepartMsgRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::ChatMessageProto::delDepartMsgResponse*>(
                 response),
             done);
      break;
    case 9:
      QueryDepartChatMsg(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::ChatMessageProto::queryDepartMsgRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::ChatMessageProto::queryDepartMsgResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& chatMsgRpc::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::ChatMessageProto::addMsgRequest::default_instance();
    case 1:
      return ::ChatMessageProto::delMsgRequest::default_instance();
    case 2:
      return ::ChatMessageProto::queryMsgRequest::default_instance();
    case 3:
      return ::ChatMessageProto::queryOfflineMsgRequest::default_instance();
    case 4:
      return ::ChatMessageProto::addGroupMsgRequest::default_instance();
    case 5:
      return ::ChatMessageProto::delGroupMsgRequest::default_instance();
    case 6:
      return ::ChatMessageProto::queryGroupMsgRequest::default_instance();
    case 7:
      return ::ChatMessageProto::addDepartMsgRequest::default_instance();
    case 8:
      return ::ChatMessageProto::delDepartMsgRequest::default_instance();
    case 9:
      return ::ChatMessageProto::queryDepartMsgRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& chatMsgRpc::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::ChatMessageProto::addMsgResponse::default_instance();
    case 1:
      return ::ChatMessageProto::delMsgResponse::default_instance();
    case 2:
      return ::ChatMessageProto::queryMsgResponse::default_instance();
    case 3:
      return ::ChatMessageProto::queryOfflineMsgResponse::default_instance();
    case 4:
      return ::ChatMessageProto::addGroupMsgResponse::default_instance();
    case 5:
      return ::ChatMessageProto::delGroupMsgResponse::default_instance();
    case 6:
      return ::ChatMessageProto::queryGroupMsgResponse::default_instance();
    case 7:
      return ::ChatMessageProto::addDepartMsgResponse::default_instance();
    case 8:
      return ::ChatMessageProto::delDepartMsgResponse::default_instance();
    case 9:
      return ::ChatMessageProto::queryDepartMsgResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

chatMsgRpc_Stub::chatMsgRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
chatMsgRpc_Stub::chatMsgRpc_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
chatMsgRpc_Stub::~chatMsgRpc_Stub() {
  if (owns_channel_) delete channel_;
}

void chatMsgRpc_Stub::AddChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::ChatMessageProto::addMsgRequest* request,
                              ::ChatMessageProto::addMsgResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void chatMsgRpc_Stub::DelChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::ChatMessageProto::delMsgRequest* request,
                              ::ChatMessageProto::delMsgResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void chatMsgRpc_Stub::QueryChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::ChatMessageProto::queryMsgRequest* request,
                              ::ChatMessageProto::queryMsgResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void chatMsgRpc_Stub::QueryOfflineMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::ChatMessageProto::queryOfflineMsgRequest* request,
                              ::ChatMessageProto::queryOfflineMsgResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void chatMsgRpc_Stub::AddGroupChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::ChatMessageProto::addGroupMsgRequest* request,
                              ::ChatMessageProto::addGroupMsgResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void chatMsgRpc_Stub::DelGroupChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::ChatMessageProto::delGroupMsgRequest* request,
                              ::ChatMessageProto::delGroupMsgResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void chatMsgRpc_Stub::QueryGroupChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::ChatMessageProto::queryGroupMsgRequest* request,
                              ::ChatMessageProto::queryGroupMsgResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void chatMsgRpc_Stub::AddDepartChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::ChatMessageProto::addDepartMsgRequest* request,
                              ::ChatMessageProto::addDepartMsgResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void chatMsgRpc_Stub::DelDepartChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::ChatMessageProto::delDepartMsgRequest* request,
                              ::ChatMessageProto::delDepartMsgResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void chatMsgRpc_Stub::QueryDepartChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::ChatMessageProto::queryDepartMsgRequest* request,
                              ::ChatMessageProto::queryDepartMsgResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ChatMessageProto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ChatMessageProto::ResultCode* Arena::CreateMaybeMessage< ::ChatMessageProto::ResultCode >(Arena* arena) {
  return Arena::CreateInternal< ::ChatMessageProto::ResultCode >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::chatMsg* Arena::CreateMaybeMessage< ::ChatMessageProto::chatMsg >(Arena* arena) {
  return Arena::CreateInternal< ::ChatMessageProto::chatMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::addMsgRequest* Arena::CreateMaybeMessage< ::ChatMessageProto::addMsgRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ChatMessageProto::addMsgRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::addMsgResponse* Arena::CreateMaybeMessage< ::ChatMessageProto::addMsgResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ChatMessageProto::addMsgResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::delMsgRequest* Arena::CreateMaybeMessage< ::ChatMessageProto::delMsgRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ChatMessageProto::delMsgRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::delMsgResponse* Arena::CreateMaybeMessage< ::ChatMessageProto::delMsgResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ChatMessageProto::delMsgResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::queryMsgRequest* Arena::CreateMaybeMessage< ::ChatMessageProto::queryMsgRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ChatMessageProto::queryMsgRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::queryMsgResponse* Arena::CreateMaybeMessage< ::ChatMessageProto::queryMsgResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ChatMessageProto::queryMsgResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::groupChatMsg* Arena::CreateMaybeMessage< ::ChatMessageProto::groupChatMsg >(Arena* arena) {
  return Arena::CreateInternal< ::ChatMessageProto::groupChatMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::addGroupMsgRequest* Arena::CreateMaybeMessage< ::ChatMessageProto::addGroupMsgRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ChatMessageProto::addGroupMsgRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::addGroupMsgResponse* Arena::CreateMaybeMessage< ::ChatMessageProto::addGroupMsgResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ChatMessageProto::addGroupMsgResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::delGroupMsgRequest* Arena::CreateMaybeMessage< ::ChatMessageProto::delGroupMsgRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ChatMessageProto::delGroupMsgRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::delGroupMsgResponse* Arena::CreateMaybeMessage< ::ChatMessageProto::delGroupMsgResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ChatMessageProto::delGroupMsgResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::queryGroupMsgRequest* Arena::CreateMaybeMessage< ::ChatMessageProto::queryGroupMsgRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ChatMessageProto::queryGroupMsgRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::queryGroupMsgResponse* Arena::CreateMaybeMessage< ::ChatMessageProto::queryGroupMsgResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ChatMessageProto::queryGroupMsgResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::departChatMsg* Arena::CreateMaybeMessage< ::ChatMessageProto::departChatMsg >(Arena* arena) {
  return Arena::CreateInternal< ::ChatMessageProto::departChatMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::addDepartMsgRequest* Arena::CreateMaybeMessage< ::ChatMessageProto::addDepartMsgRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ChatMessageProto::addDepartMsgRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::addDepartMsgResponse* Arena::CreateMaybeMessage< ::ChatMessageProto::addDepartMsgResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ChatMessageProto::addDepartMsgResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::delDepartMsgRequest* Arena::CreateMaybeMessage< ::ChatMessageProto::delDepartMsgRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ChatMessageProto::delDepartMsgRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::delDepartMsgResponse* Arena::CreateMaybeMessage< ::ChatMessageProto::delDepartMsgResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ChatMessageProto::delDepartMsgResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::queryDepartMsgRequest* Arena::CreateMaybeMessage< ::ChatMessageProto::queryDepartMsgRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ChatMessageProto::queryDepartMsgRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::queryDepartMsgResponse* Arena::CreateMaybeMessage< ::ChatMessageProto::queryDepartMsgResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ChatMessageProto::queryDepartMsgResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::queryOfflineMsgRequest* Arena::CreateMaybeMessage< ::ChatMessageProto::queryOfflineMsgRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ChatMessageProto::queryOfflineMsgRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::queryOfflineMsgResponse* Arena::CreateMaybeMessage< ::ChatMessageProto::queryOfflineMsgResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ChatMessageProto::queryOfflineMsgResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
