// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChatMsg.proto

#include "ChatMsg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ChatMessageProto {
constexpr ResultCode::ResultCode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : errmsg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , errcode_(0){}
struct ResultCodeDefaultTypeInternal {
  constexpr ResultCodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResultCodeDefaultTypeInternal() {}
  union {
    ResultCode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResultCodeDefaultTypeInternal _ResultCode_default_instance_;
constexpr chatMsg::chatMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : recvname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sendname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , isread_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , msgid_(0){}
struct chatMsgDefaultTypeInternal {
  constexpr chatMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~chatMsgDefaultTypeInternal() {}
  union {
    chatMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT chatMsgDefaultTypeInternal _chatMsg_default_instance_;
constexpr addMsgRequest::addMsgRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(nullptr){}
struct addMsgRequestDefaultTypeInternal {
  constexpr addMsgRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~addMsgRequestDefaultTypeInternal() {}
  union {
    addMsgRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT addMsgRequestDefaultTypeInternal _addMsgRequest_default_instance_;
constexpr addMsgResponse::addMsgResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(nullptr)
  , success_(false){}
struct addMsgResponseDefaultTypeInternal {
  constexpr addMsgResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~addMsgResponseDefaultTypeInternal() {}
  union {
    addMsgResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT addMsgResponseDefaultTypeInternal _addMsgResponse_default_instance_;
constexpr delMsgRequest::delMsgRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(nullptr){}
struct delMsgRequestDefaultTypeInternal {
  constexpr delMsgRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~delMsgRequestDefaultTypeInternal() {}
  union {
    delMsgRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT delMsgRequestDefaultTypeInternal _delMsgRequest_default_instance_;
constexpr delMsgResponse::delMsgResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(nullptr)
  , success_(false){}
struct delMsgResponseDefaultTypeInternal {
  constexpr delMsgResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~delMsgResponseDefaultTypeInternal() {}
  union {
    delMsgResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT delMsgResponseDefaultTypeInternal _delMsgResponse_default_instance_;
constexpr queryMsgRequest::queryMsgRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : recvname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sendname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct queryMsgRequestDefaultTypeInternal {
  constexpr queryMsgRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~queryMsgRequestDefaultTypeInternal() {}
  union {
    queryMsgRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT queryMsgRequestDefaultTypeInternal _queryMsgRequest_default_instance_;
constexpr queryMsgResponse::queryMsgResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_()
  , result_(nullptr)
  , success_(false){}
struct queryMsgResponseDefaultTypeInternal {
  constexpr queryMsgResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~queryMsgResponseDefaultTypeInternal() {}
  union {
    queryMsgResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT queryMsgResponseDefaultTypeInternal _queryMsgResponse_default_instance_;
constexpr groupChatMsg::groupChatMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : groupname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sendname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , msgid_(0){}
struct groupChatMsgDefaultTypeInternal {
  constexpr groupChatMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~groupChatMsgDefaultTypeInternal() {}
  union {
    groupChatMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT groupChatMsgDefaultTypeInternal _groupChatMsg_default_instance_;
constexpr addGroupMsgRequest::addGroupMsgRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : groupmsg_(nullptr){}
struct addGroupMsgRequestDefaultTypeInternal {
  constexpr addGroupMsgRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~addGroupMsgRequestDefaultTypeInternal() {}
  union {
    addGroupMsgRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT addGroupMsgRequestDefaultTypeInternal _addGroupMsgRequest_default_instance_;
constexpr addGroupMsgResponse::addGroupMsgResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(nullptr)
  , success_(false){}
struct addGroupMsgResponseDefaultTypeInternal {
  constexpr addGroupMsgResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~addGroupMsgResponseDefaultTypeInternal() {}
  union {
    addGroupMsgResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT addGroupMsgResponseDefaultTypeInternal _addGroupMsgResponse_default_instance_;
constexpr delGroupMsgRequest::delGroupMsgRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : groupmsg_(nullptr){}
struct delGroupMsgRequestDefaultTypeInternal {
  constexpr delGroupMsgRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~delGroupMsgRequestDefaultTypeInternal() {}
  union {
    delGroupMsgRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT delGroupMsgRequestDefaultTypeInternal _delGroupMsgRequest_default_instance_;
constexpr delGroupMsgResponse::delGroupMsgResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(nullptr)
  , success_(false){}
struct delGroupMsgResponseDefaultTypeInternal {
  constexpr delGroupMsgResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~delGroupMsgResponseDefaultTypeInternal() {}
  union {
    delGroupMsgResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT delGroupMsgResponseDefaultTypeInternal _delGroupMsgResponse_default_instance_;
constexpr queryGroupMsgRequest::queryGroupMsgRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct queryGroupMsgRequestDefaultTypeInternal {
  constexpr queryGroupMsgRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~queryGroupMsgRequestDefaultTypeInternal() {}
  union {
    queryGroupMsgRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT queryGroupMsgRequestDefaultTypeInternal _queryGroupMsgRequest_default_instance_;
constexpr queryGroupMsgResponse::queryGroupMsgResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : groupmsg_()
  , result_(nullptr)
  , success_(false){}
struct queryGroupMsgResponseDefaultTypeInternal {
  constexpr queryGroupMsgResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~queryGroupMsgResponseDefaultTypeInternal() {}
  union {
    queryGroupMsgResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT queryGroupMsgResponseDefaultTypeInternal _queryGroupMsgResponse_default_instance_;
constexpr departChatMsg::departChatMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : departname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sendname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , msgid_(0){}
struct departChatMsgDefaultTypeInternal {
  constexpr departChatMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~departChatMsgDefaultTypeInternal() {}
  union {
    departChatMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT departChatMsgDefaultTypeInternal _departChatMsg_default_instance_;
constexpr addDepartMsgRequest::addDepartMsgRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : departmsg_(nullptr){}
struct addDepartMsgRequestDefaultTypeInternal {
  constexpr addDepartMsgRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~addDepartMsgRequestDefaultTypeInternal() {}
  union {
    addDepartMsgRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT addDepartMsgRequestDefaultTypeInternal _addDepartMsgRequest_default_instance_;
constexpr addDepartMsgResponse::addDepartMsgResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(nullptr)
  , success_(false){}
struct addDepartMsgResponseDefaultTypeInternal {
  constexpr addDepartMsgResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~addDepartMsgResponseDefaultTypeInternal() {}
  union {
    addDepartMsgResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT addDepartMsgResponseDefaultTypeInternal _addDepartMsgResponse_default_instance_;
constexpr delDepartMsgRequest::delDepartMsgRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : departmsg_(nullptr){}
struct delDepartMsgRequestDefaultTypeInternal {
  constexpr delDepartMsgRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~delDepartMsgRequestDefaultTypeInternal() {}
  union {
    delDepartMsgRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT delDepartMsgRequestDefaultTypeInternal _delDepartMsgRequest_default_instance_;
constexpr delDepartMsgResponse::delDepartMsgResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(nullptr)
  , success_(false){}
struct delDepartMsgResponseDefaultTypeInternal {
  constexpr delDepartMsgResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~delDepartMsgResponseDefaultTypeInternal() {}
  union {
    delDepartMsgResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT delDepartMsgResponseDefaultTypeInternal _delDepartMsgResponse_default_instance_;
constexpr queryDepartMsgRequest::queryDepartMsgRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct queryDepartMsgRequestDefaultTypeInternal {
  constexpr queryDepartMsgRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~queryDepartMsgRequestDefaultTypeInternal() {}
  union {
    queryDepartMsgRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT queryDepartMsgRequestDefaultTypeInternal _queryDepartMsgRequest_default_instance_;
constexpr queryDepartMsgResponse::queryDepartMsgResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : departmsg_()
  , result_(nullptr)
  , success_(false){}
struct queryDepartMsgResponseDefaultTypeInternal {
  constexpr queryDepartMsgResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~queryDepartMsgResponseDefaultTypeInternal() {}
  union {
    queryDepartMsgResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT queryDepartMsgResponseDefaultTypeInternal _queryDepartMsgResponse_default_instance_;
constexpr queryOfflineMsgRequest::queryOfflineMsgRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : recvname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct queryOfflineMsgRequestDefaultTypeInternal {
  constexpr queryOfflineMsgRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~queryOfflineMsgRequestDefaultTypeInternal() {}
  union {
    queryOfflineMsgRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT queryOfflineMsgRequestDefaultTypeInternal _queryOfflineMsgRequest_default_instance_;
constexpr queryOfflineMsgResponse::queryOfflineMsgResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_()
  , result_(nullptr)
  , success_(false){}
struct queryOfflineMsgResponseDefaultTypeInternal {
  constexpr queryOfflineMsgResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~queryOfflineMsgResponseDefaultTypeInternal() {}
  union {
    queryOfflineMsgResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT queryOfflineMsgResponseDefaultTypeInternal _queryOfflineMsgResponse_default_instance_;
}  // namespace ChatMessageProto
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ChatMsg_2eproto[24];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ChatMsg_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_ChatMsg_2eproto[1];

const uint32_t TableStruct_ChatMsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::ResultCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::ResultCode, errcode_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::ResultCode, errmsg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::chatMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::chatMsg, msgid_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::chatMsg, recvname_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::chatMsg, sendname_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::chatMsg, message_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::chatMsg, isread_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::addMsgRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::addMsgRequest, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::addMsgResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::addMsgResponse, result_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::addMsgResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::delMsgRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::delMsgRequest, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::delMsgResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::delMsgResponse, result_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::delMsgResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryMsgRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryMsgRequest, recvname_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryMsgRequest, sendname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryMsgResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryMsgResponse, msg_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryMsgResponse, result_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryMsgResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::groupChatMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::groupChatMsg, msgid_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::groupChatMsg, groupname_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::groupChatMsg, sendname_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::groupChatMsg, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::addGroupMsgRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::addGroupMsgRequest, groupmsg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::addGroupMsgResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::addGroupMsgResponse, result_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::addGroupMsgResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::delGroupMsgRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::delGroupMsgRequest, groupmsg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::delGroupMsgResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::delGroupMsgResponse, result_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::delGroupMsgResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryGroupMsgRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryGroupMsgRequest, username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryGroupMsgResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryGroupMsgResponse, groupmsg_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryGroupMsgResponse, result_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryGroupMsgResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::departChatMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::departChatMsg, msgid_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::departChatMsg, departname_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::departChatMsg, sendname_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::departChatMsg, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::addDepartMsgRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::addDepartMsgRequest, departmsg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::addDepartMsgResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::addDepartMsgResponse, result_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::addDepartMsgResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::delDepartMsgRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::delDepartMsgRequest, departmsg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::delDepartMsgResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::delDepartMsgResponse, result_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::delDepartMsgResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryDepartMsgRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryDepartMsgRequest, username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryDepartMsgResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryDepartMsgResponse, departmsg_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryDepartMsgResponse, result_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryDepartMsgResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryOfflineMsgRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryOfflineMsgRequest, recvname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryOfflineMsgResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryOfflineMsgResponse, msg_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryOfflineMsgResponse, result_),
  PROTOBUF_FIELD_OFFSET(::ChatMessageProto::queryOfflineMsgResponse, success_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ChatMessageProto::ResultCode)},
  { 8, -1, -1, sizeof(::ChatMessageProto::chatMsg)},
  { 19, -1, -1, sizeof(::ChatMessageProto::addMsgRequest)},
  { 26, -1, -1, sizeof(::ChatMessageProto::addMsgResponse)},
  { 34, -1, -1, sizeof(::ChatMessageProto::delMsgRequest)},
  { 41, -1, -1, sizeof(::ChatMessageProto::delMsgResponse)},
  { 49, -1, -1, sizeof(::ChatMessageProto::queryMsgRequest)},
  { 57, -1, -1, sizeof(::ChatMessageProto::queryMsgResponse)},
  { 66, -1, -1, sizeof(::ChatMessageProto::groupChatMsg)},
  { 76, -1, -1, sizeof(::ChatMessageProto::addGroupMsgRequest)},
  { 83, -1, -1, sizeof(::ChatMessageProto::addGroupMsgResponse)},
  { 91, -1, -1, sizeof(::ChatMessageProto::delGroupMsgRequest)},
  { 98, -1, -1, sizeof(::ChatMessageProto::delGroupMsgResponse)},
  { 106, -1, -1, sizeof(::ChatMessageProto::queryGroupMsgRequest)},
  { 113, -1, -1, sizeof(::ChatMessageProto::queryGroupMsgResponse)},
  { 122, -1, -1, sizeof(::ChatMessageProto::departChatMsg)},
  { 132, -1, -1, sizeof(::ChatMessageProto::addDepartMsgRequest)},
  { 139, -1, -1, sizeof(::ChatMessageProto::addDepartMsgResponse)},
  { 147, -1, -1, sizeof(::ChatMessageProto::delDepartMsgRequest)},
  { 154, -1, -1, sizeof(::ChatMessageProto::delDepartMsgResponse)},
  { 162, -1, -1, sizeof(::ChatMessageProto::queryDepartMsgRequest)},
  { 169, -1, -1, sizeof(::ChatMessageProto::queryDepartMsgResponse)},
  { 178, -1, -1, sizeof(::ChatMessageProto::queryOfflineMsgRequest)},
  { 185, -1, -1, sizeof(::ChatMessageProto::queryOfflineMsgResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_ResultCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_chatMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_addMsgRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_addMsgResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_delMsgRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_delMsgResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_queryMsgRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_queryMsgResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_groupChatMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_addGroupMsgRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_addGroupMsgResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_delGroupMsgRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_delGroupMsgResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_queryGroupMsgRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_queryGroupMsgResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_departChatMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_addDepartMsgRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_addDepartMsgResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_delDepartMsgRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_delDepartMsgResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_queryDepartMsgRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_queryDepartMsgResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_queryOfflineMsgRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ChatMessageProto::_queryOfflineMsgResponse_default_instance_),
};

const char descriptor_table_protodef_ChatMsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rChatMsg.proto\022\020ChatMessageProto\"-\n\nRes"
  "ultCode\022\017\n\007errcode\030\001 \001(\005\022\016\n\006errmsg\030\002 \001(\014"
  "\"]\n\007chatMsg\022\r\n\005msgid\030\001 \001(\005\022\020\n\010recvname\030\002"
  " \001(\014\022\020\n\010sendname\030\003 \001(\014\022\017\n\007message\030\004 \001(\014\022"
  "\016\n\006isRead\030\005 \001(\014\"7\n\raddMsgRequest\022&\n\003Msg\030"
  "\001 \001(\0132\031.ChatMessageProto.chatMsg\"O\n\016addM"
  "sgResponse\022,\n\006result\030\001 \001(\0132\034.ChatMessage"
  "Proto.ResultCode\022\017\n\007success\030\002 \001(\010\"7\n\rdel"
  "MsgRequest\022&\n\003Msg\030\001 \001(\0132\031.ChatMessagePro"
  "to.chatMsg\"O\n\016delMsgResponse\022,\n\006result\030\001"
  " \001(\0132\034.ChatMessageProto.ResultCode\022\017\n\007su"
  "ccess\030\002 \001(\010\"5\n\017queryMsgRequest\022\020\n\010recvna"
  "me\030\001 \001(\014\022\020\n\010sendname\030\002 \001(\014\"y\n\020queryMsgRe"
  "sponse\022&\n\003Msg\030\001 \003(\0132\031.ChatMessageProto.c"
  "hatMsg\022,\n\006result\030\002 \001(\0132\034.ChatMessageProt"
  "o.ResultCode\022\017\n\007success\030\003 \001(\010\"S\n\014groupCh"
  "atMsg\022\r\n\005msgid\030\001 \001(\005\022\021\n\tgroupname\030\002 \001(\014\022"
  "\020\n\010sendname\030\003 \001(\014\022\017\n\007message\030\004 \001(\014\"F\n\022ad"
  "dGroupMsgRequest\0220\n\010GroupMsg\030\001 \001(\0132\036.Cha"
  "tMessageProto.groupChatMsg\"T\n\023addGroupMs"
  "gResponse\022,\n\006result\030\001 \001(\0132\034.ChatMessageP"
  "roto.ResultCode\022\017\n\007success\030\002 \001(\010\"F\n\022delG"
  "roupMsgRequest\0220\n\010GroupMsg\030\001 \001(\0132\036.ChatM"
  "essageProto.groupChatMsg\"T\n\023delGroupMsgR"
  "esponse\022,\n\006result\030\001 \001(\0132\034.ChatMessagePro"
  "to.ResultCode\022\017\n\007success\030\002 \001(\010\"(\n\024queryG"
  "roupMsgRequest\022\020\n\010username\030\001 \001(\014\"\210\001\n\025que"
  "ryGroupMsgResponse\0220\n\010GroupMsg\030\001 \003(\0132\036.C"
  "hatMessageProto.groupChatMsg\022,\n\006result\030\002"
  " \001(\0132\034.ChatMessageProto.ResultCode\022\017\n\007su"
  "ccess\030\003 \001(\010\"U\n\rdepartChatMsg\022\r\n\005msgid\030\001 "
  "\001(\005\022\022\n\ndepartname\030\002 \001(\014\022\020\n\010sendname\030\003 \001("
  "\014\022\017\n\007message\030\004 \001(\014\"I\n\023addDepartMsgReques"
  "t\0222\n\tDepartMsg\030\001 \001(\0132\037.ChatMessageProto."
  "departChatMsg\"U\n\024addDepartMsgResponse\022,\n"
  "\006result\030\001 \001(\0132\034.ChatMessageProto.ResultC"
  "ode\022\017\n\007success\030\002 \001(\010\"I\n\023delDepartMsgRequ"
  "est\0222\n\tDepartMsg\030\001 \001(\0132\037.ChatMessageProt"
  "o.departChatMsg\"U\n\024delDepartMsgResponse\022"
  ",\n\006result\030\001 \001(\0132\034.ChatMessageProto.Resul"
  "tCode\022\017\n\007success\030\002 \001(\010\")\n\025queryDepartMsg"
  "Request\022\020\n\010username\030\001 \001(\014\"\213\001\n\026queryDepar"
  "tMsgResponse\0222\n\tDepartMsg\030\001 \003(\0132\037.ChatMe"
  "ssageProto.departChatMsg\022,\n\006result\030\002 \001(\013"
  "2\034.ChatMessageProto.ResultCode\022\017\n\007succes"
  "s\030\003 \001(\010\"*\n\026queryOfflineMsgRequest\022\020\n\010rec"
  "vname\030\001 \001(\014\"\200\001\n\027queryOfflineMsgResponse\022"
  "&\n\003Msg\030\001 \003(\0132\031.ChatMessageProto.chatMsg\022"
  ",\n\006result\030\002 \001(\0132\034.ChatMessageProto.Resul"
  "tCode\022\017\n\007success\030\003 \001(\0102\302\007\n\nchatMsgRpc\022O\n"
  "\nAddChatMsg\022\037.ChatMessageProto.addMsgReq"
  "uest\032 .ChatMessageProto.addMsgResponse\022O"
  "\n\nDelChatMsg\022\037.ChatMessageProto.delMsgRe"
  "quest\032 .ChatMessageProto.delMsgResponse\022"
  "U\n\014QueryChatMsg\022!.ChatMessageProto.query"
  "MsgRequest\032\".ChatMessageProto.queryMsgRe"
  "sponse\022f\n\017QueryOfflineMsg\022(.ChatMessageP"
  "roto.queryOfflineMsgRequest\032).ChatMessag"
  "eProto.queryOfflineMsgResponse\022^\n\017AddGro"
  "upChatMsg\022$.ChatMessageProto.addGroupMsg"
  "Request\032%.ChatMessageProto.addGroupMsgRe"
  "sponse\022^\n\017DelGroupChatMsg\022$.ChatMessageP"
  "roto.delGroupMsgRequest\032%.ChatMessagePro"
  "to.delGroupMsgResponse\022d\n\021QueryGroupChat"
  "Msg\022&.ChatMessageProto.queryGroupMsgRequ"
  "est\032\'.ChatMessageProto.queryGroupMsgResp"
  "onse\022a\n\020AddDepartChatMsg\022%.ChatMessagePr"
  "oto.addDepartMsgRequest\032&.ChatMessagePro"
  "to.addDepartMsgResponse\022a\n\020DelDepartChat"
  "Msg\022%.ChatMessageProto.delDepartMsgReque"
  "st\032&.ChatMessageProto.delDepartMsgRespon"
  "se\022g\n\022QueryDepartChatMsg\022\'.ChatMessagePr"
  "oto.queryDepartMsgRequest\032(.ChatMessageP"
  "roto.queryDepartMsgResponseB\003\200\001\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ChatMsg_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ChatMsg_2eproto = {
  false, false, 2960, descriptor_table_protodef_ChatMsg_2eproto, "ChatMsg.proto", 
  &descriptor_table_ChatMsg_2eproto_once, nullptr, 0, 24,
  schemas, file_default_instances, TableStruct_ChatMsg_2eproto::offsets,
  file_level_metadata_ChatMsg_2eproto, file_level_enum_descriptors_ChatMsg_2eproto, file_level_service_descriptors_ChatMsg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ChatMsg_2eproto_getter() {
  return &descriptor_table_ChatMsg_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ChatMsg_2eproto(&descriptor_table_ChatMsg_2eproto);
namespace ChatMessageProto {

// ===================================================================

class ResultCode::_Internal {
 public:
};

ResultCode::ResultCode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ChatMessageProto.ResultCode)
}
ResultCode::ResultCode(const ResultCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errmsg().empty()) {
    errmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_errmsg(), 
      GetArenaForAllocation());
  }
  errcode_ = from.errcode_;
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.ResultCode)
}

inline void ResultCode::SharedCtor() {
errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
errcode_ = 0;
}

ResultCode::~ResultCode() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.ResultCode)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResultCode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  errmsg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResultCode::ArenaDtor(void* object) {
  ResultCode* _this = reinterpret_cast< ResultCode* >(object);
  (void)_this;
}
void ResultCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResultCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResultCode::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.ResultCode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errmsg_.ClearToEmpty();
  errcode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResultCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 errcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          errcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes errmsg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResultCode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.ResultCode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 errcode = 1;
  if (this->_internal_errcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_errcode(), target);
  }

  // bytes errmsg = 2;
  if (!this->_internal_errmsg().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_errmsg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.ResultCode)
  return target;
}

size_t ResultCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.ResultCode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes errmsg = 2;
  if (!this->_internal_errmsg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_errmsg());
  }

  // int32 errcode = 1;
  if (this->_internal_errcode() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_errcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResultCode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResultCode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResultCode::GetClassData() const { return &_class_data_; }

void ResultCode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResultCode *>(to)->MergeFrom(
      static_cast<const ResultCode &>(from));
}


void ResultCode::MergeFrom(const ResultCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.ResultCode)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_errmsg().empty()) {
    _internal_set_errmsg(from._internal_errmsg());
  }
  if (from._internal_errcode() != 0) {
    _internal_set_errcode(from._internal_errcode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResultCode::CopyFrom(const ResultCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.ResultCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultCode::IsInitialized() const {
  return true;
}

void ResultCode::InternalSwap(ResultCode* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &errmsg_, lhs_arena,
      &other->errmsg_, rhs_arena
  );
  swap(errcode_, other->errcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResultCode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ChatMsg_2eproto_getter, &descriptor_table_ChatMsg_2eproto_once,
      file_level_metadata_ChatMsg_2eproto[0]);
}

// ===================================================================

class chatMsg::_Internal {
 public:
};

chatMsg::chatMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ChatMessageProto.chatMsg)
}
chatMsg::chatMsg(const chatMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recvname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    recvname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_recvname().empty()) {
    recvname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recvname(), 
      GetArenaForAllocation());
  }
  sendname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sendname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sendname().empty()) {
    sendname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sendname(), 
      GetArenaForAllocation());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  isread_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    isread_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_isread().empty()) {
    isread_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_isread(), 
      GetArenaForAllocation());
  }
  msgid_ = from.msgid_;
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.chatMsg)
}

inline void chatMsg::SharedCtor() {
recvname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  recvname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sendname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sendname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
isread_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  isread_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
msgid_ = 0;
}

chatMsg::~chatMsg() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.chatMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void chatMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  recvname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sendname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  isread_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void chatMsg::ArenaDtor(void* object) {
  chatMsg* _this = reinterpret_cast< chatMsg* >(object);
  (void)_this;
}
void chatMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void chatMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void chatMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.chatMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recvname_.ClearToEmpty();
  sendname_.ClearToEmpty();
  message_.ClearToEmpty();
  isread_.ClearToEmpty();
  msgid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* chatMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 msgid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          msgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes recvname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_recvname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes sendname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sendname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes isRead = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_isread();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* chatMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.chatMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msgid = 1;
  if (this->_internal_msgid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_msgid(), target);
  }

  // bytes recvname = 2;
  if (!this->_internal_recvname().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_recvname(), target);
  }

  // bytes sendname = 3;
  if (!this->_internal_sendname().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_sendname(), target);
  }

  // bytes message = 4;
  if (!this->_internal_message().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_message(), target);
  }

  // bytes isRead = 5;
  if (!this->_internal_isread().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_isread(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.chatMsg)
  return target;
}

size_t chatMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.chatMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes recvname = 2;
  if (!this->_internal_recvname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_recvname());
  }

  // bytes sendname = 3;
  if (!this->_internal_sendname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sendname());
  }

  // bytes message = 4;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());
  }

  // bytes isRead = 5;
  if (!this->_internal_isread().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_isread());
  }

  // int32 msgid = 1;
  if (this->_internal_msgid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_msgid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData chatMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    chatMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*chatMsg::GetClassData() const { return &_class_data_; }

void chatMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<chatMsg *>(to)->MergeFrom(
      static_cast<const chatMsg &>(from));
}


void chatMsg::MergeFrom(const chatMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.chatMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_recvname().empty()) {
    _internal_set_recvname(from._internal_recvname());
  }
  if (!from._internal_sendname().empty()) {
    _internal_set_sendname(from._internal_sendname());
  }
  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (!from._internal_isread().empty()) {
    _internal_set_isread(from._internal_isread());
  }
  if (from._internal_msgid() != 0) {
    _internal_set_msgid(from._internal_msgid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void chatMsg::CopyFrom(const chatMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.chatMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chatMsg::IsInitialized() const {
  return true;
}

void chatMsg::InternalSwap(chatMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &recvname_, lhs_arena,
      &other->recvname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sendname_, lhs_arena,
      &other->sendname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &isread_, lhs_arena,
      &other->isread_, rhs_arena
  );
  swap(msgid_, other->msgid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata chatMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ChatMsg_2eproto_getter, &descriptor_table_ChatMsg_2eproto_once,
      file_level_metadata_ChatMsg_2eproto[1]);
}

// ===================================================================

class addMsgRequest::_Internal {
 public:
  static const ::ChatMessageProto::chatMsg& msg(const addMsgRequest* msg);
};

const ::ChatMessageProto::chatMsg&
addMsgRequest::_Internal::msg(const addMsgRequest* msg) {
  return *msg->msg_;
}
addMsgRequest::addMsgRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ChatMessageProto.addMsgRequest)
}
addMsgRequest::addMsgRequest(const addMsgRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_msg()) {
    msg_ = new ::ChatMessageProto::chatMsg(*from.msg_);
  } else {
    msg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.addMsgRequest)
}

inline void addMsgRequest::SharedCtor() {
msg_ = nullptr;
}

addMsgRequest::~addMsgRequest() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.addMsgRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void addMsgRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete msg_;
}

void addMsgRequest::ArenaDtor(void* object) {
  addMsgRequest* _this = reinterpret_cast< addMsgRequest* >(object);
  (void)_this;
}
void addMsgRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void addMsgRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void addMsgRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.addMsgRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && msg_ != nullptr) {
    delete msg_;
  }
  msg_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* addMsgRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ChatMessageProto.chatMsg Msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* addMsgRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.addMsgRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ChatMessageProto.chatMsg Msg = 1;
  if (this->_internal_has_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::msg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.addMsgRequest)
  return target;
}

size_t addMsgRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.addMsgRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ChatMessageProto.chatMsg Msg = 1;
  if (this->_internal_has_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData addMsgRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    addMsgRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*addMsgRequest::GetClassData() const { return &_class_data_; }

void addMsgRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<addMsgRequest *>(to)->MergeFrom(
      static_cast<const addMsgRequest &>(from));
}


void addMsgRequest::MergeFrom(const addMsgRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.addMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_msg()) {
    _internal_mutable_msg()->::ChatMessageProto::chatMsg::MergeFrom(from._internal_msg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void addMsgRequest::CopyFrom(const addMsgRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.addMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool addMsgRequest::IsInitialized() const {
  return true;
}

void addMsgRequest::InternalSwap(addMsgRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(msg_, other->msg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata addMsgRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ChatMsg_2eproto_getter, &descriptor_table_ChatMsg_2eproto_once,
      file_level_metadata_ChatMsg_2eproto[2]);
}

// ===================================================================

class addMsgResponse::_Internal {
 public:
  static const ::ChatMessageProto::ResultCode& result(const addMsgResponse* msg);
};

const ::ChatMessageProto::ResultCode&
addMsgResponse::_Internal::result(const addMsgResponse* msg) {
  return *msg->result_;
}
addMsgResponse::addMsgResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ChatMessageProto.addMsgResponse)
}
addMsgResponse::addMsgResponse(const addMsgResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::ChatMessageProto::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.addMsgResponse)
}

inline void addMsgResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&result_)) + sizeof(success_));
}

addMsgResponse::~addMsgResponse() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.addMsgResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void addMsgResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void addMsgResponse::ArenaDtor(void* object) {
  addMsgResponse* _this = reinterpret_cast< addMsgResponse* >(object);
  (void)_this;
}
void addMsgResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void addMsgResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void addMsgResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.addMsgResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* addMsgResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ChatMessageProto.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* addMsgResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.addMsgResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ChatMessageProto.ResultCode result = 1;
  if (this->_internal_has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.addMsgResponse)
  return target;
}

size_t addMsgResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.addMsgResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ChatMessageProto.ResultCode result = 1;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData addMsgResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    addMsgResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*addMsgResponse::GetClassData() const { return &_class_data_; }

void addMsgResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<addMsgResponse *>(to)->MergeFrom(
      static_cast<const addMsgResponse &>(from));
}


void addMsgResponse::MergeFrom(const addMsgResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.addMsgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_mutable_result()->::ChatMessageProto::ResultCode::MergeFrom(from._internal_result());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void addMsgResponse::CopyFrom(const addMsgResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.addMsgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool addMsgResponse::IsInitialized() const {
  return true;
}

void addMsgResponse::InternalSwap(addMsgResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(addMsgResponse, success_)
      + sizeof(addMsgResponse::success_)
      - PROTOBUF_FIELD_OFFSET(addMsgResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata addMsgResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ChatMsg_2eproto_getter, &descriptor_table_ChatMsg_2eproto_once,
      file_level_metadata_ChatMsg_2eproto[3]);
}

// ===================================================================

class delMsgRequest::_Internal {
 public:
  static const ::ChatMessageProto::chatMsg& msg(const delMsgRequest* msg);
};

const ::ChatMessageProto::chatMsg&
delMsgRequest::_Internal::msg(const delMsgRequest* msg) {
  return *msg->msg_;
}
delMsgRequest::delMsgRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ChatMessageProto.delMsgRequest)
}
delMsgRequest::delMsgRequest(const delMsgRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_msg()) {
    msg_ = new ::ChatMessageProto::chatMsg(*from.msg_);
  } else {
    msg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.delMsgRequest)
}

inline void delMsgRequest::SharedCtor() {
msg_ = nullptr;
}

delMsgRequest::~delMsgRequest() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.delMsgRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void delMsgRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete msg_;
}

void delMsgRequest::ArenaDtor(void* object) {
  delMsgRequest* _this = reinterpret_cast< delMsgRequest* >(object);
  (void)_this;
}
void delMsgRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void delMsgRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void delMsgRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.delMsgRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && msg_ != nullptr) {
    delete msg_;
  }
  msg_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* delMsgRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ChatMessageProto.chatMsg Msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* delMsgRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.delMsgRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ChatMessageProto.chatMsg Msg = 1;
  if (this->_internal_has_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::msg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.delMsgRequest)
  return target;
}

size_t delMsgRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.delMsgRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ChatMessageProto.chatMsg Msg = 1;
  if (this->_internal_has_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *msg_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData delMsgRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    delMsgRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*delMsgRequest::GetClassData() const { return &_class_data_; }

void delMsgRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<delMsgRequest *>(to)->MergeFrom(
      static_cast<const delMsgRequest &>(from));
}


void delMsgRequest::MergeFrom(const delMsgRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.delMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_msg()) {
    _internal_mutable_msg()->::ChatMessageProto::chatMsg::MergeFrom(from._internal_msg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void delMsgRequest::CopyFrom(const delMsgRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.delMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool delMsgRequest::IsInitialized() const {
  return true;
}

void delMsgRequest::InternalSwap(delMsgRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(msg_, other->msg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata delMsgRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ChatMsg_2eproto_getter, &descriptor_table_ChatMsg_2eproto_once,
      file_level_metadata_ChatMsg_2eproto[4]);
}

// ===================================================================

class delMsgResponse::_Internal {
 public:
  static const ::ChatMessageProto::ResultCode& result(const delMsgResponse* msg);
};

const ::ChatMessageProto::ResultCode&
delMsgResponse::_Internal::result(const delMsgResponse* msg) {
  return *msg->result_;
}
delMsgResponse::delMsgResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ChatMessageProto.delMsgResponse)
}
delMsgResponse::delMsgResponse(const delMsgResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::ChatMessageProto::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.delMsgResponse)
}

inline void delMsgResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&result_)) + sizeof(success_));
}

delMsgResponse::~delMsgResponse() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.delMsgResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void delMsgResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void delMsgResponse::ArenaDtor(void* object) {
  delMsgResponse* _this = reinterpret_cast< delMsgResponse* >(object);
  (void)_this;
}
void delMsgResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void delMsgResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void delMsgResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.delMsgResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* delMsgResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ChatMessageProto.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* delMsgResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.delMsgResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ChatMessageProto.ResultCode result = 1;
  if (this->_internal_has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.delMsgResponse)
  return target;
}

size_t delMsgResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.delMsgResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ChatMessageProto.ResultCode result = 1;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData delMsgResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    delMsgResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*delMsgResponse::GetClassData() const { return &_class_data_; }

void delMsgResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<delMsgResponse *>(to)->MergeFrom(
      static_cast<const delMsgResponse &>(from));
}


void delMsgResponse::MergeFrom(const delMsgResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.delMsgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_mutable_result()->::ChatMessageProto::ResultCode::MergeFrom(from._internal_result());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void delMsgResponse::CopyFrom(const delMsgResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.delMsgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool delMsgResponse::IsInitialized() const {
  return true;
}

void delMsgResponse::InternalSwap(delMsgResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(delMsgResponse, success_)
      + sizeof(delMsgResponse::success_)
      - PROTOBUF_FIELD_OFFSET(delMsgResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata delMsgResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ChatMsg_2eproto_getter, &descriptor_table_ChatMsg_2eproto_once,
      file_level_metadata_ChatMsg_2eproto[5]);
}

// ===================================================================

class queryMsgRequest::_Internal {
 public:
};

queryMsgRequest::queryMsgRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ChatMessageProto.queryMsgRequest)
}
queryMsgRequest::queryMsgRequest(const queryMsgRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recvname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    recvname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_recvname().empty()) {
    recvname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recvname(), 
      GetArenaForAllocation());
  }
  sendname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sendname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sendname().empty()) {
    sendname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sendname(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.queryMsgRequest)
}

inline void queryMsgRequest::SharedCtor() {
recvname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  recvname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sendname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sendname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

queryMsgRequest::~queryMsgRequest() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.queryMsgRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void queryMsgRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  recvname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sendname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void queryMsgRequest::ArenaDtor(void* object) {
  queryMsgRequest* _this = reinterpret_cast< queryMsgRequest* >(object);
  (void)_this;
}
void queryMsgRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void queryMsgRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void queryMsgRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.queryMsgRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recvname_.ClearToEmpty();
  sendname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* queryMsgRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes recvname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_recvname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes sendname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sendname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* queryMsgRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.queryMsgRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes recvname = 1;
  if (!this->_internal_recvname().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_recvname(), target);
  }

  // bytes sendname = 2;
  if (!this->_internal_sendname().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_sendname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.queryMsgRequest)
  return target;
}

size_t queryMsgRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.queryMsgRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes recvname = 1;
  if (!this->_internal_recvname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_recvname());
  }

  // bytes sendname = 2;
  if (!this->_internal_sendname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sendname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData queryMsgRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    queryMsgRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*queryMsgRequest::GetClassData() const { return &_class_data_; }

void queryMsgRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<queryMsgRequest *>(to)->MergeFrom(
      static_cast<const queryMsgRequest &>(from));
}


void queryMsgRequest::MergeFrom(const queryMsgRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.queryMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_recvname().empty()) {
    _internal_set_recvname(from._internal_recvname());
  }
  if (!from._internal_sendname().empty()) {
    _internal_set_sendname(from._internal_sendname());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void queryMsgRequest::CopyFrom(const queryMsgRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.queryMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryMsgRequest::IsInitialized() const {
  return true;
}

void queryMsgRequest::InternalSwap(queryMsgRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &recvname_, lhs_arena,
      &other->recvname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sendname_, lhs_arena,
      &other->sendname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata queryMsgRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ChatMsg_2eproto_getter, &descriptor_table_ChatMsg_2eproto_once,
      file_level_metadata_ChatMsg_2eproto[6]);
}

// ===================================================================

class queryMsgResponse::_Internal {
 public:
  static const ::ChatMessageProto::ResultCode& result(const queryMsgResponse* msg);
};

const ::ChatMessageProto::ResultCode&
queryMsgResponse::_Internal::result(const queryMsgResponse* msg) {
  return *msg->result_;
}
queryMsgResponse::queryMsgResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  msg_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ChatMessageProto.queryMsgResponse)
}
queryMsgResponse::queryMsgResponse(const queryMsgResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      msg_(from.msg_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::ChatMessageProto::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.queryMsgResponse)
}

inline void queryMsgResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&result_)) + sizeof(success_));
}

queryMsgResponse::~queryMsgResponse() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.queryMsgResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void queryMsgResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void queryMsgResponse::ArenaDtor(void* object) {
  queryMsgResponse* _this = reinterpret_cast< queryMsgResponse* >(object);
  (void)_this;
}
void queryMsgResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void queryMsgResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void queryMsgResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.queryMsgResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.Clear();
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* queryMsgResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ChatMessageProto.chatMsg Msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_msg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .ChatMessageProto.ResultCode result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* queryMsgResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.queryMsgResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ChatMessageProto.chatMsg Msg = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_msg_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_msg(i), target, stream);
  }

  // .ChatMessageProto.ResultCode result = 2;
  if (this->_internal_has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::result(this), target, stream);
  }

  // bool success = 3;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.queryMsgResponse)
  return target;
}

size_t queryMsgResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.queryMsgResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ChatMessageProto.chatMsg Msg = 1;
  total_size += 1UL * this->_internal_msg_size();
  for (const auto& msg : this->msg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ChatMessageProto.ResultCode result = 2;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // bool success = 3;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData queryMsgResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    queryMsgResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*queryMsgResponse::GetClassData() const { return &_class_data_; }

void queryMsgResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<queryMsgResponse *>(to)->MergeFrom(
      static_cast<const queryMsgResponse &>(from));
}


void queryMsgResponse::MergeFrom(const queryMsgResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.queryMsgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  msg_.MergeFrom(from.msg_);
  if (from._internal_has_result()) {
    _internal_mutable_result()->::ChatMessageProto::ResultCode::MergeFrom(from._internal_result());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void queryMsgResponse::CopyFrom(const queryMsgResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.queryMsgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryMsgResponse::IsInitialized() const {
  return true;
}

void queryMsgResponse::InternalSwap(queryMsgResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  msg_.InternalSwap(&other->msg_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(queryMsgResponse, success_)
      + sizeof(queryMsgResponse::success_)
      - PROTOBUF_FIELD_OFFSET(queryMsgResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata queryMsgResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ChatMsg_2eproto_getter, &descriptor_table_ChatMsg_2eproto_once,
      file_level_metadata_ChatMsg_2eproto[7]);
}

// ===================================================================

class groupChatMsg::_Internal {
 public:
};

groupChatMsg::groupChatMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ChatMessageProto.groupChatMsg)
}
groupChatMsg::groupChatMsg(const groupChatMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  groupname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    groupname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_groupname().empty()) {
    groupname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_groupname(), 
      GetArenaForAllocation());
  }
  sendname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sendname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sendname().empty()) {
    sendname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sendname(), 
      GetArenaForAllocation());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  msgid_ = from.msgid_;
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.groupChatMsg)
}

inline void groupChatMsg::SharedCtor() {
groupname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  groupname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sendname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sendname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
msgid_ = 0;
}

groupChatMsg::~groupChatMsg() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.groupChatMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void groupChatMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  groupname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sendname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void groupChatMsg::ArenaDtor(void* object) {
  groupChatMsg* _this = reinterpret_cast< groupChatMsg* >(object);
  (void)_this;
}
void groupChatMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void groupChatMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void groupChatMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.groupChatMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groupname_.ClearToEmpty();
  sendname_.ClearToEmpty();
  message_.ClearToEmpty();
  msgid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* groupChatMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 msgid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          msgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes groupname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_groupname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes sendname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sendname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* groupChatMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.groupChatMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msgid = 1;
  if (this->_internal_msgid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_msgid(), target);
  }

  // bytes groupname = 2;
  if (!this->_internal_groupname().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_groupname(), target);
  }

  // bytes sendname = 3;
  if (!this->_internal_sendname().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_sendname(), target);
  }

  // bytes message = 4;
  if (!this->_internal_message().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.groupChatMsg)
  return target;
}

size_t groupChatMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.groupChatMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes groupname = 2;
  if (!this->_internal_groupname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_groupname());
  }

  // bytes sendname = 3;
  if (!this->_internal_sendname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sendname());
  }

  // bytes message = 4;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());
  }

  // int32 msgid = 1;
  if (this->_internal_msgid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_msgid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData groupChatMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    groupChatMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*groupChatMsg::GetClassData() const { return &_class_data_; }

void groupChatMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<groupChatMsg *>(to)->MergeFrom(
      static_cast<const groupChatMsg &>(from));
}


void groupChatMsg::MergeFrom(const groupChatMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.groupChatMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_groupname().empty()) {
    _internal_set_groupname(from._internal_groupname());
  }
  if (!from._internal_sendname().empty()) {
    _internal_set_sendname(from._internal_sendname());
  }
  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_msgid() != 0) {
    _internal_set_msgid(from._internal_msgid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void groupChatMsg::CopyFrom(const groupChatMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.groupChatMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool groupChatMsg::IsInitialized() const {
  return true;
}

void groupChatMsg::InternalSwap(groupChatMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &groupname_, lhs_arena,
      &other->groupname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sendname_, lhs_arena,
      &other->sendname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  swap(msgid_, other->msgid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata groupChatMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ChatMsg_2eproto_getter, &descriptor_table_ChatMsg_2eproto_once,
      file_level_metadata_ChatMsg_2eproto[8]);
}

// ===================================================================

class addGroupMsgRequest::_Internal {
 public:
  static const ::ChatMessageProto::groupChatMsg& groupmsg(const addGroupMsgRequest* msg);
};

const ::ChatMessageProto::groupChatMsg&
addGroupMsgRequest::_Internal::groupmsg(const addGroupMsgRequest* msg) {
  return *msg->groupmsg_;
}
addGroupMsgRequest::addGroupMsgRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ChatMessageProto.addGroupMsgRequest)
}
addGroupMsgRequest::addGroupMsgRequest(const addGroupMsgRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_groupmsg()) {
    groupmsg_ = new ::ChatMessageProto::groupChatMsg(*from.groupmsg_);
  } else {
    groupmsg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.addGroupMsgRequest)
}

inline void addGroupMsgRequest::SharedCtor() {
groupmsg_ = nullptr;
}

addGroupMsgRequest::~addGroupMsgRequest() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.addGroupMsgRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void addGroupMsgRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete groupmsg_;
}

void addGroupMsgRequest::ArenaDtor(void* object) {
  addGroupMsgRequest* _this = reinterpret_cast< addGroupMsgRequest* >(object);
  (void)_this;
}
void addGroupMsgRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void addGroupMsgRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void addGroupMsgRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.addGroupMsgRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && groupmsg_ != nullptr) {
    delete groupmsg_;
  }
  groupmsg_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* addGroupMsgRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ChatMessageProto.groupChatMsg GroupMsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_groupmsg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* addGroupMsgRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.addGroupMsgRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ChatMessageProto.groupChatMsg GroupMsg = 1;
  if (this->_internal_has_groupmsg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::groupmsg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.addGroupMsgRequest)
  return target;
}

size_t addGroupMsgRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.addGroupMsgRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ChatMessageProto.groupChatMsg GroupMsg = 1;
  if (this->_internal_has_groupmsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *groupmsg_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData addGroupMsgRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    addGroupMsgRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*addGroupMsgRequest::GetClassData() const { return &_class_data_; }

void addGroupMsgRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<addGroupMsgRequest *>(to)->MergeFrom(
      static_cast<const addGroupMsgRequest &>(from));
}


void addGroupMsgRequest::MergeFrom(const addGroupMsgRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.addGroupMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_groupmsg()) {
    _internal_mutable_groupmsg()->::ChatMessageProto::groupChatMsg::MergeFrom(from._internal_groupmsg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void addGroupMsgRequest::CopyFrom(const addGroupMsgRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.addGroupMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool addGroupMsgRequest::IsInitialized() const {
  return true;
}

void addGroupMsgRequest::InternalSwap(addGroupMsgRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(groupmsg_, other->groupmsg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata addGroupMsgRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ChatMsg_2eproto_getter, &descriptor_table_ChatMsg_2eproto_once,
      file_level_metadata_ChatMsg_2eproto[9]);
}

// ===================================================================

class addGroupMsgResponse::_Internal {
 public:
  static const ::ChatMessageProto::ResultCode& result(const addGroupMsgResponse* msg);
};

const ::ChatMessageProto::ResultCode&
addGroupMsgResponse::_Internal::result(const addGroupMsgResponse* msg) {
  return *msg->result_;
}
addGroupMsgResponse::addGroupMsgResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ChatMessageProto.addGroupMsgResponse)
}
addGroupMsgResponse::addGroupMsgResponse(const addGroupMsgResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::ChatMessageProto::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.addGroupMsgResponse)
}

inline void addGroupMsgResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&result_)) + sizeof(success_));
}

addGroupMsgResponse::~addGroupMsgResponse() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.addGroupMsgResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void addGroupMsgResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void addGroupMsgResponse::ArenaDtor(void* object) {
  addGroupMsgResponse* _this = reinterpret_cast< addGroupMsgResponse* >(object);
  (void)_this;
}
void addGroupMsgResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void addGroupMsgResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void addGroupMsgResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.addGroupMsgResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* addGroupMsgResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ChatMessageProto.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* addGroupMsgResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.addGroupMsgResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ChatMessageProto.ResultCode result = 1;
  if (this->_internal_has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.addGroupMsgResponse)
  return target;
}

size_t addGroupMsgResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.addGroupMsgResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ChatMessageProto.ResultCode result = 1;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData addGroupMsgResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    addGroupMsgResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*addGroupMsgResponse::GetClassData() const { return &_class_data_; }

void addGroupMsgResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<addGroupMsgResponse *>(to)->MergeFrom(
      static_cast<const addGroupMsgResponse &>(from));
}


void addGroupMsgResponse::MergeFrom(const addGroupMsgResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.addGroupMsgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_mutable_result()->::ChatMessageProto::ResultCode::MergeFrom(from._internal_result());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void addGroupMsgResponse::CopyFrom(const addGroupMsgResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.addGroupMsgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool addGroupMsgResponse::IsInitialized() const {
  return true;
}

void addGroupMsgResponse::InternalSwap(addGroupMsgResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(addGroupMsgResponse, success_)
      + sizeof(addGroupMsgResponse::success_)
      - PROTOBUF_FIELD_OFFSET(addGroupMsgResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata addGroupMsgResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ChatMsg_2eproto_getter, &descriptor_table_ChatMsg_2eproto_once,
      file_level_metadata_ChatMsg_2eproto[10]);
}

// ===================================================================

class delGroupMsgRequest::_Internal {
 public:
  static const ::ChatMessageProto::groupChatMsg& groupmsg(const delGroupMsgRequest* msg);
};

const ::ChatMessageProto::groupChatMsg&
delGroupMsgRequest::_Internal::groupmsg(const delGroupMsgRequest* msg) {
  return *msg->groupmsg_;
}
delGroupMsgRequest::delGroupMsgRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ChatMessageProto.delGroupMsgRequest)
}
delGroupMsgRequest::delGroupMsgRequest(const delGroupMsgRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_groupmsg()) {
    groupmsg_ = new ::ChatMessageProto::groupChatMsg(*from.groupmsg_);
  } else {
    groupmsg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.delGroupMsgRequest)
}

inline void delGroupMsgRequest::SharedCtor() {
groupmsg_ = nullptr;
}

delGroupMsgRequest::~delGroupMsgRequest() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.delGroupMsgRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void delGroupMsgRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete groupmsg_;
}

void delGroupMsgRequest::ArenaDtor(void* object) {
  delGroupMsgRequest* _this = reinterpret_cast< delGroupMsgRequest* >(object);
  (void)_this;
}
void delGroupMsgRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void delGroupMsgRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void delGroupMsgRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.delGroupMsgRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && groupmsg_ != nullptr) {
    delete groupmsg_;
  }
  groupmsg_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* delGroupMsgRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ChatMessageProto.groupChatMsg GroupMsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_groupmsg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* delGroupMsgRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.delGroupMsgRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ChatMessageProto.groupChatMsg GroupMsg = 1;
  if (this->_internal_has_groupmsg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::groupmsg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.delGroupMsgRequest)
  return target;
}

size_t delGroupMsgRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.delGroupMsgRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ChatMessageProto.groupChatMsg GroupMsg = 1;
  if (this->_internal_has_groupmsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *groupmsg_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData delGroupMsgRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    delGroupMsgRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*delGroupMsgRequest::GetClassData() const { return &_class_data_; }

void delGroupMsgRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<delGroupMsgRequest *>(to)->MergeFrom(
      static_cast<const delGroupMsgRequest &>(from));
}


void delGroupMsgRequest::MergeFrom(const delGroupMsgRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.delGroupMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_groupmsg()) {
    _internal_mutable_groupmsg()->::ChatMessageProto::groupChatMsg::MergeFrom(from._internal_groupmsg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void delGroupMsgRequest::CopyFrom(const delGroupMsgRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.delGroupMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool delGroupMsgRequest::IsInitialized() const {
  return true;
}

void delGroupMsgRequest::InternalSwap(delGroupMsgRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(groupmsg_, other->groupmsg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata delGroupMsgRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ChatMsg_2eproto_getter, &descriptor_table_ChatMsg_2eproto_once,
      file_level_metadata_ChatMsg_2eproto[11]);
}

// ===================================================================

class delGroupMsgResponse::_Internal {
 public:
  static const ::ChatMessageProto::ResultCode& result(const delGroupMsgResponse* msg);
};

const ::ChatMessageProto::ResultCode&
delGroupMsgResponse::_Internal::result(const delGroupMsgResponse* msg) {
  return *msg->result_;
}
delGroupMsgResponse::delGroupMsgResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ChatMessageProto.delGroupMsgResponse)
}
delGroupMsgResponse::delGroupMsgResponse(const delGroupMsgResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::ChatMessageProto::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.delGroupMsgResponse)
}

inline void delGroupMsgResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&result_)) + sizeof(success_));
}

delGroupMsgResponse::~delGroupMsgResponse() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.delGroupMsgResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void delGroupMsgResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void delGroupMsgResponse::ArenaDtor(void* object) {
  delGroupMsgResponse* _this = reinterpret_cast< delGroupMsgResponse* >(object);
  (void)_this;
}
void delGroupMsgResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void delGroupMsgResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void delGroupMsgResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.delGroupMsgResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* delGroupMsgResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ChatMessageProto.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* delGroupMsgResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.delGroupMsgResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ChatMessageProto.ResultCode result = 1;
  if (this->_internal_has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.delGroupMsgResponse)
  return target;
}

size_t delGroupMsgResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.delGroupMsgResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ChatMessageProto.ResultCode result = 1;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData delGroupMsgResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    delGroupMsgResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*delGroupMsgResponse::GetClassData() const { return &_class_data_; }

void delGroupMsgResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<delGroupMsgResponse *>(to)->MergeFrom(
      static_cast<const delGroupMsgResponse &>(from));
}


void delGroupMsgResponse::MergeFrom(const delGroupMsgResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.delGroupMsgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_mutable_result()->::ChatMessageProto::ResultCode::MergeFrom(from._internal_result());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void delGroupMsgResponse::CopyFrom(const delGroupMsgResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.delGroupMsgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool delGroupMsgResponse::IsInitialized() const {
  return true;
}

void delGroupMsgResponse::InternalSwap(delGroupMsgResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(delGroupMsgResponse, success_)
      + sizeof(delGroupMsgResponse::success_)
      - PROTOBUF_FIELD_OFFSET(delGroupMsgResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata delGroupMsgResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ChatMsg_2eproto_getter, &descriptor_table_ChatMsg_2eproto_once,
      file_level_metadata_ChatMsg_2eproto[12]);
}

// ===================================================================

class queryGroupMsgRequest::_Internal {
 public:
};

queryGroupMsgRequest::queryGroupMsgRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ChatMessageProto.queryGroupMsgRequest)
}
queryGroupMsgRequest::queryGroupMsgRequest(const queryGroupMsgRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.queryGroupMsgRequest)
}

inline void queryGroupMsgRequest::SharedCtor() {
username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

queryGroupMsgRequest::~queryGroupMsgRequest() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.queryGroupMsgRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void queryGroupMsgRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void queryGroupMsgRequest::ArenaDtor(void* object) {
  queryGroupMsgRequest* _this = reinterpret_cast< queryGroupMsgRequest* >(object);
  (void)_this;
}
void queryGroupMsgRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void queryGroupMsgRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void queryGroupMsgRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.queryGroupMsgRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* queryGroupMsgRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* queryGroupMsgRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.queryGroupMsgRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes username = 1;
  if (!this->_internal_username().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.queryGroupMsgRequest)
  return target;
}

size_t queryGroupMsgRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.queryGroupMsgRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes username = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_username());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData queryGroupMsgRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    queryGroupMsgRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*queryGroupMsgRequest::GetClassData() const { return &_class_data_; }

void queryGroupMsgRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<queryGroupMsgRequest *>(to)->MergeFrom(
      static_cast<const queryGroupMsgRequest &>(from));
}


void queryGroupMsgRequest::MergeFrom(const queryGroupMsgRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.queryGroupMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _internal_set_username(from._internal_username());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void queryGroupMsgRequest::CopyFrom(const queryGroupMsgRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.queryGroupMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryGroupMsgRequest::IsInitialized() const {
  return true;
}

void queryGroupMsgRequest::InternalSwap(queryGroupMsgRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &username_, lhs_arena,
      &other->username_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata queryGroupMsgRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ChatMsg_2eproto_getter, &descriptor_table_ChatMsg_2eproto_once,
      file_level_metadata_ChatMsg_2eproto[13]);
}

// ===================================================================

class queryGroupMsgResponse::_Internal {
 public:
  static const ::ChatMessageProto::ResultCode& result(const queryGroupMsgResponse* msg);
};

const ::ChatMessageProto::ResultCode&
queryGroupMsgResponse::_Internal::result(const queryGroupMsgResponse* msg) {
  return *msg->result_;
}
queryGroupMsgResponse::queryGroupMsgResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  groupmsg_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ChatMessageProto.queryGroupMsgResponse)
}
queryGroupMsgResponse::queryGroupMsgResponse(const queryGroupMsgResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      groupmsg_(from.groupmsg_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::ChatMessageProto::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.queryGroupMsgResponse)
}

inline void queryGroupMsgResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&result_)) + sizeof(success_));
}

queryGroupMsgResponse::~queryGroupMsgResponse() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.queryGroupMsgResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void queryGroupMsgResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void queryGroupMsgResponse::ArenaDtor(void* object) {
  queryGroupMsgResponse* _this = reinterpret_cast< queryGroupMsgResponse* >(object);
  (void)_this;
}
void queryGroupMsgResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void queryGroupMsgResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void queryGroupMsgResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.queryGroupMsgResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groupmsg_.Clear();
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* queryGroupMsgResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ChatMessageProto.groupChatMsg GroupMsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_groupmsg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .ChatMessageProto.ResultCode result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* queryGroupMsgResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.queryGroupMsgResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ChatMessageProto.groupChatMsg GroupMsg = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_groupmsg_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_groupmsg(i), target, stream);
  }

  // .ChatMessageProto.ResultCode result = 2;
  if (this->_internal_has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::result(this), target, stream);
  }

  // bool success = 3;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.queryGroupMsgResponse)
  return target;
}

size_t queryGroupMsgResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.queryGroupMsgResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ChatMessageProto.groupChatMsg GroupMsg = 1;
  total_size += 1UL * this->_internal_groupmsg_size();
  for (const auto& msg : this->groupmsg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ChatMessageProto.ResultCode result = 2;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // bool success = 3;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData queryGroupMsgResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    queryGroupMsgResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*queryGroupMsgResponse::GetClassData() const { return &_class_data_; }

void queryGroupMsgResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<queryGroupMsgResponse *>(to)->MergeFrom(
      static_cast<const queryGroupMsgResponse &>(from));
}


void queryGroupMsgResponse::MergeFrom(const queryGroupMsgResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.queryGroupMsgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  groupmsg_.MergeFrom(from.groupmsg_);
  if (from._internal_has_result()) {
    _internal_mutable_result()->::ChatMessageProto::ResultCode::MergeFrom(from._internal_result());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void queryGroupMsgResponse::CopyFrom(const queryGroupMsgResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.queryGroupMsgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryGroupMsgResponse::IsInitialized() const {
  return true;
}

void queryGroupMsgResponse::InternalSwap(queryGroupMsgResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  groupmsg_.InternalSwap(&other->groupmsg_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(queryGroupMsgResponse, success_)
      + sizeof(queryGroupMsgResponse::success_)
      - PROTOBUF_FIELD_OFFSET(queryGroupMsgResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata queryGroupMsgResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ChatMsg_2eproto_getter, &descriptor_table_ChatMsg_2eproto_once,
      file_level_metadata_ChatMsg_2eproto[14]);
}

// ===================================================================

class departChatMsg::_Internal {
 public:
};

departChatMsg::departChatMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ChatMessageProto.departChatMsg)
}
departChatMsg::departChatMsg(const departChatMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  departname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    departname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_departname().empty()) {
    departname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_departname(), 
      GetArenaForAllocation());
  }
  sendname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sendname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sendname().empty()) {
    sendname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sendname(), 
      GetArenaForAllocation());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  msgid_ = from.msgid_;
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.departChatMsg)
}

inline void departChatMsg::SharedCtor() {
departname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  departname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sendname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sendname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
msgid_ = 0;
}

departChatMsg::~departChatMsg() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.departChatMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void departChatMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  departname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sendname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void departChatMsg::ArenaDtor(void* object) {
  departChatMsg* _this = reinterpret_cast< departChatMsg* >(object);
  (void)_this;
}
void departChatMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void departChatMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void departChatMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.departChatMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  departname_.ClearToEmpty();
  sendname_.ClearToEmpty();
  message_.ClearToEmpty();
  msgid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* departChatMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 msgid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          msgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes departname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_departname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes sendname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sendname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* departChatMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.departChatMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msgid = 1;
  if (this->_internal_msgid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_msgid(), target);
  }

  // bytes departname = 2;
  if (!this->_internal_departname().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_departname(), target);
  }

  // bytes sendname = 3;
  if (!this->_internal_sendname().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_sendname(), target);
  }

  // bytes message = 4;
  if (!this->_internal_message().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.departChatMsg)
  return target;
}

size_t departChatMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.departChatMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes departname = 2;
  if (!this->_internal_departname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_departname());
  }

  // bytes sendname = 3;
  if (!this->_internal_sendname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sendname());
  }

  // bytes message = 4;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());
  }

  // int32 msgid = 1;
  if (this->_internal_msgid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_msgid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData departChatMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    departChatMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*departChatMsg::GetClassData() const { return &_class_data_; }

void departChatMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<departChatMsg *>(to)->MergeFrom(
      static_cast<const departChatMsg &>(from));
}


void departChatMsg::MergeFrom(const departChatMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.departChatMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_departname().empty()) {
    _internal_set_departname(from._internal_departname());
  }
  if (!from._internal_sendname().empty()) {
    _internal_set_sendname(from._internal_sendname());
  }
  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_msgid() != 0) {
    _internal_set_msgid(from._internal_msgid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void departChatMsg::CopyFrom(const departChatMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.departChatMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool departChatMsg::IsInitialized() const {
  return true;
}

void departChatMsg::InternalSwap(departChatMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &departname_, lhs_arena,
      &other->departname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sendname_, lhs_arena,
      &other->sendname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  swap(msgid_, other->msgid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata departChatMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ChatMsg_2eproto_getter, &descriptor_table_ChatMsg_2eproto_once,
      file_level_metadata_ChatMsg_2eproto[15]);
}

// ===================================================================

class addDepartMsgRequest::_Internal {
 public:
  static const ::ChatMessageProto::departChatMsg& departmsg(const addDepartMsgRequest* msg);
};

const ::ChatMessageProto::departChatMsg&
addDepartMsgRequest::_Internal::departmsg(const addDepartMsgRequest* msg) {
  return *msg->departmsg_;
}
addDepartMsgRequest::addDepartMsgRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ChatMessageProto.addDepartMsgRequest)
}
addDepartMsgRequest::addDepartMsgRequest(const addDepartMsgRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_departmsg()) {
    departmsg_ = new ::ChatMessageProto::departChatMsg(*from.departmsg_);
  } else {
    departmsg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.addDepartMsgRequest)
}

inline void addDepartMsgRequest::SharedCtor() {
departmsg_ = nullptr;
}

addDepartMsgRequest::~addDepartMsgRequest() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.addDepartMsgRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void addDepartMsgRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete departmsg_;
}

void addDepartMsgRequest::ArenaDtor(void* object) {
  addDepartMsgRequest* _this = reinterpret_cast< addDepartMsgRequest* >(object);
  (void)_this;
}
void addDepartMsgRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void addDepartMsgRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void addDepartMsgRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.addDepartMsgRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && departmsg_ != nullptr) {
    delete departmsg_;
  }
  departmsg_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* addDepartMsgRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ChatMessageProto.departChatMsg DepartMsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_departmsg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* addDepartMsgRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.addDepartMsgRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ChatMessageProto.departChatMsg DepartMsg = 1;
  if (this->_internal_has_departmsg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::departmsg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.addDepartMsgRequest)
  return target;
}

size_t addDepartMsgRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.addDepartMsgRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ChatMessageProto.departChatMsg DepartMsg = 1;
  if (this->_internal_has_departmsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *departmsg_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData addDepartMsgRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    addDepartMsgRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*addDepartMsgRequest::GetClassData() const { return &_class_data_; }

void addDepartMsgRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<addDepartMsgRequest *>(to)->MergeFrom(
      static_cast<const addDepartMsgRequest &>(from));
}


void addDepartMsgRequest::MergeFrom(const addDepartMsgRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.addDepartMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_departmsg()) {
    _internal_mutable_departmsg()->::ChatMessageProto::departChatMsg::MergeFrom(from._internal_departmsg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void addDepartMsgRequest::CopyFrom(const addDepartMsgRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.addDepartMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool addDepartMsgRequest::IsInitialized() const {
  return true;
}

void addDepartMsgRequest::InternalSwap(addDepartMsgRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(departmsg_, other->departmsg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata addDepartMsgRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ChatMsg_2eproto_getter, &descriptor_table_ChatMsg_2eproto_once,
      file_level_metadata_ChatMsg_2eproto[16]);
}

// ===================================================================

class addDepartMsgResponse::_Internal {
 public:
  static const ::ChatMessageProto::ResultCode& result(const addDepartMsgResponse* msg);
};

const ::ChatMessageProto::ResultCode&
addDepartMsgResponse::_Internal::result(const addDepartMsgResponse* msg) {
  return *msg->result_;
}
addDepartMsgResponse::addDepartMsgResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ChatMessageProto.addDepartMsgResponse)
}
addDepartMsgResponse::addDepartMsgResponse(const addDepartMsgResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::ChatMessageProto::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.addDepartMsgResponse)
}

inline void addDepartMsgResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&result_)) + sizeof(success_));
}

addDepartMsgResponse::~addDepartMsgResponse() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.addDepartMsgResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void addDepartMsgResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void addDepartMsgResponse::ArenaDtor(void* object) {
  addDepartMsgResponse* _this = reinterpret_cast< addDepartMsgResponse* >(object);
  (void)_this;
}
void addDepartMsgResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void addDepartMsgResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void addDepartMsgResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.addDepartMsgResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* addDepartMsgResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ChatMessageProto.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* addDepartMsgResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.addDepartMsgResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ChatMessageProto.ResultCode result = 1;
  if (this->_internal_has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.addDepartMsgResponse)
  return target;
}

size_t addDepartMsgResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.addDepartMsgResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ChatMessageProto.ResultCode result = 1;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData addDepartMsgResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    addDepartMsgResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*addDepartMsgResponse::GetClassData() const { return &_class_data_; }

void addDepartMsgResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<addDepartMsgResponse *>(to)->MergeFrom(
      static_cast<const addDepartMsgResponse &>(from));
}


void addDepartMsgResponse::MergeFrom(const addDepartMsgResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.addDepartMsgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_mutable_result()->::ChatMessageProto::ResultCode::MergeFrom(from._internal_result());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void addDepartMsgResponse::CopyFrom(const addDepartMsgResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.addDepartMsgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool addDepartMsgResponse::IsInitialized() const {
  return true;
}

void addDepartMsgResponse::InternalSwap(addDepartMsgResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(addDepartMsgResponse, success_)
      + sizeof(addDepartMsgResponse::success_)
      - PROTOBUF_FIELD_OFFSET(addDepartMsgResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata addDepartMsgResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ChatMsg_2eproto_getter, &descriptor_table_ChatMsg_2eproto_once,
      file_level_metadata_ChatMsg_2eproto[17]);
}

// ===================================================================

class delDepartMsgRequest::_Internal {
 public:
  static const ::ChatMessageProto::departChatMsg& departmsg(const delDepartMsgRequest* msg);
};

const ::ChatMessageProto::departChatMsg&
delDepartMsgRequest::_Internal::departmsg(const delDepartMsgRequest* msg) {
  return *msg->departmsg_;
}
delDepartMsgRequest::delDepartMsgRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ChatMessageProto.delDepartMsgRequest)
}
delDepartMsgRequest::delDepartMsgRequest(const delDepartMsgRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_departmsg()) {
    departmsg_ = new ::ChatMessageProto::departChatMsg(*from.departmsg_);
  } else {
    departmsg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.delDepartMsgRequest)
}

inline void delDepartMsgRequest::SharedCtor() {
departmsg_ = nullptr;
}

delDepartMsgRequest::~delDepartMsgRequest() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.delDepartMsgRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void delDepartMsgRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete departmsg_;
}

void delDepartMsgRequest::ArenaDtor(void* object) {
  delDepartMsgRequest* _this = reinterpret_cast< delDepartMsgRequest* >(object);
  (void)_this;
}
void delDepartMsgRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void delDepartMsgRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void delDepartMsgRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.delDepartMsgRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && departmsg_ != nullptr) {
    delete departmsg_;
  }
  departmsg_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* delDepartMsgRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ChatMessageProto.departChatMsg DepartMsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_departmsg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* delDepartMsgRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.delDepartMsgRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ChatMessageProto.departChatMsg DepartMsg = 1;
  if (this->_internal_has_departmsg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::departmsg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.delDepartMsgRequest)
  return target;
}

size_t delDepartMsgRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.delDepartMsgRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ChatMessageProto.departChatMsg DepartMsg = 1;
  if (this->_internal_has_departmsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *departmsg_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData delDepartMsgRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    delDepartMsgRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*delDepartMsgRequest::GetClassData() const { return &_class_data_; }

void delDepartMsgRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<delDepartMsgRequest *>(to)->MergeFrom(
      static_cast<const delDepartMsgRequest &>(from));
}


void delDepartMsgRequest::MergeFrom(const delDepartMsgRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.delDepartMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_departmsg()) {
    _internal_mutable_departmsg()->::ChatMessageProto::departChatMsg::MergeFrom(from._internal_departmsg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void delDepartMsgRequest::CopyFrom(const delDepartMsgRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.delDepartMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool delDepartMsgRequest::IsInitialized() const {
  return true;
}

void delDepartMsgRequest::InternalSwap(delDepartMsgRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(departmsg_, other->departmsg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata delDepartMsgRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ChatMsg_2eproto_getter, &descriptor_table_ChatMsg_2eproto_once,
      file_level_metadata_ChatMsg_2eproto[18]);
}

// ===================================================================

class delDepartMsgResponse::_Internal {
 public:
  static const ::ChatMessageProto::ResultCode& result(const delDepartMsgResponse* msg);
};

const ::ChatMessageProto::ResultCode&
delDepartMsgResponse::_Internal::result(const delDepartMsgResponse* msg) {
  return *msg->result_;
}
delDepartMsgResponse::delDepartMsgResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ChatMessageProto.delDepartMsgResponse)
}
delDepartMsgResponse::delDepartMsgResponse(const delDepartMsgResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::ChatMessageProto::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.delDepartMsgResponse)
}

inline void delDepartMsgResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&result_)) + sizeof(success_));
}

delDepartMsgResponse::~delDepartMsgResponse() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.delDepartMsgResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void delDepartMsgResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void delDepartMsgResponse::ArenaDtor(void* object) {
  delDepartMsgResponse* _this = reinterpret_cast< delDepartMsgResponse* >(object);
  (void)_this;
}
void delDepartMsgResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void delDepartMsgResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void delDepartMsgResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.delDepartMsgResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* delDepartMsgResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ChatMessageProto.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* delDepartMsgResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.delDepartMsgResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ChatMessageProto.ResultCode result = 1;
  if (this->_internal_has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.delDepartMsgResponse)
  return target;
}

size_t delDepartMsgResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.delDepartMsgResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ChatMessageProto.ResultCode result = 1;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData delDepartMsgResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    delDepartMsgResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*delDepartMsgResponse::GetClassData() const { return &_class_data_; }

void delDepartMsgResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<delDepartMsgResponse *>(to)->MergeFrom(
      static_cast<const delDepartMsgResponse &>(from));
}


void delDepartMsgResponse::MergeFrom(const delDepartMsgResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.delDepartMsgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_mutable_result()->::ChatMessageProto::ResultCode::MergeFrom(from._internal_result());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void delDepartMsgResponse::CopyFrom(const delDepartMsgResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.delDepartMsgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool delDepartMsgResponse::IsInitialized() const {
  return true;
}

void delDepartMsgResponse::InternalSwap(delDepartMsgResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(delDepartMsgResponse, success_)
      + sizeof(delDepartMsgResponse::success_)
      - PROTOBUF_FIELD_OFFSET(delDepartMsgResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata delDepartMsgResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ChatMsg_2eproto_getter, &descriptor_table_ChatMsg_2eproto_once,
      file_level_metadata_ChatMsg_2eproto[19]);
}

// ===================================================================

class queryDepartMsgRequest::_Internal {
 public:
};

queryDepartMsgRequest::queryDepartMsgRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ChatMessageProto.queryDepartMsgRequest)
}
queryDepartMsgRequest::queryDepartMsgRequest(const queryDepartMsgRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.queryDepartMsgRequest)
}

inline void queryDepartMsgRequest::SharedCtor() {
username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

queryDepartMsgRequest::~queryDepartMsgRequest() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.queryDepartMsgRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void queryDepartMsgRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void queryDepartMsgRequest::ArenaDtor(void* object) {
  queryDepartMsgRequest* _this = reinterpret_cast< queryDepartMsgRequest* >(object);
  (void)_this;
}
void queryDepartMsgRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void queryDepartMsgRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void queryDepartMsgRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.queryDepartMsgRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* queryDepartMsgRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* queryDepartMsgRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.queryDepartMsgRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes username = 1;
  if (!this->_internal_username().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.queryDepartMsgRequest)
  return target;
}

size_t queryDepartMsgRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.queryDepartMsgRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes username = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_username());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData queryDepartMsgRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    queryDepartMsgRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*queryDepartMsgRequest::GetClassData() const { return &_class_data_; }

void queryDepartMsgRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<queryDepartMsgRequest *>(to)->MergeFrom(
      static_cast<const queryDepartMsgRequest &>(from));
}


void queryDepartMsgRequest::MergeFrom(const queryDepartMsgRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.queryDepartMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _internal_set_username(from._internal_username());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void queryDepartMsgRequest::CopyFrom(const queryDepartMsgRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.queryDepartMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryDepartMsgRequest::IsInitialized() const {
  return true;
}

void queryDepartMsgRequest::InternalSwap(queryDepartMsgRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &username_, lhs_arena,
      &other->username_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata queryDepartMsgRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ChatMsg_2eproto_getter, &descriptor_table_ChatMsg_2eproto_once,
      file_level_metadata_ChatMsg_2eproto[20]);
}

// ===================================================================

class queryDepartMsgResponse::_Internal {
 public:
  static const ::ChatMessageProto::ResultCode& result(const queryDepartMsgResponse* msg);
};

const ::ChatMessageProto::ResultCode&
queryDepartMsgResponse::_Internal::result(const queryDepartMsgResponse* msg) {
  return *msg->result_;
}
queryDepartMsgResponse::queryDepartMsgResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  departmsg_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ChatMessageProto.queryDepartMsgResponse)
}
queryDepartMsgResponse::queryDepartMsgResponse(const queryDepartMsgResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      departmsg_(from.departmsg_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::ChatMessageProto::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.queryDepartMsgResponse)
}

inline void queryDepartMsgResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&result_)) + sizeof(success_));
}

queryDepartMsgResponse::~queryDepartMsgResponse() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.queryDepartMsgResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void queryDepartMsgResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void queryDepartMsgResponse::ArenaDtor(void* object) {
  queryDepartMsgResponse* _this = reinterpret_cast< queryDepartMsgResponse* >(object);
  (void)_this;
}
void queryDepartMsgResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void queryDepartMsgResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void queryDepartMsgResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.queryDepartMsgResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  departmsg_.Clear();
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* queryDepartMsgResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ChatMessageProto.departChatMsg DepartMsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_departmsg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .ChatMessageProto.ResultCode result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* queryDepartMsgResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.queryDepartMsgResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ChatMessageProto.departChatMsg DepartMsg = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_departmsg_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_departmsg(i), target, stream);
  }

  // .ChatMessageProto.ResultCode result = 2;
  if (this->_internal_has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::result(this), target, stream);
  }

  // bool success = 3;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.queryDepartMsgResponse)
  return target;
}

size_t queryDepartMsgResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.queryDepartMsgResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ChatMessageProto.departChatMsg DepartMsg = 1;
  total_size += 1UL * this->_internal_departmsg_size();
  for (const auto& msg : this->departmsg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ChatMessageProto.ResultCode result = 2;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // bool success = 3;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData queryDepartMsgResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    queryDepartMsgResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*queryDepartMsgResponse::GetClassData() const { return &_class_data_; }

void queryDepartMsgResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<queryDepartMsgResponse *>(to)->MergeFrom(
      static_cast<const queryDepartMsgResponse &>(from));
}


void queryDepartMsgResponse::MergeFrom(const queryDepartMsgResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.queryDepartMsgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  departmsg_.MergeFrom(from.departmsg_);
  if (from._internal_has_result()) {
    _internal_mutable_result()->::ChatMessageProto::ResultCode::MergeFrom(from._internal_result());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void queryDepartMsgResponse::CopyFrom(const queryDepartMsgResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.queryDepartMsgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryDepartMsgResponse::IsInitialized() const {
  return true;
}

void queryDepartMsgResponse::InternalSwap(queryDepartMsgResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  departmsg_.InternalSwap(&other->departmsg_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(queryDepartMsgResponse, success_)
      + sizeof(queryDepartMsgResponse::success_)
      - PROTOBUF_FIELD_OFFSET(queryDepartMsgResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata queryDepartMsgResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ChatMsg_2eproto_getter, &descriptor_table_ChatMsg_2eproto_once,
      file_level_metadata_ChatMsg_2eproto[21]);
}

// ===================================================================

class queryOfflineMsgRequest::_Internal {
 public:
};

queryOfflineMsgRequest::queryOfflineMsgRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ChatMessageProto.queryOfflineMsgRequest)
}
queryOfflineMsgRequest::queryOfflineMsgRequest(const queryOfflineMsgRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recvname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    recvname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_recvname().empty()) {
    recvname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recvname(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.queryOfflineMsgRequest)
}

inline void queryOfflineMsgRequest::SharedCtor() {
recvname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  recvname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

queryOfflineMsgRequest::~queryOfflineMsgRequest() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.queryOfflineMsgRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void queryOfflineMsgRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  recvname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void queryOfflineMsgRequest::ArenaDtor(void* object) {
  queryOfflineMsgRequest* _this = reinterpret_cast< queryOfflineMsgRequest* >(object);
  (void)_this;
}
void queryOfflineMsgRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void queryOfflineMsgRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void queryOfflineMsgRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.queryOfflineMsgRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recvname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* queryOfflineMsgRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes recvname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_recvname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* queryOfflineMsgRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.queryOfflineMsgRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes recvname = 1;
  if (!this->_internal_recvname().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_recvname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.queryOfflineMsgRequest)
  return target;
}

size_t queryOfflineMsgRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.queryOfflineMsgRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes recvname = 1;
  if (!this->_internal_recvname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_recvname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData queryOfflineMsgRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    queryOfflineMsgRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*queryOfflineMsgRequest::GetClassData() const { return &_class_data_; }

void queryOfflineMsgRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<queryOfflineMsgRequest *>(to)->MergeFrom(
      static_cast<const queryOfflineMsgRequest &>(from));
}


void queryOfflineMsgRequest::MergeFrom(const queryOfflineMsgRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.queryOfflineMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_recvname().empty()) {
    _internal_set_recvname(from._internal_recvname());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void queryOfflineMsgRequest::CopyFrom(const queryOfflineMsgRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.queryOfflineMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryOfflineMsgRequest::IsInitialized() const {
  return true;
}

void queryOfflineMsgRequest::InternalSwap(queryOfflineMsgRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &recvname_, lhs_arena,
      &other->recvname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata queryOfflineMsgRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ChatMsg_2eproto_getter, &descriptor_table_ChatMsg_2eproto_once,
      file_level_metadata_ChatMsg_2eproto[22]);
}

// ===================================================================

class queryOfflineMsgResponse::_Internal {
 public:
  static const ::ChatMessageProto::ResultCode& result(const queryOfflineMsgResponse* msg);
};

const ::ChatMessageProto::ResultCode&
queryOfflineMsgResponse::_Internal::result(const queryOfflineMsgResponse* msg) {
  return *msg->result_;
}
queryOfflineMsgResponse::queryOfflineMsgResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  msg_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ChatMessageProto.queryOfflineMsgResponse)
}
queryOfflineMsgResponse::queryOfflineMsgResponse(const queryOfflineMsgResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      msg_(from.msg_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::ChatMessageProto::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:ChatMessageProto.queryOfflineMsgResponse)
}

inline void queryOfflineMsgResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&result_)) + sizeof(success_));
}

queryOfflineMsgResponse::~queryOfflineMsgResponse() {
  // @@protoc_insertion_point(destructor:ChatMessageProto.queryOfflineMsgResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void queryOfflineMsgResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void queryOfflineMsgResponse::ArenaDtor(void* object) {
  queryOfflineMsgResponse* _this = reinterpret_cast< queryOfflineMsgResponse* >(object);
  (void)_this;
}
void queryOfflineMsgResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void queryOfflineMsgResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void queryOfflineMsgResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessageProto.queryOfflineMsgResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.Clear();
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* queryOfflineMsgResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ChatMessageProto.chatMsg Msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_msg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .ChatMessageProto.ResultCode result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* queryOfflineMsgResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessageProto.queryOfflineMsgResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ChatMessageProto.chatMsg Msg = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_msg_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_msg(i), target, stream);
  }

  // .ChatMessageProto.ResultCode result = 2;
  if (this->_internal_has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::result(this), target, stream);
  }

  // bool success = 3;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatMessageProto.queryOfflineMsgResponse)
  return target;
}

size_t queryOfflineMsgResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessageProto.queryOfflineMsgResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ChatMessageProto.chatMsg Msg = 1;
  total_size += 1UL * this->_internal_msg_size();
  for (const auto& msg : this->msg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ChatMessageProto.ResultCode result = 2;
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // bool success = 3;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData queryOfflineMsgResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    queryOfflineMsgResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*queryOfflineMsgResponse::GetClassData() const { return &_class_data_; }

void queryOfflineMsgResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<queryOfflineMsgResponse *>(to)->MergeFrom(
      static_cast<const queryOfflineMsgResponse &>(from));
}


void queryOfflineMsgResponse::MergeFrom(const queryOfflineMsgResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessageProto.queryOfflineMsgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  msg_.MergeFrom(from.msg_);
  if (from._internal_has_result()) {
    _internal_mutable_result()->::ChatMessageProto::ResultCode::MergeFrom(from._internal_result());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void queryOfflineMsgResponse::CopyFrom(const queryOfflineMsgResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessageProto.queryOfflineMsgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryOfflineMsgResponse::IsInitialized() const {
  return true;
}

void queryOfflineMsgResponse::InternalSwap(queryOfflineMsgResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  msg_.InternalSwap(&other->msg_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(queryOfflineMsgResponse, success_)
      + sizeof(queryOfflineMsgResponse::success_)
      - PROTOBUF_FIELD_OFFSET(queryOfflineMsgResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata queryOfflineMsgResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ChatMsg_2eproto_getter, &descriptor_table_ChatMsg_2eproto_once,
      file_level_metadata_ChatMsg_2eproto[23]);
}

// ===================================================================

chatMsgRpc::~chatMsgRpc() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* chatMsgRpc::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ChatMsg_2eproto);
  return file_level_service_descriptors_ChatMsg_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* chatMsgRpc::GetDescriptor() {
  return descriptor();
}

void chatMsgRpc::AddChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::ChatMessageProto::addMsgRequest*,
                         ::ChatMessageProto::addMsgResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddChatMsg() not implemented.");
  done->Run();
}

void chatMsgRpc::DelChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::ChatMessageProto::delMsgRequest*,
                         ::ChatMessageProto::delMsgResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DelChatMsg() not implemented.");
  done->Run();
}

void chatMsgRpc::QueryChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::ChatMessageProto::queryMsgRequest*,
                         ::ChatMessageProto::queryMsgResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QueryChatMsg() not implemented.");
  done->Run();
}

void chatMsgRpc::QueryOfflineMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::ChatMessageProto::queryOfflineMsgRequest*,
                         ::ChatMessageProto::queryOfflineMsgResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QueryOfflineMsg() not implemented.");
  done->Run();
}

void chatMsgRpc::AddGroupChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::ChatMessageProto::addGroupMsgRequest*,
                         ::ChatMessageProto::addGroupMsgResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddGroupChatMsg() not implemented.");
  done->Run();
}

void chatMsgRpc::DelGroupChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::ChatMessageProto::delGroupMsgRequest*,
                         ::ChatMessageProto::delGroupMsgResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DelGroupChatMsg() not implemented.");
  done->Run();
}

void chatMsgRpc::QueryGroupChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::ChatMessageProto::queryGroupMsgRequest*,
                         ::ChatMessageProto::queryGroupMsgResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QueryGroupChatMsg() not implemented.");
  done->Run();
}

void chatMsgRpc::AddDepartChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::ChatMessageProto::addDepartMsgRequest*,
                         ::ChatMessageProto::addDepartMsgResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddDepartChatMsg() not implemented.");
  done->Run();
}

void chatMsgRpc::DelDepartChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::ChatMessageProto::delDepartMsgRequest*,
                         ::ChatMessageProto::delDepartMsgResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DelDepartChatMsg() not implemented.");
  done->Run();
}

void chatMsgRpc::QueryDepartChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::ChatMessageProto::queryDepartMsgRequest*,
                         ::ChatMessageProto::queryDepartMsgResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QueryDepartChatMsg() not implemented.");
  done->Run();
}

void chatMsgRpc::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_ChatMsg_2eproto[0]);
  switch(method->index()) {
    case 0:
      AddChatMsg(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::ChatMessageProto::addMsgRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::ChatMessageProto::addMsgResponse*>(
                 response),
             done);
      break;
    case 1:
      DelChatMsg(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::ChatMessageProto::delMsgRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::ChatMessageProto::delMsgResponse*>(
                 response),
             done);
      break;
    case 2:
      QueryChatMsg(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::ChatMessageProto::queryMsgRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::ChatMessageProto::queryMsgResponse*>(
                 response),
             done);
      break;
    case 3:
      QueryOfflineMsg(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::ChatMessageProto::queryOfflineMsgRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::ChatMessageProto::queryOfflineMsgResponse*>(
                 response),
             done);
      break;
    case 4:
      AddGroupChatMsg(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::ChatMessageProto::addGroupMsgRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::ChatMessageProto::addGroupMsgResponse*>(
                 response),
             done);
      break;
    case 5:
      DelGroupChatMsg(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::ChatMessageProto::delGroupMsgRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::ChatMessageProto::delGroupMsgResponse*>(
                 response),
             done);
      break;
    case 6:
      QueryGroupChatMsg(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::ChatMessageProto::queryGroupMsgRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::ChatMessageProto::queryGroupMsgResponse*>(
                 response),
             done);
      break;
    case 7:
      AddDepartChatMsg(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::ChatMessageProto::addDepartMsgRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::ChatMessageProto::addDepartMsgResponse*>(
                 response),
             done);
      break;
    case 8:
      DelDepartChatMsg(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::ChatMessageProto::delDepartMsgRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::ChatMessageProto::delDepartMsgResponse*>(
                 response),
             done);
      break;
    case 9:
      QueryDepartChatMsg(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::ChatMessageProto::queryDepartMsgRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::ChatMessageProto::queryDepartMsgResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& chatMsgRpc::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::ChatMessageProto::addMsgRequest::default_instance();
    case 1:
      return ::ChatMessageProto::delMsgRequest::default_instance();
    case 2:
      return ::ChatMessageProto::queryMsgRequest::default_instance();
    case 3:
      return ::ChatMessageProto::queryOfflineMsgRequest::default_instance();
    case 4:
      return ::ChatMessageProto::addGroupMsgRequest::default_instance();
    case 5:
      return ::ChatMessageProto::delGroupMsgRequest::default_instance();
    case 6:
      return ::ChatMessageProto::queryGroupMsgRequest::default_instance();
    case 7:
      return ::ChatMessageProto::addDepartMsgRequest::default_instance();
    case 8:
      return ::ChatMessageProto::delDepartMsgRequest::default_instance();
    case 9:
      return ::ChatMessageProto::queryDepartMsgRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& chatMsgRpc::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::ChatMessageProto::addMsgResponse::default_instance();
    case 1:
      return ::ChatMessageProto::delMsgResponse::default_instance();
    case 2:
      return ::ChatMessageProto::queryMsgResponse::default_instance();
    case 3:
      return ::ChatMessageProto::queryOfflineMsgResponse::default_instance();
    case 4:
      return ::ChatMessageProto::addGroupMsgResponse::default_instance();
    case 5:
      return ::ChatMessageProto::delGroupMsgResponse::default_instance();
    case 6:
      return ::ChatMessageProto::queryGroupMsgResponse::default_instance();
    case 7:
      return ::ChatMessageProto::addDepartMsgResponse::default_instance();
    case 8:
      return ::ChatMessageProto::delDepartMsgResponse::default_instance();
    case 9:
      return ::ChatMessageProto::queryDepartMsgResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

chatMsgRpc_Stub::chatMsgRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
chatMsgRpc_Stub::chatMsgRpc_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
chatMsgRpc_Stub::~chatMsgRpc_Stub() {
  if (owns_channel_) delete channel_;
}

void chatMsgRpc_Stub::AddChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::ChatMessageProto::addMsgRequest* request,
                              ::ChatMessageProto::addMsgResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void chatMsgRpc_Stub::DelChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::ChatMessageProto::delMsgRequest* request,
                              ::ChatMessageProto::delMsgResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void chatMsgRpc_Stub::QueryChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::ChatMessageProto::queryMsgRequest* request,
                              ::ChatMessageProto::queryMsgResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void chatMsgRpc_Stub::QueryOfflineMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::ChatMessageProto::queryOfflineMsgRequest* request,
                              ::ChatMessageProto::queryOfflineMsgResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void chatMsgRpc_Stub::AddGroupChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::ChatMessageProto::addGroupMsgRequest* request,
                              ::ChatMessageProto::addGroupMsgResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void chatMsgRpc_Stub::DelGroupChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::ChatMessageProto::delGroupMsgRequest* request,
                              ::ChatMessageProto::delGroupMsgResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void chatMsgRpc_Stub::QueryGroupChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::ChatMessageProto::queryGroupMsgRequest* request,
                              ::ChatMessageProto::queryGroupMsgResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void chatMsgRpc_Stub::AddDepartChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::ChatMessageProto::addDepartMsgRequest* request,
                              ::ChatMessageProto::addDepartMsgResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void chatMsgRpc_Stub::DelDepartChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::ChatMessageProto::delDepartMsgRequest* request,
                              ::ChatMessageProto::delDepartMsgResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void chatMsgRpc_Stub::QueryDepartChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::ChatMessageProto::queryDepartMsgRequest* request,
                              ::ChatMessageProto::queryDepartMsgResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ChatMessageProto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ChatMessageProto::ResultCode* Arena::CreateMaybeMessage< ::ChatMessageProto::ResultCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatMessageProto::ResultCode >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::chatMsg* Arena::CreateMaybeMessage< ::ChatMessageProto::chatMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatMessageProto::chatMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::addMsgRequest* Arena::CreateMaybeMessage< ::ChatMessageProto::addMsgRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatMessageProto::addMsgRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::addMsgResponse* Arena::CreateMaybeMessage< ::ChatMessageProto::addMsgResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatMessageProto::addMsgResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::delMsgRequest* Arena::CreateMaybeMessage< ::ChatMessageProto::delMsgRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatMessageProto::delMsgRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::delMsgResponse* Arena::CreateMaybeMessage< ::ChatMessageProto::delMsgResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatMessageProto::delMsgResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::queryMsgRequest* Arena::CreateMaybeMessage< ::ChatMessageProto::queryMsgRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatMessageProto::queryMsgRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::queryMsgResponse* Arena::CreateMaybeMessage< ::ChatMessageProto::queryMsgResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatMessageProto::queryMsgResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::groupChatMsg* Arena::CreateMaybeMessage< ::ChatMessageProto::groupChatMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatMessageProto::groupChatMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::addGroupMsgRequest* Arena::CreateMaybeMessage< ::ChatMessageProto::addGroupMsgRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatMessageProto::addGroupMsgRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::addGroupMsgResponse* Arena::CreateMaybeMessage< ::ChatMessageProto::addGroupMsgResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatMessageProto::addGroupMsgResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::delGroupMsgRequest* Arena::CreateMaybeMessage< ::ChatMessageProto::delGroupMsgRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatMessageProto::delGroupMsgRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::delGroupMsgResponse* Arena::CreateMaybeMessage< ::ChatMessageProto::delGroupMsgResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatMessageProto::delGroupMsgResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::queryGroupMsgRequest* Arena::CreateMaybeMessage< ::ChatMessageProto::queryGroupMsgRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatMessageProto::queryGroupMsgRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::queryGroupMsgResponse* Arena::CreateMaybeMessage< ::ChatMessageProto::queryGroupMsgResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatMessageProto::queryGroupMsgResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::departChatMsg* Arena::CreateMaybeMessage< ::ChatMessageProto::departChatMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatMessageProto::departChatMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::addDepartMsgRequest* Arena::CreateMaybeMessage< ::ChatMessageProto::addDepartMsgRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatMessageProto::addDepartMsgRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::addDepartMsgResponse* Arena::CreateMaybeMessage< ::ChatMessageProto::addDepartMsgResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatMessageProto::addDepartMsgResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::delDepartMsgRequest* Arena::CreateMaybeMessage< ::ChatMessageProto::delDepartMsgRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatMessageProto::delDepartMsgRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::delDepartMsgResponse* Arena::CreateMaybeMessage< ::ChatMessageProto::delDepartMsgResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatMessageProto::delDepartMsgResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::queryDepartMsgRequest* Arena::CreateMaybeMessage< ::ChatMessageProto::queryDepartMsgRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatMessageProto::queryDepartMsgRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::queryDepartMsgResponse* Arena::CreateMaybeMessage< ::ChatMessageProto::queryDepartMsgResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatMessageProto::queryDepartMsgResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::queryOfflineMsgRequest* Arena::CreateMaybeMessage< ::ChatMessageProto::queryOfflineMsgRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatMessageProto::queryOfflineMsgRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatMessageProto::queryOfflineMsgResponse* Arena::CreateMaybeMessage< ::ChatMessageProto::queryOfflineMsgResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatMessageProto::queryOfflineMsgResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
