// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserMsg.proto

#include "UserMsg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_UserMsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResultCode_UserMsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_UserMsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserInfo_UserMsg_2eproto;
namespace UserMsgProto {
class UserInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserInfo> _instance;
} _UserInfo_default_instance_;
class ResultCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResultCode> _instance;
} _ResultCode_default_instance_;
class QueryUserMsgRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryUserMsgRequest> _instance;
} _QueryUserMsgRequest_default_instance_;
class QueryUserMsgResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryUserMsgResponse> _instance;
} _QueryUserMsgResponse_default_instance_;
class UpdateUserMsgRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateUserMsgRequest> _instance;
} _UpdateUserMsgRequest_default_instance_;
class UpdateUserMsgResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateUserMsgResponse> _instance;
} _UpdateUserMsgResponse_default_instance_;
}  // namespace UserMsgProto
static void InitDefaultsscc_info_QueryUserMsgRequest_UserMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::UserMsgProto::_QueryUserMsgRequest_default_instance_;
    new (ptr) ::UserMsgProto::QueryUserMsgRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UserMsgProto::QueryUserMsgRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryUserMsgRequest_UserMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QueryUserMsgRequest_UserMsg_2eproto}, {}};

static void InitDefaultsscc_info_QueryUserMsgResponse_UserMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::UserMsgProto::_QueryUserMsgResponse_default_instance_;
    new (ptr) ::UserMsgProto::QueryUserMsgResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UserMsgProto::QueryUserMsgResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_QueryUserMsgResponse_UserMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_QueryUserMsgResponse_UserMsg_2eproto}, {
      &scc_info_ResultCode_UserMsg_2eproto.base,
      &scc_info_UserInfo_UserMsg_2eproto.base,}};

static void InitDefaultsscc_info_ResultCode_UserMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::UserMsgProto::_ResultCode_default_instance_;
    new (ptr) ::UserMsgProto::ResultCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UserMsgProto::ResultCode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResultCode_UserMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResultCode_UserMsg_2eproto}, {}};

static void InitDefaultsscc_info_UpdateUserMsgRequest_UserMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::UserMsgProto::_UpdateUserMsgRequest_default_instance_;
    new (ptr) ::UserMsgProto::UpdateUserMsgRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UserMsgProto::UpdateUserMsgRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateUserMsgRequest_UserMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateUserMsgRequest_UserMsg_2eproto}, {
      &scc_info_UserInfo_UserMsg_2eproto.base,}};

static void InitDefaultsscc_info_UpdateUserMsgResponse_UserMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::UserMsgProto::_UpdateUserMsgResponse_default_instance_;
    new (ptr) ::UserMsgProto::UpdateUserMsgResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UserMsgProto::UpdateUserMsgResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateUserMsgResponse_UserMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateUserMsgResponse_UserMsg_2eproto}, {
      &scc_info_ResultCode_UserMsg_2eproto.base,}};

static void InitDefaultsscc_info_UserInfo_UserMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::UserMsgProto::_UserInfo_default_instance_;
    new (ptr) ::UserMsgProto::UserInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UserMsgProto::UserInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserInfo_UserMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserInfo_UserMsg_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_UserMsg_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_UserMsg_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_UserMsg_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_UserMsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserMsgProto::UserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UserMsgProto::UserInfo, id_),
  PROTOBUF_FIELD_OFFSET(::UserMsgProto::UserInfo, name_),
  PROTOBUF_FIELD_OFFSET(::UserMsgProto::UserInfo, pwd_),
  PROTOBUF_FIELD_OFFSET(::UserMsgProto::UserInfo, email_),
  PROTOBUF_FIELD_OFFSET(::UserMsgProto::UserInfo, phone_),
  PROTOBUF_FIELD_OFFSET(::UserMsgProto::UserInfo, desc_),
  PROTOBUF_FIELD_OFFSET(::UserMsgProto::UserInfo, departname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserMsgProto::ResultCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UserMsgProto::ResultCode, errcode_),
  PROTOBUF_FIELD_OFFSET(::UserMsgProto::ResultCode, errmsg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserMsgProto::QueryUserMsgRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UserMsgProto::QueryUserMsgRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserMsgProto::QueryUserMsgResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UserMsgProto::QueryUserMsgResponse, result_),
  PROTOBUF_FIELD_OFFSET(::UserMsgProto::QueryUserMsgResponse, usermsg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserMsgProto::UpdateUserMsgRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UserMsgProto::UpdateUserMsgRequest, usermsg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserMsgProto::UpdateUserMsgResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UserMsgProto::UpdateUserMsgResponse, result_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::UserMsgProto::UserInfo)},
  { 12, -1, sizeof(::UserMsgProto::ResultCode)},
  { 19, -1, sizeof(::UserMsgProto::QueryUserMsgRequest)},
  { 25, -1, sizeof(::UserMsgProto::QueryUserMsgResponse)},
  { 32, -1, sizeof(::UserMsgProto::UpdateUserMsgRequest)},
  { 38, -1, sizeof(::UserMsgProto::UpdateUserMsgResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserMsgProto::_UserInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserMsgProto::_ResultCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserMsgProto::_QueryUserMsgRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserMsgProto::_QueryUserMsgResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserMsgProto::_UpdateUserMsgRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::UserMsgProto::_UpdateUserMsgResponse_default_instance_),
};

const char descriptor_table_protodef_UserMsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rUserMsg.proto\022\014UserMsgProto\"q\n\010UserInf"
  "o\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\014\022\013\n\003pwd\030\003 \001(\014"
  "\022\r\n\005email\030\004 \001(\014\022\r\n\005phone\030\005 \001(\014\022\014\n\004desc\030\006"
  " \001(\014\022\022\n\ndepartName\030\007 \001(\014\"-\n\nResultCode\022\017"
  "\n\007errcode\030\001 \001(\005\022\016\n\006errmsg\030\002 \001(\014\"#\n\023Query"
  "UserMsgRequest\022\014\n\004name\030\001 \001(\014\"i\n\024QueryUse"
  "rMsgResponse\022(\n\006result\030\001 \001(\0132\030.UserMsgPr"
  "oto.ResultCode\022\'\n\007userMsg\030\002 \001(\0132\026.UserMs"
  "gProto.UserInfo\"\?\n\024UpdateUserMsgRequest\022"
  "\'\n\007userMsg\030\001 \001(\0132\026.UserMsgProto.UserInfo"
  "\"A\n\025UpdateUserMsgResponse\022(\n\006result\030\001 \001("
  "\0132\030.UserMsgProto.ResultCode2\304\001\n\021UserMsgS"
  "erviceRpc\022U\n\014QueryUserMsg\022!.UserMsgProto"
  ".QueryUserMsgRequest\032\".UserMsgProto.Quer"
  "yUserMsgResponse\022X\n\rUpdateUserMsg\022\".User"
  "MsgProto.UpdateUserMsgRequest\032#.UserMsgP"
  "roto.UpdateUserMsgResponseB\003\200\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_UserMsg_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_UserMsg_2eproto_sccs[6] = {
  &scc_info_QueryUserMsgRequest_UserMsg_2eproto.base,
  &scc_info_QueryUserMsgResponse_UserMsg_2eproto.base,
  &scc_info_ResultCode_UserMsg_2eproto.base,
  &scc_info_UpdateUserMsgRequest_UserMsg_2eproto.base,
  &scc_info_UpdateUserMsgResponse_UserMsg_2eproto.base,
  &scc_info_UserInfo_UserMsg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_UserMsg_2eproto_once;
static bool descriptor_table_UserMsg_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_UserMsg_2eproto = {
  &descriptor_table_UserMsg_2eproto_initialized, descriptor_table_protodef_UserMsg_2eproto, "UserMsg.proto", 679,
  &descriptor_table_UserMsg_2eproto_once, descriptor_table_UserMsg_2eproto_sccs, descriptor_table_UserMsg_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_UserMsg_2eproto::offsets,
  file_level_metadata_UserMsg_2eproto, 6, file_level_enum_descriptors_UserMsg_2eproto, file_level_service_descriptors_UserMsg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_UserMsg_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_UserMsg_2eproto), true);
namespace UserMsgProto {

// ===================================================================

void UserInfo::InitAsDefaultInstance() {
}
class UserInfo::_Internal {
 public:
};

UserInfo::UserInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserMsgProto.UserInfo)
}
UserInfo::UserInfo(const UserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pwd().empty()) {
    pwd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_phone().empty()) {
    phone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.phone_);
  }
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_desc().empty()) {
    desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  departname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_departname().empty()) {
    departname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.departname_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:UserMsgProto.UserInfo)
}

void UserInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserInfo_UserMsg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  departname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:UserMsgProto.UserInfo)
  SharedDtor();
}

void UserInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  departname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserInfo& UserInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserInfo_UserMsg_2eproto.base);
  return *internal_default_instance();
}


void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:UserMsgProto.UserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pwd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  departname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _internal_metadata_.Clear();
}

const char* UserInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes pwd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_pwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes email = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes phone = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_phone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes desc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes departName = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_departname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserMsgProto.UserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // bytes name = 2;
  if (this->name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // bytes pwd = 3;
  if (this->pwd().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_pwd(), target);
  }

  // bytes email = 4;
  if (this->email().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_email(), target);
  }

  // bytes phone = 5;
  if (this->phone().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_phone(), target);
  }

  // bytes desc = 6;
  if (this->desc().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_desc(), target);
  }

  // bytes departName = 7;
  if (this->departname().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_departname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserMsgProto.UserInfo)
  return target;
}

size_t UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserMsgProto.UserInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // bytes pwd = 3;
  if (this->pwd().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pwd());
  }

  // bytes email = 4;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_email());
  }

  // bytes phone = 5;
  if (this->phone().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_phone());
  }

  // bytes desc = 6;
  if (this->desc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_desc());
  }

  // bytes departName = 7;
  if (this->departname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_departname());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UserMsgProto.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UserMsgProto.UserInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UserMsgProto.UserInfo)
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserMsgProto.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.pwd().size() > 0) {

    pwd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.phone().size() > 0) {

    phone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.phone_);
  }
  if (from.desc().size() > 0) {

    desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  if (from.departname().size() > 0) {

    departname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.departname_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void UserInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UserMsgProto.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserMsgProto.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  return true;
}

void UserInfo::InternalSwap(UserInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pwd_.Swap(&other->pwd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  phone_.Swap(&other->phone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  desc_.Swap(&other->desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  departname_.Swap(&other->departname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResultCode::InitAsDefaultInstance() {
}
class ResultCode::_Internal {
 public:
};

ResultCode::ResultCode()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserMsgProto.ResultCode)
}
ResultCode::ResultCode(const ResultCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_errmsg().empty()) {
    errmsg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  errcode_ = from.errcode_;
  // @@protoc_insertion_point(copy_constructor:UserMsgProto.ResultCode)
}

void ResultCode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResultCode_UserMsg_2eproto.base);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  errcode_ = 0;
}

ResultCode::~ResultCode() {
  // @@protoc_insertion_point(destructor:UserMsgProto.ResultCode)
  SharedDtor();
}

void ResultCode::SharedDtor() {
  errmsg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResultCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResultCode& ResultCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResultCode_UserMsg_2eproto.base);
  return *internal_default_instance();
}


void ResultCode::Clear() {
// @@protoc_insertion_point(message_clear_start:UserMsgProto.ResultCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errmsg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  errcode_ = 0;
  _internal_metadata_.Clear();
}

const char* ResultCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 errcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          errcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes errmsg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResultCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserMsgProto.ResultCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 errcode = 1;
  if (this->errcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_errcode(), target);
  }

  // bytes errmsg = 2;
  if (this->errmsg().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_errmsg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserMsgProto.ResultCode)
  return target;
}

size_t ResultCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserMsgProto.ResultCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes errmsg = 2;
  if (this->errmsg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_errmsg());
  }

  // int32 errcode = 1;
  if (this->errcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_errcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResultCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UserMsgProto.ResultCode)
  GOOGLE_DCHECK_NE(&from, this);
  const ResultCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResultCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UserMsgProto.ResultCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UserMsgProto.ResultCode)
    MergeFrom(*source);
  }
}

void ResultCode::MergeFrom(const ResultCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserMsgProto.ResultCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errmsg().size() > 0) {

    errmsg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  if (from.errcode() != 0) {
    _internal_set_errcode(from._internal_errcode());
  }
}

void ResultCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UserMsgProto.ResultCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultCode::CopyFrom(const ResultCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserMsgProto.ResultCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultCode::IsInitialized() const {
  return true;
}

void ResultCode::InternalSwap(ResultCode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  errmsg_.Swap(&other->errmsg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(errcode_, other->errcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResultCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryUserMsgRequest::InitAsDefaultInstance() {
}
class QueryUserMsgRequest::_Internal {
 public:
};

QueryUserMsgRequest::QueryUserMsgRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserMsgProto.QueryUserMsgRequest)
}
QueryUserMsgRequest::QueryUserMsgRequest(const QueryUserMsgRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:UserMsgProto.QueryUserMsgRequest)
}

void QueryUserMsgRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryUserMsgRequest_UserMsg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

QueryUserMsgRequest::~QueryUserMsgRequest() {
  // @@protoc_insertion_point(destructor:UserMsgProto.QueryUserMsgRequest)
  SharedDtor();
}

void QueryUserMsgRequest::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QueryUserMsgRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryUserMsgRequest& QueryUserMsgRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryUserMsgRequest_UserMsg_2eproto.base);
  return *internal_default_instance();
}


void QueryUserMsgRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:UserMsgProto.QueryUserMsgRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* QueryUserMsgRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryUserMsgRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserMsgProto.QueryUserMsgRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserMsgProto.QueryUserMsgRequest)
  return target;
}

size_t QueryUserMsgRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserMsgProto.QueryUserMsgRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryUserMsgRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UserMsgProto.QueryUserMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryUserMsgRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryUserMsgRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UserMsgProto.QueryUserMsgRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UserMsgProto.QueryUserMsgRequest)
    MergeFrom(*source);
  }
}

void QueryUserMsgRequest::MergeFrom(const QueryUserMsgRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserMsgProto.QueryUserMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void QueryUserMsgRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UserMsgProto.QueryUserMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryUserMsgRequest::CopyFrom(const QueryUserMsgRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserMsgProto.QueryUserMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryUserMsgRequest::IsInitialized() const {
  return true;
}

void QueryUserMsgRequest::InternalSwap(QueryUserMsgRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryUserMsgRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryUserMsgResponse::InitAsDefaultInstance() {
  ::UserMsgProto::_QueryUserMsgResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::UserMsgProto::ResultCode*>(
      ::UserMsgProto::ResultCode::internal_default_instance());
  ::UserMsgProto::_QueryUserMsgResponse_default_instance_._instance.get_mutable()->usermsg_ = const_cast< ::UserMsgProto::UserInfo*>(
      ::UserMsgProto::UserInfo::internal_default_instance());
}
class QueryUserMsgResponse::_Internal {
 public:
  static const ::UserMsgProto::ResultCode& result(const QueryUserMsgResponse* msg);
  static const ::UserMsgProto::UserInfo& usermsg(const QueryUserMsgResponse* msg);
};

const ::UserMsgProto::ResultCode&
QueryUserMsgResponse::_Internal::result(const QueryUserMsgResponse* msg) {
  return *msg->result_;
}
const ::UserMsgProto::UserInfo&
QueryUserMsgResponse::_Internal::usermsg(const QueryUserMsgResponse* msg) {
  return *msg->usermsg_;
}
QueryUserMsgResponse::QueryUserMsgResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserMsgProto.QueryUserMsgResponse)
}
QueryUserMsgResponse::QueryUserMsgResponse(const QueryUserMsgResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::UserMsgProto::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  if (from._internal_has_usermsg()) {
    usermsg_ = new ::UserMsgProto::UserInfo(*from.usermsg_);
  } else {
    usermsg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:UserMsgProto.QueryUserMsgResponse)
}

void QueryUserMsgResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryUserMsgResponse_UserMsg_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usermsg_) -
      reinterpret_cast<char*>(&result_)) + sizeof(usermsg_));
}

QueryUserMsgResponse::~QueryUserMsgResponse() {
  // @@protoc_insertion_point(destructor:UserMsgProto.QueryUserMsgResponse)
  SharedDtor();
}

void QueryUserMsgResponse::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
  if (this != internal_default_instance()) delete usermsg_;
}

void QueryUserMsgResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryUserMsgResponse& QueryUserMsgResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryUserMsgResponse_UserMsg_2eproto.base);
  return *internal_default_instance();
}


void QueryUserMsgResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:UserMsgProto.QueryUserMsgResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && usermsg_ != nullptr) {
    delete usermsg_;
  }
  usermsg_ = nullptr;
  _internal_metadata_.Clear();
}

const char* QueryUserMsgResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .UserMsgProto.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .UserMsgProto.UserInfo userMsg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_usermsg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryUserMsgResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserMsgProto.QueryUserMsgResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .UserMsgProto.ResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // .UserMsgProto.UserInfo userMsg = 2;
  if (this->has_usermsg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::usermsg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserMsgProto.QueryUserMsgResponse)
  return target;
}

size_t QueryUserMsgResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserMsgProto.QueryUserMsgResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .UserMsgProto.ResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // .UserMsgProto.UserInfo userMsg = 2;
  if (this->has_usermsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *usermsg_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryUserMsgResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UserMsgProto.QueryUserMsgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryUserMsgResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryUserMsgResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UserMsgProto.QueryUserMsgResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UserMsgProto.QueryUserMsgResponse)
    MergeFrom(*source);
  }
}

void QueryUserMsgResponse::MergeFrom(const QueryUserMsgResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserMsgProto.QueryUserMsgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::UserMsgProto::ResultCode::MergeFrom(from._internal_result());
  }
  if (from.has_usermsg()) {
    _internal_mutable_usermsg()->::UserMsgProto::UserInfo::MergeFrom(from._internal_usermsg());
  }
}

void QueryUserMsgResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UserMsgProto.QueryUserMsgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryUserMsgResponse::CopyFrom(const QueryUserMsgResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserMsgProto.QueryUserMsgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryUserMsgResponse::IsInitialized() const {
  return true;
}

void QueryUserMsgResponse::InternalSwap(QueryUserMsgResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(usermsg_, other->usermsg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryUserMsgResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateUserMsgRequest::InitAsDefaultInstance() {
  ::UserMsgProto::_UpdateUserMsgRequest_default_instance_._instance.get_mutable()->usermsg_ = const_cast< ::UserMsgProto::UserInfo*>(
      ::UserMsgProto::UserInfo::internal_default_instance());
}
class UpdateUserMsgRequest::_Internal {
 public:
  static const ::UserMsgProto::UserInfo& usermsg(const UpdateUserMsgRequest* msg);
};

const ::UserMsgProto::UserInfo&
UpdateUserMsgRequest::_Internal::usermsg(const UpdateUserMsgRequest* msg) {
  return *msg->usermsg_;
}
UpdateUserMsgRequest::UpdateUserMsgRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserMsgProto.UpdateUserMsgRequest)
}
UpdateUserMsgRequest::UpdateUserMsgRequest(const UpdateUserMsgRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_usermsg()) {
    usermsg_ = new ::UserMsgProto::UserInfo(*from.usermsg_);
  } else {
    usermsg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:UserMsgProto.UpdateUserMsgRequest)
}

void UpdateUserMsgRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateUserMsgRequest_UserMsg_2eproto.base);
  usermsg_ = nullptr;
}

UpdateUserMsgRequest::~UpdateUserMsgRequest() {
  // @@protoc_insertion_point(destructor:UserMsgProto.UpdateUserMsgRequest)
  SharedDtor();
}

void UpdateUserMsgRequest::SharedDtor() {
  if (this != internal_default_instance()) delete usermsg_;
}

void UpdateUserMsgRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateUserMsgRequest& UpdateUserMsgRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateUserMsgRequest_UserMsg_2eproto.base);
  return *internal_default_instance();
}


void UpdateUserMsgRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:UserMsgProto.UpdateUserMsgRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && usermsg_ != nullptr) {
    delete usermsg_;
  }
  usermsg_ = nullptr;
  _internal_metadata_.Clear();
}

const char* UpdateUserMsgRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .UserMsgProto.UserInfo userMsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_usermsg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateUserMsgRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserMsgProto.UpdateUserMsgRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .UserMsgProto.UserInfo userMsg = 1;
  if (this->has_usermsg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::usermsg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserMsgProto.UpdateUserMsgRequest)
  return target;
}

size_t UpdateUserMsgRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserMsgProto.UpdateUserMsgRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .UserMsgProto.UserInfo userMsg = 1;
  if (this->has_usermsg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *usermsg_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateUserMsgRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UserMsgProto.UpdateUserMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateUserMsgRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateUserMsgRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UserMsgProto.UpdateUserMsgRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UserMsgProto.UpdateUserMsgRequest)
    MergeFrom(*source);
  }
}

void UpdateUserMsgRequest::MergeFrom(const UpdateUserMsgRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserMsgProto.UpdateUserMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_usermsg()) {
    _internal_mutable_usermsg()->::UserMsgProto::UserInfo::MergeFrom(from._internal_usermsg());
  }
}

void UpdateUserMsgRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UserMsgProto.UpdateUserMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateUserMsgRequest::CopyFrom(const UpdateUserMsgRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserMsgProto.UpdateUserMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserMsgRequest::IsInitialized() const {
  return true;
}

void UpdateUserMsgRequest::InternalSwap(UpdateUserMsgRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(usermsg_, other->usermsg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateUserMsgRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateUserMsgResponse::InitAsDefaultInstance() {
  ::UserMsgProto::_UpdateUserMsgResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::UserMsgProto::ResultCode*>(
      ::UserMsgProto::ResultCode::internal_default_instance());
}
class UpdateUserMsgResponse::_Internal {
 public:
  static const ::UserMsgProto::ResultCode& result(const UpdateUserMsgResponse* msg);
};

const ::UserMsgProto::ResultCode&
UpdateUserMsgResponse::_Internal::result(const UpdateUserMsgResponse* msg) {
  return *msg->result_;
}
UpdateUserMsgResponse::UpdateUserMsgResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserMsgProto.UpdateUserMsgResponse)
}
UpdateUserMsgResponse::UpdateUserMsgResponse(const UpdateUserMsgResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::UserMsgProto::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:UserMsgProto.UpdateUserMsgResponse)
}

void UpdateUserMsgResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateUserMsgResponse_UserMsg_2eproto.base);
  result_ = nullptr;
}

UpdateUserMsgResponse::~UpdateUserMsgResponse() {
  // @@protoc_insertion_point(destructor:UserMsgProto.UpdateUserMsgResponse)
  SharedDtor();
}

void UpdateUserMsgResponse::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void UpdateUserMsgResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateUserMsgResponse& UpdateUserMsgResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateUserMsgResponse_UserMsg_2eproto.base);
  return *internal_default_instance();
}


void UpdateUserMsgResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:UserMsgProto.UpdateUserMsgResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear();
}

const char* UpdateUserMsgResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .UserMsgProto.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateUserMsgResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserMsgProto.UpdateUserMsgResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .UserMsgProto.ResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserMsgProto.UpdateUserMsgResponse)
  return target;
}

size_t UpdateUserMsgResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserMsgProto.UpdateUserMsgResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .UserMsgProto.ResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateUserMsgResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UserMsgProto.UpdateUserMsgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateUserMsgResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateUserMsgResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UserMsgProto.UpdateUserMsgResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UserMsgProto.UpdateUserMsgResponse)
    MergeFrom(*source);
  }
}

void UpdateUserMsgResponse::MergeFrom(const UpdateUserMsgResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserMsgProto.UpdateUserMsgResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::UserMsgProto::ResultCode::MergeFrom(from._internal_result());
  }
}

void UpdateUserMsgResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UserMsgProto.UpdateUserMsgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateUserMsgResponse::CopyFrom(const UpdateUserMsgResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserMsgProto.UpdateUserMsgResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserMsgResponse::IsInitialized() const {
  return true;
}

void UpdateUserMsgResponse::InternalSwap(UpdateUserMsgResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateUserMsgResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

UserMsgServiceRpc::~UserMsgServiceRpc() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* UserMsgServiceRpc::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_UserMsg_2eproto);
  return file_level_service_descriptors_UserMsg_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* UserMsgServiceRpc::GetDescriptor() {
  return descriptor();
}

void UserMsgServiceRpc::QueryUserMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::UserMsgProto::QueryUserMsgRequest*,
                         ::UserMsgProto::QueryUserMsgResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QueryUserMsg() not implemented.");
  done->Run();
}

void UserMsgServiceRpc::UpdateUserMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::UserMsgProto::UpdateUserMsgRequest*,
                         ::UserMsgProto::UpdateUserMsgResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UpdateUserMsg() not implemented.");
  done->Run();
}

void UserMsgServiceRpc::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_UserMsg_2eproto[0]);
  switch(method->index()) {
    case 0:
      QueryUserMsg(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::UserMsgProto::QueryUserMsgRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::UserMsgProto::QueryUserMsgResponse*>(
                 response),
             done);
      break;
    case 1:
      UpdateUserMsg(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::UserMsgProto::UpdateUserMsgRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::UserMsgProto::UpdateUserMsgResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& UserMsgServiceRpc::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::UserMsgProto::QueryUserMsgRequest::default_instance();
    case 1:
      return ::UserMsgProto::UpdateUserMsgRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& UserMsgServiceRpc::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::UserMsgProto::QueryUserMsgResponse::default_instance();
    case 1:
      return ::UserMsgProto::UpdateUserMsgResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

UserMsgServiceRpc_Stub::UserMsgServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
UserMsgServiceRpc_Stub::UserMsgServiceRpc_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
UserMsgServiceRpc_Stub::~UserMsgServiceRpc_Stub() {
  if (owns_channel_) delete channel_;
}

void UserMsgServiceRpc_Stub::QueryUserMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::UserMsgProto::QueryUserMsgRequest* request,
                              ::UserMsgProto::QueryUserMsgResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void UserMsgServiceRpc_Stub::UpdateUserMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::UserMsgProto::UpdateUserMsgRequest* request,
                              ::UserMsgProto::UpdateUserMsgResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace UserMsgProto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::UserMsgProto::UserInfo* Arena::CreateMaybeMessage< ::UserMsgProto::UserInfo >(Arena* arena) {
  return Arena::CreateInternal< ::UserMsgProto::UserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::UserMsgProto::ResultCode* Arena::CreateMaybeMessage< ::UserMsgProto::ResultCode >(Arena* arena) {
  return Arena::CreateInternal< ::UserMsgProto::ResultCode >(arena);
}
template<> PROTOBUF_NOINLINE ::UserMsgProto::QueryUserMsgRequest* Arena::CreateMaybeMessage< ::UserMsgProto::QueryUserMsgRequest >(Arena* arena) {
  return Arena::CreateInternal< ::UserMsgProto::QueryUserMsgRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::UserMsgProto::QueryUserMsgResponse* Arena::CreateMaybeMessage< ::UserMsgProto::QueryUserMsgResponse >(Arena* arena) {
  return Arena::CreateInternal< ::UserMsgProto::QueryUserMsgResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::UserMsgProto::UpdateUserMsgRequest* Arena::CreateMaybeMessage< ::UserMsgProto::UpdateUserMsgRequest >(Arena* arena) {
  return Arena::CreateInternal< ::UserMsgProto::UpdateUserMsgRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::UserMsgProto::UpdateUserMsgResponse* Arena::CreateMaybeMessage< ::UserMsgProto::UpdateUserMsgResponse >(Arena* arena) {
  return Arena::CreateInternal< ::UserMsgProto::UpdateUserMsgResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
