// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChatMsg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ChatMsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ChatMsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ChatMsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ChatMsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[24]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ChatMsg_2eproto;
namespace ChatMessageProto {
class ResultCode;
class ResultCodeDefaultTypeInternal;
extern ResultCodeDefaultTypeInternal _ResultCode_default_instance_;
class addDepartMsgRequest;
class addDepartMsgRequestDefaultTypeInternal;
extern addDepartMsgRequestDefaultTypeInternal _addDepartMsgRequest_default_instance_;
class addDepartMsgResponse;
class addDepartMsgResponseDefaultTypeInternal;
extern addDepartMsgResponseDefaultTypeInternal _addDepartMsgResponse_default_instance_;
class addGroupMsgRequest;
class addGroupMsgRequestDefaultTypeInternal;
extern addGroupMsgRequestDefaultTypeInternal _addGroupMsgRequest_default_instance_;
class addGroupMsgResponse;
class addGroupMsgResponseDefaultTypeInternal;
extern addGroupMsgResponseDefaultTypeInternal _addGroupMsgResponse_default_instance_;
class addMsgRequest;
class addMsgRequestDefaultTypeInternal;
extern addMsgRequestDefaultTypeInternal _addMsgRequest_default_instance_;
class addMsgResponse;
class addMsgResponseDefaultTypeInternal;
extern addMsgResponseDefaultTypeInternal _addMsgResponse_default_instance_;
class chatMsg;
class chatMsgDefaultTypeInternal;
extern chatMsgDefaultTypeInternal _chatMsg_default_instance_;
class delDepartMsgRequest;
class delDepartMsgRequestDefaultTypeInternal;
extern delDepartMsgRequestDefaultTypeInternal _delDepartMsgRequest_default_instance_;
class delDepartMsgResponse;
class delDepartMsgResponseDefaultTypeInternal;
extern delDepartMsgResponseDefaultTypeInternal _delDepartMsgResponse_default_instance_;
class delGroupMsgRequest;
class delGroupMsgRequestDefaultTypeInternal;
extern delGroupMsgRequestDefaultTypeInternal _delGroupMsgRequest_default_instance_;
class delGroupMsgResponse;
class delGroupMsgResponseDefaultTypeInternal;
extern delGroupMsgResponseDefaultTypeInternal _delGroupMsgResponse_default_instance_;
class delMsgRequest;
class delMsgRequestDefaultTypeInternal;
extern delMsgRequestDefaultTypeInternal _delMsgRequest_default_instance_;
class delMsgResponse;
class delMsgResponseDefaultTypeInternal;
extern delMsgResponseDefaultTypeInternal _delMsgResponse_default_instance_;
class departChatMsg;
class departChatMsgDefaultTypeInternal;
extern departChatMsgDefaultTypeInternal _departChatMsg_default_instance_;
class groupChatMsg;
class groupChatMsgDefaultTypeInternal;
extern groupChatMsgDefaultTypeInternal _groupChatMsg_default_instance_;
class queryDepartMsgRequest;
class queryDepartMsgRequestDefaultTypeInternal;
extern queryDepartMsgRequestDefaultTypeInternal _queryDepartMsgRequest_default_instance_;
class queryDepartMsgResponse;
class queryDepartMsgResponseDefaultTypeInternal;
extern queryDepartMsgResponseDefaultTypeInternal _queryDepartMsgResponse_default_instance_;
class queryGroupMsgRequest;
class queryGroupMsgRequestDefaultTypeInternal;
extern queryGroupMsgRequestDefaultTypeInternal _queryGroupMsgRequest_default_instance_;
class queryGroupMsgResponse;
class queryGroupMsgResponseDefaultTypeInternal;
extern queryGroupMsgResponseDefaultTypeInternal _queryGroupMsgResponse_default_instance_;
class queryMsgRequest;
class queryMsgRequestDefaultTypeInternal;
extern queryMsgRequestDefaultTypeInternal _queryMsgRequest_default_instance_;
class queryMsgResponse;
class queryMsgResponseDefaultTypeInternal;
extern queryMsgResponseDefaultTypeInternal _queryMsgResponse_default_instance_;
class queryOfflineMsgRequest;
class queryOfflineMsgRequestDefaultTypeInternal;
extern queryOfflineMsgRequestDefaultTypeInternal _queryOfflineMsgRequest_default_instance_;
class queryOfflineMsgResponse;
class queryOfflineMsgResponseDefaultTypeInternal;
extern queryOfflineMsgResponseDefaultTypeInternal _queryOfflineMsgResponse_default_instance_;
}  // namespace ChatMessageProto
PROTOBUF_NAMESPACE_OPEN
template<> ::ChatMessageProto::ResultCode* Arena::CreateMaybeMessage<::ChatMessageProto::ResultCode>(Arena*);
template<> ::ChatMessageProto::addDepartMsgRequest* Arena::CreateMaybeMessage<::ChatMessageProto::addDepartMsgRequest>(Arena*);
template<> ::ChatMessageProto::addDepartMsgResponse* Arena::CreateMaybeMessage<::ChatMessageProto::addDepartMsgResponse>(Arena*);
template<> ::ChatMessageProto::addGroupMsgRequest* Arena::CreateMaybeMessage<::ChatMessageProto::addGroupMsgRequest>(Arena*);
template<> ::ChatMessageProto::addGroupMsgResponse* Arena::CreateMaybeMessage<::ChatMessageProto::addGroupMsgResponse>(Arena*);
template<> ::ChatMessageProto::addMsgRequest* Arena::CreateMaybeMessage<::ChatMessageProto::addMsgRequest>(Arena*);
template<> ::ChatMessageProto::addMsgResponse* Arena::CreateMaybeMessage<::ChatMessageProto::addMsgResponse>(Arena*);
template<> ::ChatMessageProto::chatMsg* Arena::CreateMaybeMessage<::ChatMessageProto::chatMsg>(Arena*);
template<> ::ChatMessageProto::delDepartMsgRequest* Arena::CreateMaybeMessage<::ChatMessageProto::delDepartMsgRequest>(Arena*);
template<> ::ChatMessageProto::delDepartMsgResponse* Arena::CreateMaybeMessage<::ChatMessageProto::delDepartMsgResponse>(Arena*);
template<> ::ChatMessageProto::delGroupMsgRequest* Arena::CreateMaybeMessage<::ChatMessageProto::delGroupMsgRequest>(Arena*);
template<> ::ChatMessageProto::delGroupMsgResponse* Arena::CreateMaybeMessage<::ChatMessageProto::delGroupMsgResponse>(Arena*);
template<> ::ChatMessageProto::delMsgRequest* Arena::CreateMaybeMessage<::ChatMessageProto::delMsgRequest>(Arena*);
template<> ::ChatMessageProto::delMsgResponse* Arena::CreateMaybeMessage<::ChatMessageProto::delMsgResponse>(Arena*);
template<> ::ChatMessageProto::departChatMsg* Arena::CreateMaybeMessage<::ChatMessageProto::departChatMsg>(Arena*);
template<> ::ChatMessageProto::groupChatMsg* Arena::CreateMaybeMessage<::ChatMessageProto::groupChatMsg>(Arena*);
template<> ::ChatMessageProto::queryDepartMsgRequest* Arena::CreateMaybeMessage<::ChatMessageProto::queryDepartMsgRequest>(Arena*);
template<> ::ChatMessageProto::queryDepartMsgResponse* Arena::CreateMaybeMessage<::ChatMessageProto::queryDepartMsgResponse>(Arena*);
template<> ::ChatMessageProto::queryGroupMsgRequest* Arena::CreateMaybeMessage<::ChatMessageProto::queryGroupMsgRequest>(Arena*);
template<> ::ChatMessageProto::queryGroupMsgResponse* Arena::CreateMaybeMessage<::ChatMessageProto::queryGroupMsgResponse>(Arena*);
template<> ::ChatMessageProto::queryMsgRequest* Arena::CreateMaybeMessage<::ChatMessageProto::queryMsgRequest>(Arena*);
template<> ::ChatMessageProto::queryMsgResponse* Arena::CreateMaybeMessage<::ChatMessageProto::queryMsgResponse>(Arena*);
template<> ::ChatMessageProto::queryOfflineMsgRequest* Arena::CreateMaybeMessage<::ChatMessageProto::queryOfflineMsgRequest>(Arena*);
template<> ::ChatMessageProto::queryOfflineMsgResponse* Arena::CreateMaybeMessage<::ChatMessageProto::queryOfflineMsgResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ChatMessageProto {

// ===================================================================

class ResultCode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatMessageProto.ResultCode) */ {
 public:
  ResultCode();
  virtual ~ResultCode();

  ResultCode(const ResultCode& from);
  ResultCode(ResultCode&& from) noexcept
    : ResultCode() {
    *this = ::std::move(from);
  }

  inline ResultCode& operator=(const ResultCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultCode& operator=(ResultCode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResultCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResultCode* internal_default_instance() {
    return reinterpret_cast<const ResultCode*>(
               &_ResultCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ResultCode& a, ResultCode& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultCode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResultCode* New() const final {
    return CreateMaybeMessage<ResultCode>(nullptr);
  }

  ResultCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResultCode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResultCode& from);
  void MergeFrom(const ResultCode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultCode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatMessageProto.ResultCode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChatMsg_2eproto);
    return ::descriptor_table_ChatMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 2,
    kErrcodeFieldNumber = 1,
  };
  // bytes errmsg = 2;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const void* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // int32 errcode = 1;
  void clear_errcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errcode() const;
  void set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errcode() const;
  void _internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChatMessageProto.ResultCode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::int32 errcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChatMsg_2eproto;
};
// -------------------------------------------------------------------

class chatMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatMessageProto.chatMsg) */ {
 public:
  chatMsg();
  virtual ~chatMsg();

  chatMsg(const chatMsg& from);
  chatMsg(chatMsg&& from) noexcept
    : chatMsg() {
    *this = ::std::move(from);
  }

  inline chatMsg& operator=(const chatMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline chatMsg& operator=(chatMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const chatMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const chatMsg* internal_default_instance() {
    return reinterpret_cast<const chatMsg*>(
               &_chatMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(chatMsg& a, chatMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(chatMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline chatMsg* New() const final {
    return CreateMaybeMessage<chatMsg>(nullptr);
  }

  chatMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<chatMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const chatMsg& from);
  void MergeFrom(const chatMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(chatMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatMessageProto.chatMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChatMsg_2eproto);
    return ::descriptor_table_ChatMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecvnameFieldNumber = 2,
    kSendnameFieldNumber = 3,
    kMessageFieldNumber = 4,
    kIsReadFieldNumber = 5,
    kMsgidFieldNumber = 1,
  };
  // bytes recvname = 2;
  void clear_recvname();
  const std::string& recvname() const;
  void set_recvname(const std::string& value);
  void set_recvname(std::string&& value);
  void set_recvname(const char* value);
  void set_recvname(const void* value, size_t size);
  std::string* mutable_recvname();
  std::string* release_recvname();
  void set_allocated_recvname(std::string* recvname);
  private:
  const std::string& _internal_recvname() const;
  void _internal_set_recvname(const std::string& value);
  std::string* _internal_mutable_recvname();
  public:

  // bytes sendname = 3;
  void clear_sendname();
  const std::string& sendname() const;
  void set_sendname(const std::string& value);
  void set_sendname(std::string&& value);
  void set_sendname(const char* value);
  void set_sendname(const void* value, size_t size);
  std::string* mutable_sendname();
  std::string* release_sendname();
  void set_allocated_sendname(std::string* sendname);
  private:
  const std::string& _internal_sendname() const;
  void _internal_set_sendname(const std::string& value);
  std::string* _internal_mutable_sendname();
  public:

  // bytes message = 4;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const void* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bytes isRead = 5;
  void clear_isread();
  const std::string& isread() const;
  void set_isread(const std::string& value);
  void set_isread(std::string&& value);
  void set_isread(const char* value);
  void set_isread(const void* value, size_t size);
  std::string* mutable_isread();
  std::string* release_isread();
  void set_allocated_isread(std::string* isread);
  private:
  const std::string& _internal_isread() const;
  void _internal_set_isread(const std::string& value);
  std::string* _internal_mutable_isread();
  public:

  // int32 msgid = 1;
  void clear_msgid();
  ::PROTOBUF_NAMESPACE_ID::int32 msgid() const;
  void set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msgid() const;
  void _internal_set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChatMessageProto.chatMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recvname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sendname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr isread_;
  ::PROTOBUF_NAMESPACE_ID::int32 msgid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChatMsg_2eproto;
};
// -------------------------------------------------------------------

class addMsgRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatMessageProto.addMsgRequest) */ {
 public:
  addMsgRequest();
  virtual ~addMsgRequest();

  addMsgRequest(const addMsgRequest& from);
  addMsgRequest(addMsgRequest&& from) noexcept
    : addMsgRequest() {
    *this = ::std::move(from);
  }

  inline addMsgRequest& operator=(const addMsgRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline addMsgRequest& operator=(addMsgRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const addMsgRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const addMsgRequest* internal_default_instance() {
    return reinterpret_cast<const addMsgRequest*>(
               &_addMsgRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(addMsgRequest& a, addMsgRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(addMsgRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline addMsgRequest* New() const final {
    return CreateMaybeMessage<addMsgRequest>(nullptr);
  }

  addMsgRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<addMsgRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const addMsgRequest& from);
  void MergeFrom(const addMsgRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addMsgRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatMessageProto.addMsgRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChatMsg_2eproto);
    return ::descriptor_table_ChatMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // .ChatMessageProto.chatMsg Msg = 1;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const ::ChatMessageProto::chatMsg& msg() const;
  ::ChatMessageProto::chatMsg* release_msg();
  ::ChatMessageProto::chatMsg* mutable_msg();
  void set_allocated_msg(::ChatMessageProto::chatMsg* msg);
  private:
  const ::ChatMessageProto::chatMsg& _internal_msg() const;
  ::ChatMessageProto::chatMsg* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:ChatMessageProto.addMsgRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::ChatMessageProto::chatMsg* msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChatMsg_2eproto;
};
// -------------------------------------------------------------------

class addMsgResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatMessageProto.addMsgResponse) */ {
 public:
  addMsgResponse();
  virtual ~addMsgResponse();

  addMsgResponse(const addMsgResponse& from);
  addMsgResponse(addMsgResponse&& from) noexcept
    : addMsgResponse() {
    *this = ::std::move(from);
  }

  inline addMsgResponse& operator=(const addMsgResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline addMsgResponse& operator=(addMsgResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const addMsgResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const addMsgResponse* internal_default_instance() {
    return reinterpret_cast<const addMsgResponse*>(
               &_addMsgResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(addMsgResponse& a, addMsgResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(addMsgResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline addMsgResponse* New() const final {
    return CreateMaybeMessage<addMsgResponse>(nullptr);
  }

  addMsgResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<addMsgResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const addMsgResponse& from);
  void MergeFrom(const addMsgResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addMsgResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatMessageProto.addMsgResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChatMsg_2eproto);
    return ::descriptor_table_ChatMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // .ChatMessageProto.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::ChatMessageProto::ResultCode& result() const;
  ::ChatMessageProto::ResultCode* release_result();
  ::ChatMessageProto::ResultCode* mutable_result();
  void set_allocated_result(::ChatMessageProto::ResultCode* result);
  private:
  const ::ChatMessageProto::ResultCode& _internal_result() const;
  ::ChatMessageProto::ResultCode* _internal_mutable_result();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ChatMessageProto.addMsgResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::ChatMessageProto::ResultCode* result_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChatMsg_2eproto;
};
// -------------------------------------------------------------------

class delMsgRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatMessageProto.delMsgRequest) */ {
 public:
  delMsgRequest();
  virtual ~delMsgRequest();

  delMsgRequest(const delMsgRequest& from);
  delMsgRequest(delMsgRequest&& from) noexcept
    : delMsgRequest() {
    *this = ::std::move(from);
  }

  inline delMsgRequest& operator=(const delMsgRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline delMsgRequest& operator=(delMsgRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const delMsgRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const delMsgRequest* internal_default_instance() {
    return reinterpret_cast<const delMsgRequest*>(
               &_delMsgRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(delMsgRequest& a, delMsgRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(delMsgRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline delMsgRequest* New() const final {
    return CreateMaybeMessage<delMsgRequest>(nullptr);
  }

  delMsgRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<delMsgRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const delMsgRequest& from);
  void MergeFrom(const delMsgRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(delMsgRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatMessageProto.delMsgRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChatMsg_2eproto);
    return ::descriptor_table_ChatMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // .ChatMessageProto.chatMsg Msg = 1;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const ::ChatMessageProto::chatMsg& msg() const;
  ::ChatMessageProto::chatMsg* release_msg();
  ::ChatMessageProto::chatMsg* mutable_msg();
  void set_allocated_msg(::ChatMessageProto::chatMsg* msg);
  private:
  const ::ChatMessageProto::chatMsg& _internal_msg() const;
  ::ChatMessageProto::chatMsg* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:ChatMessageProto.delMsgRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::ChatMessageProto::chatMsg* msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChatMsg_2eproto;
};
// -------------------------------------------------------------------

class delMsgResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatMessageProto.delMsgResponse) */ {
 public:
  delMsgResponse();
  virtual ~delMsgResponse();

  delMsgResponse(const delMsgResponse& from);
  delMsgResponse(delMsgResponse&& from) noexcept
    : delMsgResponse() {
    *this = ::std::move(from);
  }

  inline delMsgResponse& operator=(const delMsgResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline delMsgResponse& operator=(delMsgResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const delMsgResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const delMsgResponse* internal_default_instance() {
    return reinterpret_cast<const delMsgResponse*>(
               &_delMsgResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(delMsgResponse& a, delMsgResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(delMsgResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline delMsgResponse* New() const final {
    return CreateMaybeMessage<delMsgResponse>(nullptr);
  }

  delMsgResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<delMsgResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const delMsgResponse& from);
  void MergeFrom(const delMsgResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(delMsgResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatMessageProto.delMsgResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChatMsg_2eproto);
    return ::descriptor_table_ChatMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // .ChatMessageProto.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::ChatMessageProto::ResultCode& result() const;
  ::ChatMessageProto::ResultCode* release_result();
  ::ChatMessageProto::ResultCode* mutable_result();
  void set_allocated_result(::ChatMessageProto::ResultCode* result);
  private:
  const ::ChatMessageProto::ResultCode& _internal_result() const;
  ::ChatMessageProto::ResultCode* _internal_mutable_result();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ChatMessageProto.delMsgResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::ChatMessageProto::ResultCode* result_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChatMsg_2eproto;
};
// -------------------------------------------------------------------

class queryMsgRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatMessageProto.queryMsgRequest) */ {
 public:
  queryMsgRequest();
  virtual ~queryMsgRequest();

  queryMsgRequest(const queryMsgRequest& from);
  queryMsgRequest(queryMsgRequest&& from) noexcept
    : queryMsgRequest() {
    *this = ::std::move(from);
  }

  inline queryMsgRequest& operator=(const queryMsgRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline queryMsgRequest& operator=(queryMsgRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const queryMsgRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const queryMsgRequest* internal_default_instance() {
    return reinterpret_cast<const queryMsgRequest*>(
               &_queryMsgRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(queryMsgRequest& a, queryMsgRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(queryMsgRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline queryMsgRequest* New() const final {
    return CreateMaybeMessage<queryMsgRequest>(nullptr);
  }

  queryMsgRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<queryMsgRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const queryMsgRequest& from);
  void MergeFrom(const queryMsgRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(queryMsgRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatMessageProto.queryMsgRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChatMsg_2eproto);
    return ::descriptor_table_ChatMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecvnameFieldNumber = 1,
    kSendnameFieldNumber = 2,
  };
  // bytes recvname = 1;
  void clear_recvname();
  const std::string& recvname() const;
  void set_recvname(const std::string& value);
  void set_recvname(std::string&& value);
  void set_recvname(const char* value);
  void set_recvname(const void* value, size_t size);
  std::string* mutable_recvname();
  std::string* release_recvname();
  void set_allocated_recvname(std::string* recvname);
  private:
  const std::string& _internal_recvname() const;
  void _internal_set_recvname(const std::string& value);
  std::string* _internal_mutable_recvname();
  public:

  // bytes sendname = 2;
  void clear_sendname();
  const std::string& sendname() const;
  void set_sendname(const std::string& value);
  void set_sendname(std::string&& value);
  void set_sendname(const char* value);
  void set_sendname(const void* value, size_t size);
  std::string* mutable_sendname();
  std::string* release_sendname();
  void set_allocated_sendname(std::string* sendname);
  private:
  const std::string& _internal_sendname() const;
  void _internal_set_sendname(const std::string& value);
  std::string* _internal_mutable_sendname();
  public:

  // @@protoc_insertion_point(class_scope:ChatMessageProto.queryMsgRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recvname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sendname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChatMsg_2eproto;
};
// -------------------------------------------------------------------

class queryMsgResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatMessageProto.queryMsgResponse) */ {
 public:
  queryMsgResponse();
  virtual ~queryMsgResponse();

  queryMsgResponse(const queryMsgResponse& from);
  queryMsgResponse(queryMsgResponse&& from) noexcept
    : queryMsgResponse() {
    *this = ::std::move(from);
  }

  inline queryMsgResponse& operator=(const queryMsgResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline queryMsgResponse& operator=(queryMsgResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const queryMsgResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const queryMsgResponse* internal_default_instance() {
    return reinterpret_cast<const queryMsgResponse*>(
               &_queryMsgResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(queryMsgResponse& a, queryMsgResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(queryMsgResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline queryMsgResponse* New() const final {
    return CreateMaybeMessage<queryMsgResponse>(nullptr);
  }

  queryMsgResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<queryMsgResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const queryMsgResponse& from);
  void MergeFrom(const queryMsgResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(queryMsgResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatMessageProto.queryMsgResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChatMsg_2eproto);
    return ::descriptor_table_ChatMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kResultFieldNumber = 2,
    kSuccessFieldNumber = 3,
  };
  // repeated .ChatMessageProto.chatMsg Msg = 1;
  int msg_size() const;
  private:
  int _internal_msg_size() const;
  public:
  void clear_msg();
  ::ChatMessageProto::chatMsg* mutable_msg(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatMessageProto::chatMsg >*
      mutable_msg();
  private:
  const ::ChatMessageProto::chatMsg& _internal_msg(int index) const;
  ::ChatMessageProto::chatMsg* _internal_add_msg();
  public:
  const ::ChatMessageProto::chatMsg& msg(int index) const;
  ::ChatMessageProto::chatMsg* add_msg();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatMessageProto::chatMsg >&
      msg() const;

  // .ChatMessageProto.ResultCode result = 2;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::ChatMessageProto::ResultCode& result() const;
  ::ChatMessageProto::ResultCode* release_result();
  ::ChatMessageProto::ResultCode* mutable_result();
  void set_allocated_result(::ChatMessageProto::ResultCode* result);
  private:
  const ::ChatMessageProto::ResultCode& _internal_result() const;
  ::ChatMessageProto::ResultCode* _internal_mutable_result();
  public:

  // bool success = 3;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ChatMessageProto.queryMsgResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatMessageProto::chatMsg > msg_;
  ::ChatMessageProto::ResultCode* result_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChatMsg_2eproto;
};
// -------------------------------------------------------------------

class groupChatMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatMessageProto.groupChatMsg) */ {
 public:
  groupChatMsg();
  virtual ~groupChatMsg();

  groupChatMsg(const groupChatMsg& from);
  groupChatMsg(groupChatMsg&& from) noexcept
    : groupChatMsg() {
    *this = ::std::move(from);
  }

  inline groupChatMsg& operator=(const groupChatMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline groupChatMsg& operator=(groupChatMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const groupChatMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const groupChatMsg* internal_default_instance() {
    return reinterpret_cast<const groupChatMsg*>(
               &_groupChatMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(groupChatMsg& a, groupChatMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(groupChatMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline groupChatMsg* New() const final {
    return CreateMaybeMessage<groupChatMsg>(nullptr);
  }

  groupChatMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<groupChatMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const groupChatMsg& from);
  void MergeFrom(const groupChatMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(groupChatMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatMessageProto.groupChatMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChatMsg_2eproto);
    return ::descriptor_table_ChatMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupnameFieldNumber = 2,
    kSendnameFieldNumber = 3,
    kMessageFieldNumber = 4,
    kMsgidFieldNumber = 1,
  };
  // bytes groupname = 2;
  void clear_groupname();
  const std::string& groupname() const;
  void set_groupname(const std::string& value);
  void set_groupname(std::string&& value);
  void set_groupname(const char* value);
  void set_groupname(const void* value, size_t size);
  std::string* mutable_groupname();
  std::string* release_groupname();
  void set_allocated_groupname(std::string* groupname);
  private:
  const std::string& _internal_groupname() const;
  void _internal_set_groupname(const std::string& value);
  std::string* _internal_mutable_groupname();
  public:

  // bytes sendname = 3;
  void clear_sendname();
  const std::string& sendname() const;
  void set_sendname(const std::string& value);
  void set_sendname(std::string&& value);
  void set_sendname(const char* value);
  void set_sendname(const void* value, size_t size);
  std::string* mutable_sendname();
  std::string* release_sendname();
  void set_allocated_sendname(std::string* sendname);
  private:
  const std::string& _internal_sendname() const;
  void _internal_set_sendname(const std::string& value);
  std::string* _internal_mutable_sendname();
  public:

  // bytes message = 4;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const void* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 msgid = 1;
  void clear_msgid();
  ::PROTOBUF_NAMESPACE_ID::int32 msgid() const;
  void set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msgid() const;
  void _internal_set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChatMessageProto.groupChatMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sendname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 msgid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChatMsg_2eproto;
};
// -------------------------------------------------------------------

class addGroupMsgRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatMessageProto.addGroupMsgRequest) */ {
 public:
  addGroupMsgRequest();
  virtual ~addGroupMsgRequest();

  addGroupMsgRequest(const addGroupMsgRequest& from);
  addGroupMsgRequest(addGroupMsgRequest&& from) noexcept
    : addGroupMsgRequest() {
    *this = ::std::move(from);
  }

  inline addGroupMsgRequest& operator=(const addGroupMsgRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline addGroupMsgRequest& operator=(addGroupMsgRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const addGroupMsgRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const addGroupMsgRequest* internal_default_instance() {
    return reinterpret_cast<const addGroupMsgRequest*>(
               &_addGroupMsgRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(addGroupMsgRequest& a, addGroupMsgRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(addGroupMsgRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline addGroupMsgRequest* New() const final {
    return CreateMaybeMessage<addGroupMsgRequest>(nullptr);
  }

  addGroupMsgRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<addGroupMsgRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const addGroupMsgRequest& from);
  void MergeFrom(const addGroupMsgRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addGroupMsgRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatMessageProto.addGroupMsgRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChatMsg_2eproto);
    return ::descriptor_table_ChatMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupMsgFieldNumber = 1,
  };
  // .ChatMessageProto.groupChatMsg GroupMsg = 1;
  bool has_groupmsg() const;
  private:
  bool _internal_has_groupmsg() const;
  public:
  void clear_groupmsg();
  const ::ChatMessageProto::groupChatMsg& groupmsg() const;
  ::ChatMessageProto::groupChatMsg* release_groupmsg();
  ::ChatMessageProto::groupChatMsg* mutable_groupmsg();
  void set_allocated_groupmsg(::ChatMessageProto::groupChatMsg* groupmsg);
  private:
  const ::ChatMessageProto::groupChatMsg& _internal_groupmsg() const;
  ::ChatMessageProto::groupChatMsg* _internal_mutable_groupmsg();
  public:

  // @@protoc_insertion_point(class_scope:ChatMessageProto.addGroupMsgRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::ChatMessageProto::groupChatMsg* groupmsg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChatMsg_2eproto;
};
// -------------------------------------------------------------------

class addGroupMsgResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatMessageProto.addGroupMsgResponse) */ {
 public:
  addGroupMsgResponse();
  virtual ~addGroupMsgResponse();

  addGroupMsgResponse(const addGroupMsgResponse& from);
  addGroupMsgResponse(addGroupMsgResponse&& from) noexcept
    : addGroupMsgResponse() {
    *this = ::std::move(from);
  }

  inline addGroupMsgResponse& operator=(const addGroupMsgResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline addGroupMsgResponse& operator=(addGroupMsgResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const addGroupMsgResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const addGroupMsgResponse* internal_default_instance() {
    return reinterpret_cast<const addGroupMsgResponse*>(
               &_addGroupMsgResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(addGroupMsgResponse& a, addGroupMsgResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(addGroupMsgResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline addGroupMsgResponse* New() const final {
    return CreateMaybeMessage<addGroupMsgResponse>(nullptr);
  }

  addGroupMsgResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<addGroupMsgResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const addGroupMsgResponse& from);
  void MergeFrom(const addGroupMsgResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addGroupMsgResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatMessageProto.addGroupMsgResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChatMsg_2eproto);
    return ::descriptor_table_ChatMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // .ChatMessageProto.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::ChatMessageProto::ResultCode& result() const;
  ::ChatMessageProto::ResultCode* release_result();
  ::ChatMessageProto::ResultCode* mutable_result();
  void set_allocated_result(::ChatMessageProto::ResultCode* result);
  private:
  const ::ChatMessageProto::ResultCode& _internal_result() const;
  ::ChatMessageProto::ResultCode* _internal_mutable_result();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ChatMessageProto.addGroupMsgResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::ChatMessageProto::ResultCode* result_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChatMsg_2eproto;
};
// -------------------------------------------------------------------

class delGroupMsgRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatMessageProto.delGroupMsgRequest) */ {
 public:
  delGroupMsgRequest();
  virtual ~delGroupMsgRequest();

  delGroupMsgRequest(const delGroupMsgRequest& from);
  delGroupMsgRequest(delGroupMsgRequest&& from) noexcept
    : delGroupMsgRequest() {
    *this = ::std::move(from);
  }

  inline delGroupMsgRequest& operator=(const delGroupMsgRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline delGroupMsgRequest& operator=(delGroupMsgRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const delGroupMsgRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const delGroupMsgRequest* internal_default_instance() {
    return reinterpret_cast<const delGroupMsgRequest*>(
               &_delGroupMsgRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(delGroupMsgRequest& a, delGroupMsgRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(delGroupMsgRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline delGroupMsgRequest* New() const final {
    return CreateMaybeMessage<delGroupMsgRequest>(nullptr);
  }

  delGroupMsgRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<delGroupMsgRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const delGroupMsgRequest& from);
  void MergeFrom(const delGroupMsgRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(delGroupMsgRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatMessageProto.delGroupMsgRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChatMsg_2eproto);
    return ::descriptor_table_ChatMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupMsgFieldNumber = 1,
  };
  // .ChatMessageProto.groupChatMsg GroupMsg = 1;
  bool has_groupmsg() const;
  private:
  bool _internal_has_groupmsg() const;
  public:
  void clear_groupmsg();
  const ::ChatMessageProto::groupChatMsg& groupmsg() const;
  ::ChatMessageProto::groupChatMsg* release_groupmsg();
  ::ChatMessageProto::groupChatMsg* mutable_groupmsg();
  void set_allocated_groupmsg(::ChatMessageProto::groupChatMsg* groupmsg);
  private:
  const ::ChatMessageProto::groupChatMsg& _internal_groupmsg() const;
  ::ChatMessageProto::groupChatMsg* _internal_mutable_groupmsg();
  public:

  // @@protoc_insertion_point(class_scope:ChatMessageProto.delGroupMsgRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::ChatMessageProto::groupChatMsg* groupmsg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChatMsg_2eproto;
};
// -------------------------------------------------------------------

class delGroupMsgResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatMessageProto.delGroupMsgResponse) */ {
 public:
  delGroupMsgResponse();
  virtual ~delGroupMsgResponse();

  delGroupMsgResponse(const delGroupMsgResponse& from);
  delGroupMsgResponse(delGroupMsgResponse&& from) noexcept
    : delGroupMsgResponse() {
    *this = ::std::move(from);
  }

  inline delGroupMsgResponse& operator=(const delGroupMsgResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline delGroupMsgResponse& operator=(delGroupMsgResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const delGroupMsgResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const delGroupMsgResponse* internal_default_instance() {
    return reinterpret_cast<const delGroupMsgResponse*>(
               &_delGroupMsgResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(delGroupMsgResponse& a, delGroupMsgResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(delGroupMsgResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline delGroupMsgResponse* New() const final {
    return CreateMaybeMessage<delGroupMsgResponse>(nullptr);
  }

  delGroupMsgResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<delGroupMsgResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const delGroupMsgResponse& from);
  void MergeFrom(const delGroupMsgResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(delGroupMsgResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatMessageProto.delGroupMsgResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChatMsg_2eproto);
    return ::descriptor_table_ChatMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // .ChatMessageProto.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::ChatMessageProto::ResultCode& result() const;
  ::ChatMessageProto::ResultCode* release_result();
  ::ChatMessageProto::ResultCode* mutable_result();
  void set_allocated_result(::ChatMessageProto::ResultCode* result);
  private:
  const ::ChatMessageProto::ResultCode& _internal_result() const;
  ::ChatMessageProto::ResultCode* _internal_mutable_result();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ChatMessageProto.delGroupMsgResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::ChatMessageProto::ResultCode* result_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChatMsg_2eproto;
};
// -------------------------------------------------------------------

class queryGroupMsgRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatMessageProto.queryGroupMsgRequest) */ {
 public:
  queryGroupMsgRequest();
  virtual ~queryGroupMsgRequest();

  queryGroupMsgRequest(const queryGroupMsgRequest& from);
  queryGroupMsgRequest(queryGroupMsgRequest&& from) noexcept
    : queryGroupMsgRequest() {
    *this = ::std::move(from);
  }

  inline queryGroupMsgRequest& operator=(const queryGroupMsgRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline queryGroupMsgRequest& operator=(queryGroupMsgRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const queryGroupMsgRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const queryGroupMsgRequest* internal_default_instance() {
    return reinterpret_cast<const queryGroupMsgRequest*>(
               &_queryGroupMsgRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(queryGroupMsgRequest& a, queryGroupMsgRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(queryGroupMsgRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline queryGroupMsgRequest* New() const final {
    return CreateMaybeMessage<queryGroupMsgRequest>(nullptr);
  }

  queryGroupMsgRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<queryGroupMsgRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const queryGroupMsgRequest& from);
  void MergeFrom(const queryGroupMsgRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(queryGroupMsgRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatMessageProto.queryGroupMsgRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChatMsg_2eproto);
    return ::descriptor_table_ChatMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
  };
  // bytes username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const void* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // @@protoc_insertion_point(class_scope:ChatMessageProto.queryGroupMsgRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChatMsg_2eproto;
};
// -------------------------------------------------------------------

class queryGroupMsgResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatMessageProto.queryGroupMsgResponse) */ {
 public:
  queryGroupMsgResponse();
  virtual ~queryGroupMsgResponse();

  queryGroupMsgResponse(const queryGroupMsgResponse& from);
  queryGroupMsgResponse(queryGroupMsgResponse&& from) noexcept
    : queryGroupMsgResponse() {
    *this = ::std::move(from);
  }

  inline queryGroupMsgResponse& operator=(const queryGroupMsgResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline queryGroupMsgResponse& operator=(queryGroupMsgResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const queryGroupMsgResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const queryGroupMsgResponse* internal_default_instance() {
    return reinterpret_cast<const queryGroupMsgResponse*>(
               &_queryGroupMsgResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(queryGroupMsgResponse& a, queryGroupMsgResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(queryGroupMsgResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline queryGroupMsgResponse* New() const final {
    return CreateMaybeMessage<queryGroupMsgResponse>(nullptr);
  }

  queryGroupMsgResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<queryGroupMsgResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const queryGroupMsgResponse& from);
  void MergeFrom(const queryGroupMsgResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(queryGroupMsgResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatMessageProto.queryGroupMsgResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChatMsg_2eproto);
    return ::descriptor_table_ChatMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupMsgFieldNumber = 1,
    kResultFieldNumber = 2,
    kSuccessFieldNumber = 3,
  };
  // repeated .ChatMessageProto.groupChatMsg GroupMsg = 1;
  int groupmsg_size() const;
  private:
  int _internal_groupmsg_size() const;
  public:
  void clear_groupmsg();
  ::ChatMessageProto::groupChatMsg* mutable_groupmsg(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatMessageProto::groupChatMsg >*
      mutable_groupmsg();
  private:
  const ::ChatMessageProto::groupChatMsg& _internal_groupmsg(int index) const;
  ::ChatMessageProto::groupChatMsg* _internal_add_groupmsg();
  public:
  const ::ChatMessageProto::groupChatMsg& groupmsg(int index) const;
  ::ChatMessageProto::groupChatMsg* add_groupmsg();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatMessageProto::groupChatMsg >&
      groupmsg() const;

  // .ChatMessageProto.ResultCode result = 2;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::ChatMessageProto::ResultCode& result() const;
  ::ChatMessageProto::ResultCode* release_result();
  ::ChatMessageProto::ResultCode* mutable_result();
  void set_allocated_result(::ChatMessageProto::ResultCode* result);
  private:
  const ::ChatMessageProto::ResultCode& _internal_result() const;
  ::ChatMessageProto::ResultCode* _internal_mutable_result();
  public:

  // bool success = 3;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ChatMessageProto.queryGroupMsgResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatMessageProto::groupChatMsg > groupmsg_;
  ::ChatMessageProto::ResultCode* result_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChatMsg_2eproto;
};
// -------------------------------------------------------------------

class departChatMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatMessageProto.departChatMsg) */ {
 public:
  departChatMsg();
  virtual ~departChatMsg();

  departChatMsg(const departChatMsg& from);
  departChatMsg(departChatMsg&& from) noexcept
    : departChatMsg() {
    *this = ::std::move(from);
  }

  inline departChatMsg& operator=(const departChatMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline departChatMsg& operator=(departChatMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const departChatMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const departChatMsg* internal_default_instance() {
    return reinterpret_cast<const departChatMsg*>(
               &_departChatMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(departChatMsg& a, departChatMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(departChatMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline departChatMsg* New() const final {
    return CreateMaybeMessage<departChatMsg>(nullptr);
  }

  departChatMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<departChatMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const departChatMsg& from);
  void MergeFrom(const departChatMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(departChatMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatMessageProto.departChatMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChatMsg_2eproto);
    return ::descriptor_table_ChatMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDepartnameFieldNumber = 2,
    kSendnameFieldNumber = 3,
    kMessageFieldNumber = 4,
    kMsgidFieldNumber = 1,
  };
  // bytes departname = 2;
  void clear_departname();
  const std::string& departname() const;
  void set_departname(const std::string& value);
  void set_departname(std::string&& value);
  void set_departname(const char* value);
  void set_departname(const void* value, size_t size);
  std::string* mutable_departname();
  std::string* release_departname();
  void set_allocated_departname(std::string* departname);
  private:
  const std::string& _internal_departname() const;
  void _internal_set_departname(const std::string& value);
  std::string* _internal_mutable_departname();
  public:

  // bytes sendname = 3;
  void clear_sendname();
  const std::string& sendname() const;
  void set_sendname(const std::string& value);
  void set_sendname(std::string&& value);
  void set_sendname(const char* value);
  void set_sendname(const void* value, size_t size);
  std::string* mutable_sendname();
  std::string* release_sendname();
  void set_allocated_sendname(std::string* sendname);
  private:
  const std::string& _internal_sendname() const;
  void _internal_set_sendname(const std::string& value);
  std::string* _internal_mutable_sendname();
  public:

  // bytes message = 4;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const void* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 msgid = 1;
  void clear_msgid();
  ::PROTOBUF_NAMESPACE_ID::int32 msgid() const;
  void set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msgid() const;
  void _internal_set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChatMessageProto.departChatMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr departname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sendname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 msgid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChatMsg_2eproto;
};
// -------------------------------------------------------------------

class addDepartMsgRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatMessageProto.addDepartMsgRequest) */ {
 public:
  addDepartMsgRequest();
  virtual ~addDepartMsgRequest();

  addDepartMsgRequest(const addDepartMsgRequest& from);
  addDepartMsgRequest(addDepartMsgRequest&& from) noexcept
    : addDepartMsgRequest() {
    *this = ::std::move(from);
  }

  inline addDepartMsgRequest& operator=(const addDepartMsgRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline addDepartMsgRequest& operator=(addDepartMsgRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const addDepartMsgRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const addDepartMsgRequest* internal_default_instance() {
    return reinterpret_cast<const addDepartMsgRequest*>(
               &_addDepartMsgRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(addDepartMsgRequest& a, addDepartMsgRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(addDepartMsgRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline addDepartMsgRequest* New() const final {
    return CreateMaybeMessage<addDepartMsgRequest>(nullptr);
  }

  addDepartMsgRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<addDepartMsgRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const addDepartMsgRequest& from);
  void MergeFrom(const addDepartMsgRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addDepartMsgRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatMessageProto.addDepartMsgRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChatMsg_2eproto);
    return ::descriptor_table_ChatMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDepartMsgFieldNumber = 1,
  };
  // .ChatMessageProto.departChatMsg DepartMsg = 1;
  bool has_departmsg() const;
  private:
  bool _internal_has_departmsg() const;
  public:
  void clear_departmsg();
  const ::ChatMessageProto::departChatMsg& departmsg() const;
  ::ChatMessageProto::departChatMsg* release_departmsg();
  ::ChatMessageProto::departChatMsg* mutable_departmsg();
  void set_allocated_departmsg(::ChatMessageProto::departChatMsg* departmsg);
  private:
  const ::ChatMessageProto::departChatMsg& _internal_departmsg() const;
  ::ChatMessageProto::departChatMsg* _internal_mutable_departmsg();
  public:

  // @@protoc_insertion_point(class_scope:ChatMessageProto.addDepartMsgRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::ChatMessageProto::departChatMsg* departmsg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChatMsg_2eproto;
};
// -------------------------------------------------------------------

class addDepartMsgResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatMessageProto.addDepartMsgResponse) */ {
 public:
  addDepartMsgResponse();
  virtual ~addDepartMsgResponse();

  addDepartMsgResponse(const addDepartMsgResponse& from);
  addDepartMsgResponse(addDepartMsgResponse&& from) noexcept
    : addDepartMsgResponse() {
    *this = ::std::move(from);
  }

  inline addDepartMsgResponse& operator=(const addDepartMsgResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline addDepartMsgResponse& operator=(addDepartMsgResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const addDepartMsgResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const addDepartMsgResponse* internal_default_instance() {
    return reinterpret_cast<const addDepartMsgResponse*>(
               &_addDepartMsgResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(addDepartMsgResponse& a, addDepartMsgResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(addDepartMsgResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline addDepartMsgResponse* New() const final {
    return CreateMaybeMessage<addDepartMsgResponse>(nullptr);
  }

  addDepartMsgResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<addDepartMsgResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const addDepartMsgResponse& from);
  void MergeFrom(const addDepartMsgResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addDepartMsgResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatMessageProto.addDepartMsgResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChatMsg_2eproto);
    return ::descriptor_table_ChatMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // .ChatMessageProto.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::ChatMessageProto::ResultCode& result() const;
  ::ChatMessageProto::ResultCode* release_result();
  ::ChatMessageProto::ResultCode* mutable_result();
  void set_allocated_result(::ChatMessageProto::ResultCode* result);
  private:
  const ::ChatMessageProto::ResultCode& _internal_result() const;
  ::ChatMessageProto::ResultCode* _internal_mutable_result();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ChatMessageProto.addDepartMsgResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::ChatMessageProto::ResultCode* result_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChatMsg_2eproto;
};
// -------------------------------------------------------------------

class delDepartMsgRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatMessageProto.delDepartMsgRequest) */ {
 public:
  delDepartMsgRequest();
  virtual ~delDepartMsgRequest();

  delDepartMsgRequest(const delDepartMsgRequest& from);
  delDepartMsgRequest(delDepartMsgRequest&& from) noexcept
    : delDepartMsgRequest() {
    *this = ::std::move(from);
  }

  inline delDepartMsgRequest& operator=(const delDepartMsgRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline delDepartMsgRequest& operator=(delDepartMsgRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const delDepartMsgRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const delDepartMsgRequest* internal_default_instance() {
    return reinterpret_cast<const delDepartMsgRequest*>(
               &_delDepartMsgRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(delDepartMsgRequest& a, delDepartMsgRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(delDepartMsgRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline delDepartMsgRequest* New() const final {
    return CreateMaybeMessage<delDepartMsgRequest>(nullptr);
  }

  delDepartMsgRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<delDepartMsgRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const delDepartMsgRequest& from);
  void MergeFrom(const delDepartMsgRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(delDepartMsgRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatMessageProto.delDepartMsgRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChatMsg_2eproto);
    return ::descriptor_table_ChatMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDepartMsgFieldNumber = 1,
  };
  // .ChatMessageProto.departChatMsg DepartMsg = 1;
  bool has_departmsg() const;
  private:
  bool _internal_has_departmsg() const;
  public:
  void clear_departmsg();
  const ::ChatMessageProto::departChatMsg& departmsg() const;
  ::ChatMessageProto::departChatMsg* release_departmsg();
  ::ChatMessageProto::departChatMsg* mutable_departmsg();
  void set_allocated_departmsg(::ChatMessageProto::departChatMsg* departmsg);
  private:
  const ::ChatMessageProto::departChatMsg& _internal_departmsg() const;
  ::ChatMessageProto::departChatMsg* _internal_mutable_departmsg();
  public:

  // @@protoc_insertion_point(class_scope:ChatMessageProto.delDepartMsgRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::ChatMessageProto::departChatMsg* departmsg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChatMsg_2eproto;
};
// -------------------------------------------------------------------

class delDepartMsgResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatMessageProto.delDepartMsgResponse) */ {
 public:
  delDepartMsgResponse();
  virtual ~delDepartMsgResponse();

  delDepartMsgResponse(const delDepartMsgResponse& from);
  delDepartMsgResponse(delDepartMsgResponse&& from) noexcept
    : delDepartMsgResponse() {
    *this = ::std::move(from);
  }

  inline delDepartMsgResponse& operator=(const delDepartMsgResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline delDepartMsgResponse& operator=(delDepartMsgResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const delDepartMsgResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const delDepartMsgResponse* internal_default_instance() {
    return reinterpret_cast<const delDepartMsgResponse*>(
               &_delDepartMsgResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(delDepartMsgResponse& a, delDepartMsgResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(delDepartMsgResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline delDepartMsgResponse* New() const final {
    return CreateMaybeMessage<delDepartMsgResponse>(nullptr);
  }

  delDepartMsgResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<delDepartMsgResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const delDepartMsgResponse& from);
  void MergeFrom(const delDepartMsgResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(delDepartMsgResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatMessageProto.delDepartMsgResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChatMsg_2eproto);
    return ::descriptor_table_ChatMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // .ChatMessageProto.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::ChatMessageProto::ResultCode& result() const;
  ::ChatMessageProto::ResultCode* release_result();
  ::ChatMessageProto::ResultCode* mutable_result();
  void set_allocated_result(::ChatMessageProto::ResultCode* result);
  private:
  const ::ChatMessageProto::ResultCode& _internal_result() const;
  ::ChatMessageProto::ResultCode* _internal_mutable_result();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ChatMessageProto.delDepartMsgResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::ChatMessageProto::ResultCode* result_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChatMsg_2eproto;
};
// -------------------------------------------------------------------

class queryDepartMsgRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatMessageProto.queryDepartMsgRequest) */ {
 public:
  queryDepartMsgRequest();
  virtual ~queryDepartMsgRequest();

  queryDepartMsgRequest(const queryDepartMsgRequest& from);
  queryDepartMsgRequest(queryDepartMsgRequest&& from) noexcept
    : queryDepartMsgRequest() {
    *this = ::std::move(from);
  }

  inline queryDepartMsgRequest& operator=(const queryDepartMsgRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline queryDepartMsgRequest& operator=(queryDepartMsgRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const queryDepartMsgRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const queryDepartMsgRequest* internal_default_instance() {
    return reinterpret_cast<const queryDepartMsgRequest*>(
               &_queryDepartMsgRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(queryDepartMsgRequest& a, queryDepartMsgRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(queryDepartMsgRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline queryDepartMsgRequest* New() const final {
    return CreateMaybeMessage<queryDepartMsgRequest>(nullptr);
  }

  queryDepartMsgRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<queryDepartMsgRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const queryDepartMsgRequest& from);
  void MergeFrom(const queryDepartMsgRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(queryDepartMsgRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatMessageProto.queryDepartMsgRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChatMsg_2eproto);
    return ::descriptor_table_ChatMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
  };
  // bytes username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const void* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // @@protoc_insertion_point(class_scope:ChatMessageProto.queryDepartMsgRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChatMsg_2eproto;
};
// -------------------------------------------------------------------

class queryDepartMsgResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatMessageProto.queryDepartMsgResponse) */ {
 public:
  queryDepartMsgResponse();
  virtual ~queryDepartMsgResponse();

  queryDepartMsgResponse(const queryDepartMsgResponse& from);
  queryDepartMsgResponse(queryDepartMsgResponse&& from) noexcept
    : queryDepartMsgResponse() {
    *this = ::std::move(from);
  }

  inline queryDepartMsgResponse& operator=(const queryDepartMsgResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline queryDepartMsgResponse& operator=(queryDepartMsgResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const queryDepartMsgResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const queryDepartMsgResponse* internal_default_instance() {
    return reinterpret_cast<const queryDepartMsgResponse*>(
               &_queryDepartMsgResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(queryDepartMsgResponse& a, queryDepartMsgResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(queryDepartMsgResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline queryDepartMsgResponse* New() const final {
    return CreateMaybeMessage<queryDepartMsgResponse>(nullptr);
  }

  queryDepartMsgResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<queryDepartMsgResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const queryDepartMsgResponse& from);
  void MergeFrom(const queryDepartMsgResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(queryDepartMsgResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatMessageProto.queryDepartMsgResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChatMsg_2eproto);
    return ::descriptor_table_ChatMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDepartMsgFieldNumber = 1,
    kResultFieldNumber = 2,
    kSuccessFieldNumber = 3,
  };
  // repeated .ChatMessageProto.departChatMsg DepartMsg = 1;
  int departmsg_size() const;
  private:
  int _internal_departmsg_size() const;
  public:
  void clear_departmsg();
  ::ChatMessageProto::departChatMsg* mutable_departmsg(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatMessageProto::departChatMsg >*
      mutable_departmsg();
  private:
  const ::ChatMessageProto::departChatMsg& _internal_departmsg(int index) const;
  ::ChatMessageProto::departChatMsg* _internal_add_departmsg();
  public:
  const ::ChatMessageProto::departChatMsg& departmsg(int index) const;
  ::ChatMessageProto::departChatMsg* add_departmsg();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatMessageProto::departChatMsg >&
      departmsg() const;

  // .ChatMessageProto.ResultCode result = 2;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::ChatMessageProto::ResultCode& result() const;
  ::ChatMessageProto::ResultCode* release_result();
  ::ChatMessageProto::ResultCode* mutable_result();
  void set_allocated_result(::ChatMessageProto::ResultCode* result);
  private:
  const ::ChatMessageProto::ResultCode& _internal_result() const;
  ::ChatMessageProto::ResultCode* _internal_mutable_result();
  public:

  // bool success = 3;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ChatMessageProto.queryDepartMsgResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatMessageProto::departChatMsg > departmsg_;
  ::ChatMessageProto::ResultCode* result_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChatMsg_2eproto;
};
// -------------------------------------------------------------------

class queryOfflineMsgRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatMessageProto.queryOfflineMsgRequest) */ {
 public:
  queryOfflineMsgRequest();
  virtual ~queryOfflineMsgRequest();

  queryOfflineMsgRequest(const queryOfflineMsgRequest& from);
  queryOfflineMsgRequest(queryOfflineMsgRequest&& from) noexcept
    : queryOfflineMsgRequest() {
    *this = ::std::move(from);
  }

  inline queryOfflineMsgRequest& operator=(const queryOfflineMsgRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline queryOfflineMsgRequest& operator=(queryOfflineMsgRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const queryOfflineMsgRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const queryOfflineMsgRequest* internal_default_instance() {
    return reinterpret_cast<const queryOfflineMsgRequest*>(
               &_queryOfflineMsgRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(queryOfflineMsgRequest& a, queryOfflineMsgRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(queryOfflineMsgRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline queryOfflineMsgRequest* New() const final {
    return CreateMaybeMessage<queryOfflineMsgRequest>(nullptr);
  }

  queryOfflineMsgRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<queryOfflineMsgRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const queryOfflineMsgRequest& from);
  void MergeFrom(const queryOfflineMsgRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(queryOfflineMsgRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatMessageProto.queryOfflineMsgRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChatMsg_2eproto);
    return ::descriptor_table_ChatMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecvnameFieldNumber = 1,
  };
  // bytes recvname = 1;
  void clear_recvname();
  const std::string& recvname() const;
  void set_recvname(const std::string& value);
  void set_recvname(std::string&& value);
  void set_recvname(const char* value);
  void set_recvname(const void* value, size_t size);
  std::string* mutable_recvname();
  std::string* release_recvname();
  void set_allocated_recvname(std::string* recvname);
  private:
  const std::string& _internal_recvname() const;
  void _internal_set_recvname(const std::string& value);
  std::string* _internal_mutable_recvname();
  public:

  // @@protoc_insertion_point(class_scope:ChatMessageProto.queryOfflineMsgRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recvname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChatMsg_2eproto;
};
// -------------------------------------------------------------------

class queryOfflineMsgResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChatMessageProto.queryOfflineMsgResponse) */ {
 public:
  queryOfflineMsgResponse();
  virtual ~queryOfflineMsgResponse();

  queryOfflineMsgResponse(const queryOfflineMsgResponse& from);
  queryOfflineMsgResponse(queryOfflineMsgResponse&& from) noexcept
    : queryOfflineMsgResponse() {
    *this = ::std::move(from);
  }

  inline queryOfflineMsgResponse& operator=(const queryOfflineMsgResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline queryOfflineMsgResponse& operator=(queryOfflineMsgResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const queryOfflineMsgResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const queryOfflineMsgResponse* internal_default_instance() {
    return reinterpret_cast<const queryOfflineMsgResponse*>(
               &_queryOfflineMsgResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(queryOfflineMsgResponse& a, queryOfflineMsgResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(queryOfflineMsgResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline queryOfflineMsgResponse* New() const final {
    return CreateMaybeMessage<queryOfflineMsgResponse>(nullptr);
  }

  queryOfflineMsgResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<queryOfflineMsgResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const queryOfflineMsgResponse& from);
  void MergeFrom(const queryOfflineMsgResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(queryOfflineMsgResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatMessageProto.queryOfflineMsgResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ChatMsg_2eproto);
    return ::descriptor_table_ChatMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kResultFieldNumber = 2,
    kSuccessFieldNumber = 3,
  };
  // repeated .ChatMessageProto.chatMsg Msg = 1;
  int msg_size() const;
  private:
  int _internal_msg_size() const;
  public:
  void clear_msg();
  ::ChatMessageProto::chatMsg* mutable_msg(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatMessageProto::chatMsg >*
      mutable_msg();
  private:
  const ::ChatMessageProto::chatMsg& _internal_msg(int index) const;
  ::ChatMessageProto::chatMsg* _internal_add_msg();
  public:
  const ::ChatMessageProto::chatMsg& msg(int index) const;
  ::ChatMessageProto::chatMsg* add_msg();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatMessageProto::chatMsg >&
      msg() const;

  // .ChatMessageProto.ResultCode result = 2;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::ChatMessageProto::ResultCode& result() const;
  ::ChatMessageProto::ResultCode* release_result();
  ::ChatMessageProto::ResultCode* mutable_result();
  void set_allocated_result(::ChatMessageProto::ResultCode* result);
  private:
  const ::ChatMessageProto::ResultCode& _internal_result() const;
  ::ChatMessageProto::ResultCode* _internal_mutable_result();
  public:

  // bool success = 3;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ChatMessageProto.queryOfflineMsgResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatMessageProto::chatMsg > msg_;
  ::ChatMessageProto::ResultCode* result_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ChatMsg_2eproto;
};
// ===================================================================

class chatMsgRpc_Stub;

class chatMsgRpc : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline chatMsgRpc() {};
 public:
  virtual ~chatMsgRpc();

  typedef chatMsgRpc_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void AddChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ChatMessageProto::addMsgRequest* request,
                       ::ChatMessageProto::addMsgResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void DelChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ChatMessageProto::delMsgRequest* request,
                       ::ChatMessageProto::delMsgResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void QueryChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ChatMessageProto::queryMsgRequest* request,
                       ::ChatMessageProto::queryMsgResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void QueryOfflineMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ChatMessageProto::queryOfflineMsgRequest* request,
                       ::ChatMessageProto::queryOfflineMsgResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void AddGroupChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ChatMessageProto::addGroupMsgRequest* request,
                       ::ChatMessageProto::addGroupMsgResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void DelGroupChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ChatMessageProto::delGroupMsgRequest* request,
                       ::ChatMessageProto::delGroupMsgResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void QueryGroupChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ChatMessageProto::queryGroupMsgRequest* request,
                       ::ChatMessageProto::queryGroupMsgResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void AddDepartChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ChatMessageProto::addDepartMsgRequest* request,
                       ::ChatMessageProto::addDepartMsgResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void DelDepartChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ChatMessageProto::delDepartMsgRequest* request,
                       ::ChatMessageProto::delDepartMsgResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void QueryDepartChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ChatMessageProto::queryDepartMsgRequest* request,
                       ::ChatMessageProto::queryDepartMsgResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(chatMsgRpc);
};

class chatMsgRpc_Stub : public chatMsgRpc {
 public:
  chatMsgRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  chatMsgRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~chatMsgRpc_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements chatMsgRpc ------------------------------------------

  void AddChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ChatMessageProto::addMsgRequest* request,
                       ::ChatMessageProto::addMsgResponse* response,
                       ::google::protobuf::Closure* done);
  void DelChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ChatMessageProto::delMsgRequest* request,
                       ::ChatMessageProto::delMsgResponse* response,
                       ::google::protobuf::Closure* done);
  void QueryChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ChatMessageProto::queryMsgRequest* request,
                       ::ChatMessageProto::queryMsgResponse* response,
                       ::google::protobuf::Closure* done);
  void QueryOfflineMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ChatMessageProto::queryOfflineMsgRequest* request,
                       ::ChatMessageProto::queryOfflineMsgResponse* response,
                       ::google::protobuf::Closure* done);
  void AddGroupChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ChatMessageProto::addGroupMsgRequest* request,
                       ::ChatMessageProto::addGroupMsgResponse* response,
                       ::google::protobuf::Closure* done);
  void DelGroupChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ChatMessageProto::delGroupMsgRequest* request,
                       ::ChatMessageProto::delGroupMsgResponse* response,
                       ::google::protobuf::Closure* done);
  void QueryGroupChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ChatMessageProto::queryGroupMsgRequest* request,
                       ::ChatMessageProto::queryGroupMsgResponse* response,
                       ::google::protobuf::Closure* done);
  void AddDepartChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ChatMessageProto::addDepartMsgRequest* request,
                       ::ChatMessageProto::addDepartMsgResponse* response,
                       ::google::protobuf::Closure* done);
  void DelDepartChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ChatMessageProto::delDepartMsgRequest* request,
                       ::ChatMessageProto::delDepartMsgResponse* response,
                       ::google::protobuf::Closure* done);
  void QueryDepartChatMsg(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::ChatMessageProto::queryDepartMsgRequest* request,
                       ::ChatMessageProto::queryDepartMsgResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(chatMsgRpc_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ResultCode

// int32 errcode = 1;
inline void ResultCode::clear_errcode() {
  errcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResultCode::_internal_errcode() const {
  return errcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResultCode::errcode() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.ResultCode.errcode)
  return _internal_errcode();
}
inline void ResultCode::_internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errcode_ = value;
}
inline void ResultCode::set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:ChatMessageProto.ResultCode.errcode)
}

// bytes errmsg = 2;
inline void ResultCode::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ResultCode::errmsg() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.ResultCode.errmsg)
  return _internal_errmsg();
}
inline void ResultCode::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:ChatMessageProto.ResultCode.errmsg)
}
inline std::string* ResultCode::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:ChatMessageProto.ResultCode.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& ResultCode::_internal_errmsg() const {
  return errmsg_.GetNoArena();
}
inline void ResultCode::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ResultCode::set_errmsg(std::string&& value) {
  
  errmsg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatMessageProto.ResultCode.errmsg)
}
inline void ResultCode::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatMessageProto.ResultCode.errmsg)
}
inline void ResultCode::set_errmsg(const void* value, size_t size) {
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatMessageProto.ResultCode.errmsg)
}
inline std::string* ResultCode::_internal_mutable_errmsg() {
  
  return errmsg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResultCode::release_errmsg() {
  // @@protoc_insertion_point(field_release:ChatMessageProto.ResultCode.errmsg)
  
  return errmsg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResultCode::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:ChatMessageProto.ResultCode.errmsg)
}

// -------------------------------------------------------------------

// chatMsg

// int32 msgid = 1;
inline void chatMsg::clear_msgid() {
  msgid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 chatMsg::_internal_msgid() const {
  return msgid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 chatMsg::msgid() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.chatMsg.msgid)
  return _internal_msgid();
}
inline void chatMsg::_internal_set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msgid_ = value;
}
inline void chatMsg::set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msgid(value);
  // @@protoc_insertion_point(field_set:ChatMessageProto.chatMsg.msgid)
}

// bytes recvname = 2;
inline void chatMsg::clear_recvname() {
  recvname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& chatMsg::recvname() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.chatMsg.recvname)
  return _internal_recvname();
}
inline void chatMsg::set_recvname(const std::string& value) {
  _internal_set_recvname(value);
  // @@protoc_insertion_point(field_set:ChatMessageProto.chatMsg.recvname)
}
inline std::string* chatMsg::mutable_recvname() {
  // @@protoc_insertion_point(field_mutable:ChatMessageProto.chatMsg.recvname)
  return _internal_mutable_recvname();
}
inline const std::string& chatMsg::_internal_recvname() const {
  return recvname_.GetNoArena();
}
inline void chatMsg::_internal_set_recvname(const std::string& value) {
  
  recvname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void chatMsg::set_recvname(std::string&& value) {
  
  recvname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatMessageProto.chatMsg.recvname)
}
inline void chatMsg::set_recvname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recvname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatMessageProto.chatMsg.recvname)
}
inline void chatMsg::set_recvname(const void* value, size_t size) {
  
  recvname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatMessageProto.chatMsg.recvname)
}
inline std::string* chatMsg::_internal_mutable_recvname() {
  
  return recvname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* chatMsg::release_recvname() {
  // @@protoc_insertion_point(field_release:ChatMessageProto.chatMsg.recvname)
  
  return recvname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void chatMsg::set_allocated_recvname(std::string* recvname) {
  if (recvname != nullptr) {
    
  } else {
    
  }
  recvname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recvname);
  // @@protoc_insertion_point(field_set_allocated:ChatMessageProto.chatMsg.recvname)
}

// bytes sendname = 3;
inline void chatMsg::clear_sendname() {
  sendname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& chatMsg::sendname() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.chatMsg.sendname)
  return _internal_sendname();
}
inline void chatMsg::set_sendname(const std::string& value) {
  _internal_set_sendname(value);
  // @@protoc_insertion_point(field_set:ChatMessageProto.chatMsg.sendname)
}
inline std::string* chatMsg::mutable_sendname() {
  // @@protoc_insertion_point(field_mutable:ChatMessageProto.chatMsg.sendname)
  return _internal_mutable_sendname();
}
inline const std::string& chatMsg::_internal_sendname() const {
  return sendname_.GetNoArena();
}
inline void chatMsg::_internal_set_sendname(const std::string& value) {
  
  sendname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void chatMsg::set_sendname(std::string&& value) {
  
  sendname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatMessageProto.chatMsg.sendname)
}
inline void chatMsg::set_sendname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sendname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatMessageProto.chatMsg.sendname)
}
inline void chatMsg::set_sendname(const void* value, size_t size) {
  
  sendname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatMessageProto.chatMsg.sendname)
}
inline std::string* chatMsg::_internal_mutable_sendname() {
  
  return sendname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* chatMsg::release_sendname() {
  // @@protoc_insertion_point(field_release:ChatMessageProto.chatMsg.sendname)
  
  return sendname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void chatMsg::set_allocated_sendname(std::string* sendname) {
  if (sendname != nullptr) {
    
  } else {
    
  }
  sendname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sendname);
  // @@protoc_insertion_point(field_set_allocated:ChatMessageProto.chatMsg.sendname)
}

// bytes message = 4;
inline void chatMsg::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& chatMsg::message() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.chatMsg.message)
  return _internal_message();
}
inline void chatMsg::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:ChatMessageProto.chatMsg.message)
}
inline std::string* chatMsg::mutable_message() {
  // @@protoc_insertion_point(field_mutable:ChatMessageProto.chatMsg.message)
  return _internal_mutable_message();
}
inline const std::string& chatMsg::_internal_message() const {
  return message_.GetNoArena();
}
inline void chatMsg::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void chatMsg::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatMessageProto.chatMsg.message)
}
inline void chatMsg::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatMessageProto.chatMsg.message)
}
inline void chatMsg::set_message(const void* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatMessageProto.chatMsg.message)
}
inline std::string* chatMsg::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* chatMsg::release_message() {
  // @@protoc_insertion_point(field_release:ChatMessageProto.chatMsg.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void chatMsg::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:ChatMessageProto.chatMsg.message)
}

// bytes isRead = 5;
inline void chatMsg::clear_isread() {
  isread_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& chatMsg::isread() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.chatMsg.isRead)
  return _internal_isread();
}
inline void chatMsg::set_isread(const std::string& value) {
  _internal_set_isread(value);
  // @@protoc_insertion_point(field_set:ChatMessageProto.chatMsg.isRead)
}
inline std::string* chatMsg::mutable_isread() {
  // @@protoc_insertion_point(field_mutable:ChatMessageProto.chatMsg.isRead)
  return _internal_mutable_isread();
}
inline const std::string& chatMsg::_internal_isread() const {
  return isread_.GetNoArena();
}
inline void chatMsg::_internal_set_isread(const std::string& value) {
  
  isread_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void chatMsg::set_isread(std::string&& value) {
  
  isread_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatMessageProto.chatMsg.isRead)
}
inline void chatMsg::set_isread(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  isread_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatMessageProto.chatMsg.isRead)
}
inline void chatMsg::set_isread(const void* value, size_t size) {
  
  isread_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatMessageProto.chatMsg.isRead)
}
inline std::string* chatMsg::_internal_mutable_isread() {
  
  return isread_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* chatMsg::release_isread() {
  // @@protoc_insertion_point(field_release:ChatMessageProto.chatMsg.isRead)
  
  return isread_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void chatMsg::set_allocated_isread(std::string* isread) {
  if (isread != nullptr) {
    
  } else {
    
  }
  isread_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), isread);
  // @@protoc_insertion_point(field_set_allocated:ChatMessageProto.chatMsg.isRead)
}

// -------------------------------------------------------------------

// addMsgRequest

// .ChatMessageProto.chatMsg Msg = 1;
inline bool addMsgRequest::_internal_has_msg() const {
  return this != internal_default_instance() && msg_ != nullptr;
}
inline bool addMsgRequest::has_msg() const {
  return _internal_has_msg();
}
inline void addMsgRequest::clear_msg() {
  if (GetArenaNoVirtual() == nullptr && msg_ != nullptr) {
    delete msg_;
  }
  msg_ = nullptr;
}
inline const ::ChatMessageProto::chatMsg& addMsgRequest::_internal_msg() const {
  const ::ChatMessageProto::chatMsg* p = msg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ChatMessageProto::chatMsg*>(
      &::ChatMessageProto::_chatMsg_default_instance_);
}
inline const ::ChatMessageProto::chatMsg& addMsgRequest::msg() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.addMsgRequest.Msg)
  return _internal_msg();
}
inline ::ChatMessageProto::chatMsg* addMsgRequest::release_msg() {
  // @@protoc_insertion_point(field_release:ChatMessageProto.addMsgRequest.Msg)
  
  ::ChatMessageProto::chatMsg* temp = msg_;
  msg_ = nullptr;
  return temp;
}
inline ::ChatMessageProto::chatMsg* addMsgRequest::_internal_mutable_msg() {
  
  if (msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::ChatMessageProto::chatMsg>(GetArenaNoVirtual());
    msg_ = p;
  }
  return msg_;
}
inline ::ChatMessageProto::chatMsg* addMsgRequest::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:ChatMessageProto.addMsgRequest.Msg)
  return _internal_mutable_msg();
}
inline void addMsgRequest::set_allocated_msg(::ChatMessageProto::chatMsg* msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_;
  }
  if (msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg, submessage_arena);
    }
    
  } else {
    
  }
  msg_ = msg;
  // @@protoc_insertion_point(field_set_allocated:ChatMessageProto.addMsgRequest.Msg)
}

// -------------------------------------------------------------------

// addMsgResponse

// .ChatMessageProto.ResultCode result = 1;
inline bool addMsgResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool addMsgResponse::has_result() const {
  return _internal_has_result();
}
inline void addMsgResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::ChatMessageProto::ResultCode& addMsgResponse::_internal_result() const {
  const ::ChatMessageProto::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ChatMessageProto::ResultCode*>(
      &::ChatMessageProto::_ResultCode_default_instance_);
}
inline const ::ChatMessageProto::ResultCode& addMsgResponse::result() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.addMsgResponse.result)
  return _internal_result();
}
inline ::ChatMessageProto::ResultCode* addMsgResponse::release_result() {
  // @@protoc_insertion_point(field_release:ChatMessageProto.addMsgResponse.result)
  
  ::ChatMessageProto::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::ChatMessageProto::ResultCode* addMsgResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::ChatMessageProto::ResultCode>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::ChatMessageProto::ResultCode* addMsgResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:ChatMessageProto.addMsgResponse.result)
  return _internal_mutable_result();
}
inline void addMsgResponse::set_allocated_result(::ChatMessageProto::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:ChatMessageProto.addMsgResponse.result)
}

// bool success = 2;
inline void addMsgResponse::clear_success() {
  success_ = false;
}
inline bool addMsgResponse::_internal_success() const {
  return success_;
}
inline bool addMsgResponse::success() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.addMsgResponse.success)
  return _internal_success();
}
inline void addMsgResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void addMsgResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:ChatMessageProto.addMsgResponse.success)
}

// -------------------------------------------------------------------

// delMsgRequest

// .ChatMessageProto.chatMsg Msg = 1;
inline bool delMsgRequest::_internal_has_msg() const {
  return this != internal_default_instance() && msg_ != nullptr;
}
inline bool delMsgRequest::has_msg() const {
  return _internal_has_msg();
}
inline void delMsgRequest::clear_msg() {
  if (GetArenaNoVirtual() == nullptr && msg_ != nullptr) {
    delete msg_;
  }
  msg_ = nullptr;
}
inline const ::ChatMessageProto::chatMsg& delMsgRequest::_internal_msg() const {
  const ::ChatMessageProto::chatMsg* p = msg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ChatMessageProto::chatMsg*>(
      &::ChatMessageProto::_chatMsg_default_instance_);
}
inline const ::ChatMessageProto::chatMsg& delMsgRequest::msg() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.delMsgRequest.Msg)
  return _internal_msg();
}
inline ::ChatMessageProto::chatMsg* delMsgRequest::release_msg() {
  // @@protoc_insertion_point(field_release:ChatMessageProto.delMsgRequest.Msg)
  
  ::ChatMessageProto::chatMsg* temp = msg_;
  msg_ = nullptr;
  return temp;
}
inline ::ChatMessageProto::chatMsg* delMsgRequest::_internal_mutable_msg() {
  
  if (msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::ChatMessageProto::chatMsg>(GetArenaNoVirtual());
    msg_ = p;
  }
  return msg_;
}
inline ::ChatMessageProto::chatMsg* delMsgRequest::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:ChatMessageProto.delMsgRequest.Msg)
  return _internal_mutable_msg();
}
inline void delMsgRequest::set_allocated_msg(::ChatMessageProto::chatMsg* msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msg_;
  }
  if (msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg, submessage_arena);
    }
    
  } else {
    
  }
  msg_ = msg;
  // @@protoc_insertion_point(field_set_allocated:ChatMessageProto.delMsgRequest.Msg)
}

// -------------------------------------------------------------------

// delMsgResponse

// .ChatMessageProto.ResultCode result = 1;
inline bool delMsgResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool delMsgResponse::has_result() const {
  return _internal_has_result();
}
inline void delMsgResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::ChatMessageProto::ResultCode& delMsgResponse::_internal_result() const {
  const ::ChatMessageProto::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ChatMessageProto::ResultCode*>(
      &::ChatMessageProto::_ResultCode_default_instance_);
}
inline const ::ChatMessageProto::ResultCode& delMsgResponse::result() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.delMsgResponse.result)
  return _internal_result();
}
inline ::ChatMessageProto::ResultCode* delMsgResponse::release_result() {
  // @@protoc_insertion_point(field_release:ChatMessageProto.delMsgResponse.result)
  
  ::ChatMessageProto::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::ChatMessageProto::ResultCode* delMsgResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::ChatMessageProto::ResultCode>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::ChatMessageProto::ResultCode* delMsgResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:ChatMessageProto.delMsgResponse.result)
  return _internal_mutable_result();
}
inline void delMsgResponse::set_allocated_result(::ChatMessageProto::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:ChatMessageProto.delMsgResponse.result)
}

// bool success = 2;
inline void delMsgResponse::clear_success() {
  success_ = false;
}
inline bool delMsgResponse::_internal_success() const {
  return success_;
}
inline bool delMsgResponse::success() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.delMsgResponse.success)
  return _internal_success();
}
inline void delMsgResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void delMsgResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:ChatMessageProto.delMsgResponse.success)
}

// -------------------------------------------------------------------

// queryMsgRequest

// bytes recvname = 1;
inline void queryMsgRequest::clear_recvname() {
  recvname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& queryMsgRequest::recvname() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.queryMsgRequest.recvname)
  return _internal_recvname();
}
inline void queryMsgRequest::set_recvname(const std::string& value) {
  _internal_set_recvname(value);
  // @@protoc_insertion_point(field_set:ChatMessageProto.queryMsgRequest.recvname)
}
inline std::string* queryMsgRequest::mutable_recvname() {
  // @@protoc_insertion_point(field_mutable:ChatMessageProto.queryMsgRequest.recvname)
  return _internal_mutable_recvname();
}
inline const std::string& queryMsgRequest::_internal_recvname() const {
  return recvname_.GetNoArena();
}
inline void queryMsgRequest::_internal_set_recvname(const std::string& value) {
  
  recvname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void queryMsgRequest::set_recvname(std::string&& value) {
  
  recvname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatMessageProto.queryMsgRequest.recvname)
}
inline void queryMsgRequest::set_recvname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recvname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatMessageProto.queryMsgRequest.recvname)
}
inline void queryMsgRequest::set_recvname(const void* value, size_t size) {
  
  recvname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatMessageProto.queryMsgRequest.recvname)
}
inline std::string* queryMsgRequest::_internal_mutable_recvname() {
  
  return recvname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* queryMsgRequest::release_recvname() {
  // @@protoc_insertion_point(field_release:ChatMessageProto.queryMsgRequest.recvname)
  
  return recvname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void queryMsgRequest::set_allocated_recvname(std::string* recvname) {
  if (recvname != nullptr) {
    
  } else {
    
  }
  recvname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recvname);
  // @@protoc_insertion_point(field_set_allocated:ChatMessageProto.queryMsgRequest.recvname)
}

// bytes sendname = 2;
inline void queryMsgRequest::clear_sendname() {
  sendname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& queryMsgRequest::sendname() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.queryMsgRequest.sendname)
  return _internal_sendname();
}
inline void queryMsgRequest::set_sendname(const std::string& value) {
  _internal_set_sendname(value);
  // @@protoc_insertion_point(field_set:ChatMessageProto.queryMsgRequest.sendname)
}
inline std::string* queryMsgRequest::mutable_sendname() {
  // @@protoc_insertion_point(field_mutable:ChatMessageProto.queryMsgRequest.sendname)
  return _internal_mutable_sendname();
}
inline const std::string& queryMsgRequest::_internal_sendname() const {
  return sendname_.GetNoArena();
}
inline void queryMsgRequest::_internal_set_sendname(const std::string& value) {
  
  sendname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void queryMsgRequest::set_sendname(std::string&& value) {
  
  sendname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatMessageProto.queryMsgRequest.sendname)
}
inline void queryMsgRequest::set_sendname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sendname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatMessageProto.queryMsgRequest.sendname)
}
inline void queryMsgRequest::set_sendname(const void* value, size_t size) {
  
  sendname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatMessageProto.queryMsgRequest.sendname)
}
inline std::string* queryMsgRequest::_internal_mutable_sendname() {
  
  return sendname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* queryMsgRequest::release_sendname() {
  // @@protoc_insertion_point(field_release:ChatMessageProto.queryMsgRequest.sendname)
  
  return sendname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void queryMsgRequest::set_allocated_sendname(std::string* sendname) {
  if (sendname != nullptr) {
    
  } else {
    
  }
  sendname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sendname);
  // @@protoc_insertion_point(field_set_allocated:ChatMessageProto.queryMsgRequest.sendname)
}

// -------------------------------------------------------------------

// queryMsgResponse

// repeated .ChatMessageProto.chatMsg Msg = 1;
inline int queryMsgResponse::_internal_msg_size() const {
  return msg_.size();
}
inline int queryMsgResponse::msg_size() const {
  return _internal_msg_size();
}
inline void queryMsgResponse::clear_msg() {
  msg_.Clear();
}
inline ::ChatMessageProto::chatMsg* queryMsgResponse::mutable_msg(int index) {
  // @@protoc_insertion_point(field_mutable:ChatMessageProto.queryMsgResponse.Msg)
  return msg_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatMessageProto::chatMsg >*
queryMsgResponse::mutable_msg() {
  // @@protoc_insertion_point(field_mutable_list:ChatMessageProto.queryMsgResponse.Msg)
  return &msg_;
}
inline const ::ChatMessageProto::chatMsg& queryMsgResponse::_internal_msg(int index) const {
  return msg_.Get(index);
}
inline const ::ChatMessageProto::chatMsg& queryMsgResponse::msg(int index) const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.queryMsgResponse.Msg)
  return _internal_msg(index);
}
inline ::ChatMessageProto::chatMsg* queryMsgResponse::_internal_add_msg() {
  return msg_.Add();
}
inline ::ChatMessageProto::chatMsg* queryMsgResponse::add_msg() {
  // @@protoc_insertion_point(field_add:ChatMessageProto.queryMsgResponse.Msg)
  return _internal_add_msg();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatMessageProto::chatMsg >&
queryMsgResponse::msg() const {
  // @@protoc_insertion_point(field_list:ChatMessageProto.queryMsgResponse.Msg)
  return msg_;
}

// .ChatMessageProto.ResultCode result = 2;
inline bool queryMsgResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool queryMsgResponse::has_result() const {
  return _internal_has_result();
}
inline void queryMsgResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::ChatMessageProto::ResultCode& queryMsgResponse::_internal_result() const {
  const ::ChatMessageProto::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ChatMessageProto::ResultCode*>(
      &::ChatMessageProto::_ResultCode_default_instance_);
}
inline const ::ChatMessageProto::ResultCode& queryMsgResponse::result() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.queryMsgResponse.result)
  return _internal_result();
}
inline ::ChatMessageProto::ResultCode* queryMsgResponse::release_result() {
  // @@protoc_insertion_point(field_release:ChatMessageProto.queryMsgResponse.result)
  
  ::ChatMessageProto::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::ChatMessageProto::ResultCode* queryMsgResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::ChatMessageProto::ResultCode>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::ChatMessageProto::ResultCode* queryMsgResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:ChatMessageProto.queryMsgResponse.result)
  return _internal_mutable_result();
}
inline void queryMsgResponse::set_allocated_result(::ChatMessageProto::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:ChatMessageProto.queryMsgResponse.result)
}

// bool success = 3;
inline void queryMsgResponse::clear_success() {
  success_ = false;
}
inline bool queryMsgResponse::_internal_success() const {
  return success_;
}
inline bool queryMsgResponse::success() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.queryMsgResponse.success)
  return _internal_success();
}
inline void queryMsgResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void queryMsgResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:ChatMessageProto.queryMsgResponse.success)
}

// -------------------------------------------------------------------

// groupChatMsg

// int32 msgid = 1;
inline void groupChatMsg::clear_msgid() {
  msgid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 groupChatMsg::_internal_msgid() const {
  return msgid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 groupChatMsg::msgid() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.groupChatMsg.msgid)
  return _internal_msgid();
}
inline void groupChatMsg::_internal_set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msgid_ = value;
}
inline void groupChatMsg::set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msgid(value);
  // @@protoc_insertion_point(field_set:ChatMessageProto.groupChatMsg.msgid)
}

// bytes groupname = 2;
inline void groupChatMsg::clear_groupname() {
  groupname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& groupChatMsg::groupname() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.groupChatMsg.groupname)
  return _internal_groupname();
}
inline void groupChatMsg::set_groupname(const std::string& value) {
  _internal_set_groupname(value);
  // @@protoc_insertion_point(field_set:ChatMessageProto.groupChatMsg.groupname)
}
inline std::string* groupChatMsg::mutable_groupname() {
  // @@protoc_insertion_point(field_mutable:ChatMessageProto.groupChatMsg.groupname)
  return _internal_mutable_groupname();
}
inline const std::string& groupChatMsg::_internal_groupname() const {
  return groupname_.GetNoArena();
}
inline void groupChatMsg::_internal_set_groupname(const std::string& value) {
  
  groupname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void groupChatMsg::set_groupname(std::string&& value) {
  
  groupname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatMessageProto.groupChatMsg.groupname)
}
inline void groupChatMsg::set_groupname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  groupname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatMessageProto.groupChatMsg.groupname)
}
inline void groupChatMsg::set_groupname(const void* value, size_t size) {
  
  groupname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatMessageProto.groupChatMsg.groupname)
}
inline std::string* groupChatMsg::_internal_mutable_groupname() {
  
  return groupname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* groupChatMsg::release_groupname() {
  // @@protoc_insertion_point(field_release:ChatMessageProto.groupChatMsg.groupname)
  
  return groupname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void groupChatMsg::set_allocated_groupname(std::string* groupname) {
  if (groupname != nullptr) {
    
  } else {
    
  }
  groupname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), groupname);
  // @@protoc_insertion_point(field_set_allocated:ChatMessageProto.groupChatMsg.groupname)
}

// bytes sendname = 3;
inline void groupChatMsg::clear_sendname() {
  sendname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& groupChatMsg::sendname() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.groupChatMsg.sendname)
  return _internal_sendname();
}
inline void groupChatMsg::set_sendname(const std::string& value) {
  _internal_set_sendname(value);
  // @@protoc_insertion_point(field_set:ChatMessageProto.groupChatMsg.sendname)
}
inline std::string* groupChatMsg::mutable_sendname() {
  // @@protoc_insertion_point(field_mutable:ChatMessageProto.groupChatMsg.sendname)
  return _internal_mutable_sendname();
}
inline const std::string& groupChatMsg::_internal_sendname() const {
  return sendname_.GetNoArena();
}
inline void groupChatMsg::_internal_set_sendname(const std::string& value) {
  
  sendname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void groupChatMsg::set_sendname(std::string&& value) {
  
  sendname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatMessageProto.groupChatMsg.sendname)
}
inline void groupChatMsg::set_sendname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sendname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatMessageProto.groupChatMsg.sendname)
}
inline void groupChatMsg::set_sendname(const void* value, size_t size) {
  
  sendname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatMessageProto.groupChatMsg.sendname)
}
inline std::string* groupChatMsg::_internal_mutable_sendname() {
  
  return sendname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* groupChatMsg::release_sendname() {
  // @@protoc_insertion_point(field_release:ChatMessageProto.groupChatMsg.sendname)
  
  return sendname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void groupChatMsg::set_allocated_sendname(std::string* sendname) {
  if (sendname != nullptr) {
    
  } else {
    
  }
  sendname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sendname);
  // @@protoc_insertion_point(field_set_allocated:ChatMessageProto.groupChatMsg.sendname)
}

// bytes message = 4;
inline void groupChatMsg::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& groupChatMsg::message() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.groupChatMsg.message)
  return _internal_message();
}
inline void groupChatMsg::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:ChatMessageProto.groupChatMsg.message)
}
inline std::string* groupChatMsg::mutable_message() {
  // @@protoc_insertion_point(field_mutable:ChatMessageProto.groupChatMsg.message)
  return _internal_mutable_message();
}
inline const std::string& groupChatMsg::_internal_message() const {
  return message_.GetNoArena();
}
inline void groupChatMsg::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void groupChatMsg::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatMessageProto.groupChatMsg.message)
}
inline void groupChatMsg::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatMessageProto.groupChatMsg.message)
}
inline void groupChatMsg::set_message(const void* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatMessageProto.groupChatMsg.message)
}
inline std::string* groupChatMsg::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* groupChatMsg::release_message() {
  // @@protoc_insertion_point(field_release:ChatMessageProto.groupChatMsg.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void groupChatMsg::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:ChatMessageProto.groupChatMsg.message)
}

// -------------------------------------------------------------------

// addGroupMsgRequest

// .ChatMessageProto.groupChatMsg GroupMsg = 1;
inline bool addGroupMsgRequest::_internal_has_groupmsg() const {
  return this != internal_default_instance() && groupmsg_ != nullptr;
}
inline bool addGroupMsgRequest::has_groupmsg() const {
  return _internal_has_groupmsg();
}
inline void addGroupMsgRequest::clear_groupmsg() {
  if (GetArenaNoVirtual() == nullptr && groupmsg_ != nullptr) {
    delete groupmsg_;
  }
  groupmsg_ = nullptr;
}
inline const ::ChatMessageProto::groupChatMsg& addGroupMsgRequest::_internal_groupmsg() const {
  const ::ChatMessageProto::groupChatMsg* p = groupmsg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ChatMessageProto::groupChatMsg*>(
      &::ChatMessageProto::_groupChatMsg_default_instance_);
}
inline const ::ChatMessageProto::groupChatMsg& addGroupMsgRequest::groupmsg() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.addGroupMsgRequest.GroupMsg)
  return _internal_groupmsg();
}
inline ::ChatMessageProto::groupChatMsg* addGroupMsgRequest::release_groupmsg() {
  // @@protoc_insertion_point(field_release:ChatMessageProto.addGroupMsgRequest.GroupMsg)
  
  ::ChatMessageProto::groupChatMsg* temp = groupmsg_;
  groupmsg_ = nullptr;
  return temp;
}
inline ::ChatMessageProto::groupChatMsg* addGroupMsgRequest::_internal_mutable_groupmsg() {
  
  if (groupmsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::ChatMessageProto::groupChatMsg>(GetArenaNoVirtual());
    groupmsg_ = p;
  }
  return groupmsg_;
}
inline ::ChatMessageProto::groupChatMsg* addGroupMsgRequest::mutable_groupmsg() {
  // @@protoc_insertion_point(field_mutable:ChatMessageProto.addGroupMsgRequest.GroupMsg)
  return _internal_mutable_groupmsg();
}
inline void addGroupMsgRequest::set_allocated_groupmsg(::ChatMessageProto::groupChatMsg* groupmsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete groupmsg_;
  }
  if (groupmsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      groupmsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, groupmsg, submessage_arena);
    }
    
  } else {
    
  }
  groupmsg_ = groupmsg;
  // @@protoc_insertion_point(field_set_allocated:ChatMessageProto.addGroupMsgRequest.GroupMsg)
}

// -------------------------------------------------------------------

// addGroupMsgResponse

// .ChatMessageProto.ResultCode result = 1;
inline bool addGroupMsgResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool addGroupMsgResponse::has_result() const {
  return _internal_has_result();
}
inline void addGroupMsgResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::ChatMessageProto::ResultCode& addGroupMsgResponse::_internal_result() const {
  const ::ChatMessageProto::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ChatMessageProto::ResultCode*>(
      &::ChatMessageProto::_ResultCode_default_instance_);
}
inline const ::ChatMessageProto::ResultCode& addGroupMsgResponse::result() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.addGroupMsgResponse.result)
  return _internal_result();
}
inline ::ChatMessageProto::ResultCode* addGroupMsgResponse::release_result() {
  // @@protoc_insertion_point(field_release:ChatMessageProto.addGroupMsgResponse.result)
  
  ::ChatMessageProto::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::ChatMessageProto::ResultCode* addGroupMsgResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::ChatMessageProto::ResultCode>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::ChatMessageProto::ResultCode* addGroupMsgResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:ChatMessageProto.addGroupMsgResponse.result)
  return _internal_mutable_result();
}
inline void addGroupMsgResponse::set_allocated_result(::ChatMessageProto::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:ChatMessageProto.addGroupMsgResponse.result)
}

// bool success = 2;
inline void addGroupMsgResponse::clear_success() {
  success_ = false;
}
inline bool addGroupMsgResponse::_internal_success() const {
  return success_;
}
inline bool addGroupMsgResponse::success() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.addGroupMsgResponse.success)
  return _internal_success();
}
inline void addGroupMsgResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void addGroupMsgResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:ChatMessageProto.addGroupMsgResponse.success)
}

// -------------------------------------------------------------------

// delGroupMsgRequest

// .ChatMessageProto.groupChatMsg GroupMsg = 1;
inline bool delGroupMsgRequest::_internal_has_groupmsg() const {
  return this != internal_default_instance() && groupmsg_ != nullptr;
}
inline bool delGroupMsgRequest::has_groupmsg() const {
  return _internal_has_groupmsg();
}
inline void delGroupMsgRequest::clear_groupmsg() {
  if (GetArenaNoVirtual() == nullptr && groupmsg_ != nullptr) {
    delete groupmsg_;
  }
  groupmsg_ = nullptr;
}
inline const ::ChatMessageProto::groupChatMsg& delGroupMsgRequest::_internal_groupmsg() const {
  const ::ChatMessageProto::groupChatMsg* p = groupmsg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ChatMessageProto::groupChatMsg*>(
      &::ChatMessageProto::_groupChatMsg_default_instance_);
}
inline const ::ChatMessageProto::groupChatMsg& delGroupMsgRequest::groupmsg() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.delGroupMsgRequest.GroupMsg)
  return _internal_groupmsg();
}
inline ::ChatMessageProto::groupChatMsg* delGroupMsgRequest::release_groupmsg() {
  // @@protoc_insertion_point(field_release:ChatMessageProto.delGroupMsgRequest.GroupMsg)
  
  ::ChatMessageProto::groupChatMsg* temp = groupmsg_;
  groupmsg_ = nullptr;
  return temp;
}
inline ::ChatMessageProto::groupChatMsg* delGroupMsgRequest::_internal_mutable_groupmsg() {
  
  if (groupmsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::ChatMessageProto::groupChatMsg>(GetArenaNoVirtual());
    groupmsg_ = p;
  }
  return groupmsg_;
}
inline ::ChatMessageProto::groupChatMsg* delGroupMsgRequest::mutable_groupmsg() {
  // @@protoc_insertion_point(field_mutable:ChatMessageProto.delGroupMsgRequest.GroupMsg)
  return _internal_mutable_groupmsg();
}
inline void delGroupMsgRequest::set_allocated_groupmsg(::ChatMessageProto::groupChatMsg* groupmsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete groupmsg_;
  }
  if (groupmsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      groupmsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, groupmsg, submessage_arena);
    }
    
  } else {
    
  }
  groupmsg_ = groupmsg;
  // @@protoc_insertion_point(field_set_allocated:ChatMessageProto.delGroupMsgRequest.GroupMsg)
}

// -------------------------------------------------------------------

// delGroupMsgResponse

// .ChatMessageProto.ResultCode result = 1;
inline bool delGroupMsgResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool delGroupMsgResponse::has_result() const {
  return _internal_has_result();
}
inline void delGroupMsgResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::ChatMessageProto::ResultCode& delGroupMsgResponse::_internal_result() const {
  const ::ChatMessageProto::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ChatMessageProto::ResultCode*>(
      &::ChatMessageProto::_ResultCode_default_instance_);
}
inline const ::ChatMessageProto::ResultCode& delGroupMsgResponse::result() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.delGroupMsgResponse.result)
  return _internal_result();
}
inline ::ChatMessageProto::ResultCode* delGroupMsgResponse::release_result() {
  // @@protoc_insertion_point(field_release:ChatMessageProto.delGroupMsgResponse.result)
  
  ::ChatMessageProto::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::ChatMessageProto::ResultCode* delGroupMsgResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::ChatMessageProto::ResultCode>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::ChatMessageProto::ResultCode* delGroupMsgResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:ChatMessageProto.delGroupMsgResponse.result)
  return _internal_mutable_result();
}
inline void delGroupMsgResponse::set_allocated_result(::ChatMessageProto::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:ChatMessageProto.delGroupMsgResponse.result)
}

// bool success = 2;
inline void delGroupMsgResponse::clear_success() {
  success_ = false;
}
inline bool delGroupMsgResponse::_internal_success() const {
  return success_;
}
inline bool delGroupMsgResponse::success() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.delGroupMsgResponse.success)
  return _internal_success();
}
inline void delGroupMsgResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void delGroupMsgResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:ChatMessageProto.delGroupMsgResponse.success)
}

// -------------------------------------------------------------------

// queryGroupMsgRequest

// bytes username = 1;
inline void queryGroupMsgRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& queryGroupMsgRequest::username() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.queryGroupMsgRequest.username)
  return _internal_username();
}
inline void queryGroupMsgRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:ChatMessageProto.queryGroupMsgRequest.username)
}
inline std::string* queryGroupMsgRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:ChatMessageProto.queryGroupMsgRequest.username)
  return _internal_mutable_username();
}
inline const std::string& queryGroupMsgRequest::_internal_username() const {
  return username_.GetNoArena();
}
inline void queryGroupMsgRequest::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void queryGroupMsgRequest::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatMessageProto.queryGroupMsgRequest.username)
}
inline void queryGroupMsgRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatMessageProto.queryGroupMsgRequest.username)
}
inline void queryGroupMsgRequest::set_username(const void* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatMessageProto.queryGroupMsgRequest.username)
}
inline std::string* queryGroupMsgRequest::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* queryGroupMsgRequest::release_username() {
  // @@protoc_insertion_point(field_release:ChatMessageProto.queryGroupMsgRequest.username)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void queryGroupMsgRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:ChatMessageProto.queryGroupMsgRequest.username)
}

// -------------------------------------------------------------------

// queryGroupMsgResponse

// repeated .ChatMessageProto.groupChatMsg GroupMsg = 1;
inline int queryGroupMsgResponse::_internal_groupmsg_size() const {
  return groupmsg_.size();
}
inline int queryGroupMsgResponse::groupmsg_size() const {
  return _internal_groupmsg_size();
}
inline void queryGroupMsgResponse::clear_groupmsg() {
  groupmsg_.Clear();
}
inline ::ChatMessageProto::groupChatMsg* queryGroupMsgResponse::mutable_groupmsg(int index) {
  // @@protoc_insertion_point(field_mutable:ChatMessageProto.queryGroupMsgResponse.GroupMsg)
  return groupmsg_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatMessageProto::groupChatMsg >*
queryGroupMsgResponse::mutable_groupmsg() {
  // @@protoc_insertion_point(field_mutable_list:ChatMessageProto.queryGroupMsgResponse.GroupMsg)
  return &groupmsg_;
}
inline const ::ChatMessageProto::groupChatMsg& queryGroupMsgResponse::_internal_groupmsg(int index) const {
  return groupmsg_.Get(index);
}
inline const ::ChatMessageProto::groupChatMsg& queryGroupMsgResponse::groupmsg(int index) const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.queryGroupMsgResponse.GroupMsg)
  return _internal_groupmsg(index);
}
inline ::ChatMessageProto::groupChatMsg* queryGroupMsgResponse::_internal_add_groupmsg() {
  return groupmsg_.Add();
}
inline ::ChatMessageProto::groupChatMsg* queryGroupMsgResponse::add_groupmsg() {
  // @@protoc_insertion_point(field_add:ChatMessageProto.queryGroupMsgResponse.GroupMsg)
  return _internal_add_groupmsg();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatMessageProto::groupChatMsg >&
queryGroupMsgResponse::groupmsg() const {
  // @@protoc_insertion_point(field_list:ChatMessageProto.queryGroupMsgResponse.GroupMsg)
  return groupmsg_;
}

// .ChatMessageProto.ResultCode result = 2;
inline bool queryGroupMsgResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool queryGroupMsgResponse::has_result() const {
  return _internal_has_result();
}
inline void queryGroupMsgResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::ChatMessageProto::ResultCode& queryGroupMsgResponse::_internal_result() const {
  const ::ChatMessageProto::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ChatMessageProto::ResultCode*>(
      &::ChatMessageProto::_ResultCode_default_instance_);
}
inline const ::ChatMessageProto::ResultCode& queryGroupMsgResponse::result() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.queryGroupMsgResponse.result)
  return _internal_result();
}
inline ::ChatMessageProto::ResultCode* queryGroupMsgResponse::release_result() {
  // @@protoc_insertion_point(field_release:ChatMessageProto.queryGroupMsgResponse.result)
  
  ::ChatMessageProto::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::ChatMessageProto::ResultCode* queryGroupMsgResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::ChatMessageProto::ResultCode>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::ChatMessageProto::ResultCode* queryGroupMsgResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:ChatMessageProto.queryGroupMsgResponse.result)
  return _internal_mutable_result();
}
inline void queryGroupMsgResponse::set_allocated_result(::ChatMessageProto::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:ChatMessageProto.queryGroupMsgResponse.result)
}

// bool success = 3;
inline void queryGroupMsgResponse::clear_success() {
  success_ = false;
}
inline bool queryGroupMsgResponse::_internal_success() const {
  return success_;
}
inline bool queryGroupMsgResponse::success() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.queryGroupMsgResponse.success)
  return _internal_success();
}
inline void queryGroupMsgResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void queryGroupMsgResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:ChatMessageProto.queryGroupMsgResponse.success)
}

// -------------------------------------------------------------------

// departChatMsg

// int32 msgid = 1;
inline void departChatMsg::clear_msgid() {
  msgid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 departChatMsg::_internal_msgid() const {
  return msgid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 departChatMsg::msgid() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.departChatMsg.msgid)
  return _internal_msgid();
}
inline void departChatMsg::_internal_set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msgid_ = value;
}
inline void departChatMsg::set_msgid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msgid(value);
  // @@protoc_insertion_point(field_set:ChatMessageProto.departChatMsg.msgid)
}

// bytes departname = 2;
inline void departChatMsg::clear_departname() {
  departname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& departChatMsg::departname() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.departChatMsg.departname)
  return _internal_departname();
}
inline void departChatMsg::set_departname(const std::string& value) {
  _internal_set_departname(value);
  // @@protoc_insertion_point(field_set:ChatMessageProto.departChatMsg.departname)
}
inline std::string* departChatMsg::mutable_departname() {
  // @@protoc_insertion_point(field_mutable:ChatMessageProto.departChatMsg.departname)
  return _internal_mutable_departname();
}
inline const std::string& departChatMsg::_internal_departname() const {
  return departname_.GetNoArena();
}
inline void departChatMsg::_internal_set_departname(const std::string& value) {
  
  departname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void departChatMsg::set_departname(std::string&& value) {
  
  departname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatMessageProto.departChatMsg.departname)
}
inline void departChatMsg::set_departname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  departname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatMessageProto.departChatMsg.departname)
}
inline void departChatMsg::set_departname(const void* value, size_t size) {
  
  departname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatMessageProto.departChatMsg.departname)
}
inline std::string* departChatMsg::_internal_mutable_departname() {
  
  return departname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* departChatMsg::release_departname() {
  // @@protoc_insertion_point(field_release:ChatMessageProto.departChatMsg.departname)
  
  return departname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void departChatMsg::set_allocated_departname(std::string* departname) {
  if (departname != nullptr) {
    
  } else {
    
  }
  departname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), departname);
  // @@protoc_insertion_point(field_set_allocated:ChatMessageProto.departChatMsg.departname)
}

// bytes sendname = 3;
inline void departChatMsg::clear_sendname() {
  sendname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& departChatMsg::sendname() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.departChatMsg.sendname)
  return _internal_sendname();
}
inline void departChatMsg::set_sendname(const std::string& value) {
  _internal_set_sendname(value);
  // @@protoc_insertion_point(field_set:ChatMessageProto.departChatMsg.sendname)
}
inline std::string* departChatMsg::mutable_sendname() {
  // @@protoc_insertion_point(field_mutable:ChatMessageProto.departChatMsg.sendname)
  return _internal_mutable_sendname();
}
inline const std::string& departChatMsg::_internal_sendname() const {
  return sendname_.GetNoArena();
}
inline void departChatMsg::_internal_set_sendname(const std::string& value) {
  
  sendname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void departChatMsg::set_sendname(std::string&& value) {
  
  sendname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatMessageProto.departChatMsg.sendname)
}
inline void departChatMsg::set_sendname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sendname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatMessageProto.departChatMsg.sendname)
}
inline void departChatMsg::set_sendname(const void* value, size_t size) {
  
  sendname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatMessageProto.departChatMsg.sendname)
}
inline std::string* departChatMsg::_internal_mutable_sendname() {
  
  return sendname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* departChatMsg::release_sendname() {
  // @@protoc_insertion_point(field_release:ChatMessageProto.departChatMsg.sendname)
  
  return sendname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void departChatMsg::set_allocated_sendname(std::string* sendname) {
  if (sendname != nullptr) {
    
  } else {
    
  }
  sendname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sendname);
  // @@protoc_insertion_point(field_set_allocated:ChatMessageProto.departChatMsg.sendname)
}

// bytes message = 4;
inline void departChatMsg::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& departChatMsg::message() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.departChatMsg.message)
  return _internal_message();
}
inline void departChatMsg::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:ChatMessageProto.departChatMsg.message)
}
inline std::string* departChatMsg::mutable_message() {
  // @@protoc_insertion_point(field_mutable:ChatMessageProto.departChatMsg.message)
  return _internal_mutable_message();
}
inline const std::string& departChatMsg::_internal_message() const {
  return message_.GetNoArena();
}
inline void departChatMsg::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void departChatMsg::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatMessageProto.departChatMsg.message)
}
inline void departChatMsg::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatMessageProto.departChatMsg.message)
}
inline void departChatMsg::set_message(const void* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatMessageProto.departChatMsg.message)
}
inline std::string* departChatMsg::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* departChatMsg::release_message() {
  // @@protoc_insertion_point(field_release:ChatMessageProto.departChatMsg.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void departChatMsg::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:ChatMessageProto.departChatMsg.message)
}

// -------------------------------------------------------------------

// addDepartMsgRequest

// .ChatMessageProto.departChatMsg DepartMsg = 1;
inline bool addDepartMsgRequest::_internal_has_departmsg() const {
  return this != internal_default_instance() && departmsg_ != nullptr;
}
inline bool addDepartMsgRequest::has_departmsg() const {
  return _internal_has_departmsg();
}
inline void addDepartMsgRequest::clear_departmsg() {
  if (GetArenaNoVirtual() == nullptr && departmsg_ != nullptr) {
    delete departmsg_;
  }
  departmsg_ = nullptr;
}
inline const ::ChatMessageProto::departChatMsg& addDepartMsgRequest::_internal_departmsg() const {
  const ::ChatMessageProto::departChatMsg* p = departmsg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ChatMessageProto::departChatMsg*>(
      &::ChatMessageProto::_departChatMsg_default_instance_);
}
inline const ::ChatMessageProto::departChatMsg& addDepartMsgRequest::departmsg() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.addDepartMsgRequest.DepartMsg)
  return _internal_departmsg();
}
inline ::ChatMessageProto::departChatMsg* addDepartMsgRequest::release_departmsg() {
  // @@protoc_insertion_point(field_release:ChatMessageProto.addDepartMsgRequest.DepartMsg)
  
  ::ChatMessageProto::departChatMsg* temp = departmsg_;
  departmsg_ = nullptr;
  return temp;
}
inline ::ChatMessageProto::departChatMsg* addDepartMsgRequest::_internal_mutable_departmsg() {
  
  if (departmsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::ChatMessageProto::departChatMsg>(GetArenaNoVirtual());
    departmsg_ = p;
  }
  return departmsg_;
}
inline ::ChatMessageProto::departChatMsg* addDepartMsgRequest::mutable_departmsg() {
  // @@protoc_insertion_point(field_mutable:ChatMessageProto.addDepartMsgRequest.DepartMsg)
  return _internal_mutable_departmsg();
}
inline void addDepartMsgRequest::set_allocated_departmsg(::ChatMessageProto::departChatMsg* departmsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete departmsg_;
  }
  if (departmsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      departmsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, departmsg, submessage_arena);
    }
    
  } else {
    
  }
  departmsg_ = departmsg;
  // @@protoc_insertion_point(field_set_allocated:ChatMessageProto.addDepartMsgRequest.DepartMsg)
}

// -------------------------------------------------------------------

// addDepartMsgResponse

// .ChatMessageProto.ResultCode result = 1;
inline bool addDepartMsgResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool addDepartMsgResponse::has_result() const {
  return _internal_has_result();
}
inline void addDepartMsgResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::ChatMessageProto::ResultCode& addDepartMsgResponse::_internal_result() const {
  const ::ChatMessageProto::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ChatMessageProto::ResultCode*>(
      &::ChatMessageProto::_ResultCode_default_instance_);
}
inline const ::ChatMessageProto::ResultCode& addDepartMsgResponse::result() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.addDepartMsgResponse.result)
  return _internal_result();
}
inline ::ChatMessageProto::ResultCode* addDepartMsgResponse::release_result() {
  // @@protoc_insertion_point(field_release:ChatMessageProto.addDepartMsgResponse.result)
  
  ::ChatMessageProto::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::ChatMessageProto::ResultCode* addDepartMsgResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::ChatMessageProto::ResultCode>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::ChatMessageProto::ResultCode* addDepartMsgResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:ChatMessageProto.addDepartMsgResponse.result)
  return _internal_mutable_result();
}
inline void addDepartMsgResponse::set_allocated_result(::ChatMessageProto::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:ChatMessageProto.addDepartMsgResponse.result)
}

// bool success = 2;
inline void addDepartMsgResponse::clear_success() {
  success_ = false;
}
inline bool addDepartMsgResponse::_internal_success() const {
  return success_;
}
inline bool addDepartMsgResponse::success() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.addDepartMsgResponse.success)
  return _internal_success();
}
inline void addDepartMsgResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void addDepartMsgResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:ChatMessageProto.addDepartMsgResponse.success)
}

// -------------------------------------------------------------------

// delDepartMsgRequest

// .ChatMessageProto.departChatMsg DepartMsg = 1;
inline bool delDepartMsgRequest::_internal_has_departmsg() const {
  return this != internal_default_instance() && departmsg_ != nullptr;
}
inline bool delDepartMsgRequest::has_departmsg() const {
  return _internal_has_departmsg();
}
inline void delDepartMsgRequest::clear_departmsg() {
  if (GetArenaNoVirtual() == nullptr && departmsg_ != nullptr) {
    delete departmsg_;
  }
  departmsg_ = nullptr;
}
inline const ::ChatMessageProto::departChatMsg& delDepartMsgRequest::_internal_departmsg() const {
  const ::ChatMessageProto::departChatMsg* p = departmsg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ChatMessageProto::departChatMsg*>(
      &::ChatMessageProto::_departChatMsg_default_instance_);
}
inline const ::ChatMessageProto::departChatMsg& delDepartMsgRequest::departmsg() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.delDepartMsgRequest.DepartMsg)
  return _internal_departmsg();
}
inline ::ChatMessageProto::departChatMsg* delDepartMsgRequest::release_departmsg() {
  // @@protoc_insertion_point(field_release:ChatMessageProto.delDepartMsgRequest.DepartMsg)
  
  ::ChatMessageProto::departChatMsg* temp = departmsg_;
  departmsg_ = nullptr;
  return temp;
}
inline ::ChatMessageProto::departChatMsg* delDepartMsgRequest::_internal_mutable_departmsg() {
  
  if (departmsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::ChatMessageProto::departChatMsg>(GetArenaNoVirtual());
    departmsg_ = p;
  }
  return departmsg_;
}
inline ::ChatMessageProto::departChatMsg* delDepartMsgRequest::mutable_departmsg() {
  // @@protoc_insertion_point(field_mutable:ChatMessageProto.delDepartMsgRequest.DepartMsg)
  return _internal_mutable_departmsg();
}
inline void delDepartMsgRequest::set_allocated_departmsg(::ChatMessageProto::departChatMsg* departmsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete departmsg_;
  }
  if (departmsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      departmsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, departmsg, submessage_arena);
    }
    
  } else {
    
  }
  departmsg_ = departmsg;
  // @@protoc_insertion_point(field_set_allocated:ChatMessageProto.delDepartMsgRequest.DepartMsg)
}

// -------------------------------------------------------------------

// delDepartMsgResponse

// .ChatMessageProto.ResultCode result = 1;
inline bool delDepartMsgResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool delDepartMsgResponse::has_result() const {
  return _internal_has_result();
}
inline void delDepartMsgResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::ChatMessageProto::ResultCode& delDepartMsgResponse::_internal_result() const {
  const ::ChatMessageProto::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ChatMessageProto::ResultCode*>(
      &::ChatMessageProto::_ResultCode_default_instance_);
}
inline const ::ChatMessageProto::ResultCode& delDepartMsgResponse::result() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.delDepartMsgResponse.result)
  return _internal_result();
}
inline ::ChatMessageProto::ResultCode* delDepartMsgResponse::release_result() {
  // @@protoc_insertion_point(field_release:ChatMessageProto.delDepartMsgResponse.result)
  
  ::ChatMessageProto::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::ChatMessageProto::ResultCode* delDepartMsgResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::ChatMessageProto::ResultCode>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::ChatMessageProto::ResultCode* delDepartMsgResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:ChatMessageProto.delDepartMsgResponse.result)
  return _internal_mutable_result();
}
inline void delDepartMsgResponse::set_allocated_result(::ChatMessageProto::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:ChatMessageProto.delDepartMsgResponse.result)
}

// bool success = 2;
inline void delDepartMsgResponse::clear_success() {
  success_ = false;
}
inline bool delDepartMsgResponse::_internal_success() const {
  return success_;
}
inline bool delDepartMsgResponse::success() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.delDepartMsgResponse.success)
  return _internal_success();
}
inline void delDepartMsgResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void delDepartMsgResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:ChatMessageProto.delDepartMsgResponse.success)
}

// -------------------------------------------------------------------

// queryDepartMsgRequest

// bytes username = 1;
inline void queryDepartMsgRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& queryDepartMsgRequest::username() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.queryDepartMsgRequest.username)
  return _internal_username();
}
inline void queryDepartMsgRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:ChatMessageProto.queryDepartMsgRequest.username)
}
inline std::string* queryDepartMsgRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:ChatMessageProto.queryDepartMsgRequest.username)
  return _internal_mutable_username();
}
inline const std::string& queryDepartMsgRequest::_internal_username() const {
  return username_.GetNoArena();
}
inline void queryDepartMsgRequest::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void queryDepartMsgRequest::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatMessageProto.queryDepartMsgRequest.username)
}
inline void queryDepartMsgRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatMessageProto.queryDepartMsgRequest.username)
}
inline void queryDepartMsgRequest::set_username(const void* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatMessageProto.queryDepartMsgRequest.username)
}
inline std::string* queryDepartMsgRequest::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* queryDepartMsgRequest::release_username() {
  // @@protoc_insertion_point(field_release:ChatMessageProto.queryDepartMsgRequest.username)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void queryDepartMsgRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:ChatMessageProto.queryDepartMsgRequest.username)
}

// -------------------------------------------------------------------

// queryDepartMsgResponse

// repeated .ChatMessageProto.departChatMsg DepartMsg = 1;
inline int queryDepartMsgResponse::_internal_departmsg_size() const {
  return departmsg_.size();
}
inline int queryDepartMsgResponse::departmsg_size() const {
  return _internal_departmsg_size();
}
inline void queryDepartMsgResponse::clear_departmsg() {
  departmsg_.Clear();
}
inline ::ChatMessageProto::departChatMsg* queryDepartMsgResponse::mutable_departmsg(int index) {
  // @@protoc_insertion_point(field_mutable:ChatMessageProto.queryDepartMsgResponse.DepartMsg)
  return departmsg_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatMessageProto::departChatMsg >*
queryDepartMsgResponse::mutable_departmsg() {
  // @@protoc_insertion_point(field_mutable_list:ChatMessageProto.queryDepartMsgResponse.DepartMsg)
  return &departmsg_;
}
inline const ::ChatMessageProto::departChatMsg& queryDepartMsgResponse::_internal_departmsg(int index) const {
  return departmsg_.Get(index);
}
inline const ::ChatMessageProto::departChatMsg& queryDepartMsgResponse::departmsg(int index) const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.queryDepartMsgResponse.DepartMsg)
  return _internal_departmsg(index);
}
inline ::ChatMessageProto::departChatMsg* queryDepartMsgResponse::_internal_add_departmsg() {
  return departmsg_.Add();
}
inline ::ChatMessageProto::departChatMsg* queryDepartMsgResponse::add_departmsg() {
  // @@protoc_insertion_point(field_add:ChatMessageProto.queryDepartMsgResponse.DepartMsg)
  return _internal_add_departmsg();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatMessageProto::departChatMsg >&
queryDepartMsgResponse::departmsg() const {
  // @@protoc_insertion_point(field_list:ChatMessageProto.queryDepartMsgResponse.DepartMsg)
  return departmsg_;
}

// .ChatMessageProto.ResultCode result = 2;
inline bool queryDepartMsgResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool queryDepartMsgResponse::has_result() const {
  return _internal_has_result();
}
inline void queryDepartMsgResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::ChatMessageProto::ResultCode& queryDepartMsgResponse::_internal_result() const {
  const ::ChatMessageProto::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ChatMessageProto::ResultCode*>(
      &::ChatMessageProto::_ResultCode_default_instance_);
}
inline const ::ChatMessageProto::ResultCode& queryDepartMsgResponse::result() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.queryDepartMsgResponse.result)
  return _internal_result();
}
inline ::ChatMessageProto::ResultCode* queryDepartMsgResponse::release_result() {
  // @@protoc_insertion_point(field_release:ChatMessageProto.queryDepartMsgResponse.result)
  
  ::ChatMessageProto::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::ChatMessageProto::ResultCode* queryDepartMsgResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::ChatMessageProto::ResultCode>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::ChatMessageProto::ResultCode* queryDepartMsgResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:ChatMessageProto.queryDepartMsgResponse.result)
  return _internal_mutable_result();
}
inline void queryDepartMsgResponse::set_allocated_result(::ChatMessageProto::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:ChatMessageProto.queryDepartMsgResponse.result)
}

// bool success = 3;
inline void queryDepartMsgResponse::clear_success() {
  success_ = false;
}
inline bool queryDepartMsgResponse::_internal_success() const {
  return success_;
}
inline bool queryDepartMsgResponse::success() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.queryDepartMsgResponse.success)
  return _internal_success();
}
inline void queryDepartMsgResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void queryDepartMsgResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:ChatMessageProto.queryDepartMsgResponse.success)
}

// -------------------------------------------------------------------

// queryOfflineMsgRequest

// bytes recvname = 1;
inline void queryOfflineMsgRequest::clear_recvname() {
  recvname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& queryOfflineMsgRequest::recvname() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.queryOfflineMsgRequest.recvname)
  return _internal_recvname();
}
inline void queryOfflineMsgRequest::set_recvname(const std::string& value) {
  _internal_set_recvname(value);
  // @@protoc_insertion_point(field_set:ChatMessageProto.queryOfflineMsgRequest.recvname)
}
inline std::string* queryOfflineMsgRequest::mutable_recvname() {
  // @@protoc_insertion_point(field_mutable:ChatMessageProto.queryOfflineMsgRequest.recvname)
  return _internal_mutable_recvname();
}
inline const std::string& queryOfflineMsgRequest::_internal_recvname() const {
  return recvname_.GetNoArena();
}
inline void queryOfflineMsgRequest::_internal_set_recvname(const std::string& value) {
  
  recvname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void queryOfflineMsgRequest::set_recvname(std::string&& value) {
  
  recvname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatMessageProto.queryOfflineMsgRequest.recvname)
}
inline void queryOfflineMsgRequest::set_recvname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recvname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatMessageProto.queryOfflineMsgRequest.recvname)
}
inline void queryOfflineMsgRequest::set_recvname(const void* value, size_t size) {
  
  recvname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatMessageProto.queryOfflineMsgRequest.recvname)
}
inline std::string* queryOfflineMsgRequest::_internal_mutable_recvname() {
  
  return recvname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* queryOfflineMsgRequest::release_recvname() {
  // @@protoc_insertion_point(field_release:ChatMessageProto.queryOfflineMsgRequest.recvname)
  
  return recvname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void queryOfflineMsgRequest::set_allocated_recvname(std::string* recvname) {
  if (recvname != nullptr) {
    
  } else {
    
  }
  recvname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recvname);
  // @@protoc_insertion_point(field_set_allocated:ChatMessageProto.queryOfflineMsgRequest.recvname)
}

// -------------------------------------------------------------------

// queryOfflineMsgResponse

// repeated .ChatMessageProto.chatMsg Msg = 1;
inline int queryOfflineMsgResponse::_internal_msg_size() const {
  return msg_.size();
}
inline int queryOfflineMsgResponse::msg_size() const {
  return _internal_msg_size();
}
inline void queryOfflineMsgResponse::clear_msg() {
  msg_.Clear();
}
inline ::ChatMessageProto::chatMsg* queryOfflineMsgResponse::mutable_msg(int index) {
  // @@protoc_insertion_point(field_mutable:ChatMessageProto.queryOfflineMsgResponse.Msg)
  return msg_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatMessageProto::chatMsg >*
queryOfflineMsgResponse::mutable_msg() {
  // @@protoc_insertion_point(field_mutable_list:ChatMessageProto.queryOfflineMsgResponse.Msg)
  return &msg_;
}
inline const ::ChatMessageProto::chatMsg& queryOfflineMsgResponse::_internal_msg(int index) const {
  return msg_.Get(index);
}
inline const ::ChatMessageProto::chatMsg& queryOfflineMsgResponse::msg(int index) const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.queryOfflineMsgResponse.Msg)
  return _internal_msg(index);
}
inline ::ChatMessageProto::chatMsg* queryOfflineMsgResponse::_internal_add_msg() {
  return msg_.Add();
}
inline ::ChatMessageProto::chatMsg* queryOfflineMsgResponse::add_msg() {
  // @@protoc_insertion_point(field_add:ChatMessageProto.queryOfflineMsgResponse.Msg)
  return _internal_add_msg();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ChatMessageProto::chatMsg >&
queryOfflineMsgResponse::msg() const {
  // @@protoc_insertion_point(field_list:ChatMessageProto.queryOfflineMsgResponse.Msg)
  return msg_;
}

// .ChatMessageProto.ResultCode result = 2;
inline bool queryOfflineMsgResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool queryOfflineMsgResponse::has_result() const {
  return _internal_has_result();
}
inline void queryOfflineMsgResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::ChatMessageProto::ResultCode& queryOfflineMsgResponse::_internal_result() const {
  const ::ChatMessageProto::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ChatMessageProto::ResultCode*>(
      &::ChatMessageProto::_ResultCode_default_instance_);
}
inline const ::ChatMessageProto::ResultCode& queryOfflineMsgResponse::result() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.queryOfflineMsgResponse.result)
  return _internal_result();
}
inline ::ChatMessageProto::ResultCode* queryOfflineMsgResponse::release_result() {
  // @@protoc_insertion_point(field_release:ChatMessageProto.queryOfflineMsgResponse.result)
  
  ::ChatMessageProto::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::ChatMessageProto::ResultCode* queryOfflineMsgResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::ChatMessageProto::ResultCode>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::ChatMessageProto::ResultCode* queryOfflineMsgResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:ChatMessageProto.queryOfflineMsgResponse.result)
  return _internal_mutable_result();
}
inline void queryOfflineMsgResponse::set_allocated_result(::ChatMessageProto::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:ChatMessageProto.queryOfflineMsgResponse.result)
}

// bool success = 3;
inline void queryOfflineMsgResponse::clear_success() {
  success_ = false;
}
inline bool queryOfflineMsgResponse::_internal_success() const {
  return success_;
}
inline bool queryOfflineMsgResponse::success() const {
  // @@protoc_insertion_point(field_get:ChatMessageProto.queryOfflineMsgResponse.success)
  return _internal_success();
}
inline void queryOfflineMsgResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void queryOfflineMsgResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:ChatMessageProto.queryOfflineMsgResponse.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ChatMessageProto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ChatMsg_2eproto
